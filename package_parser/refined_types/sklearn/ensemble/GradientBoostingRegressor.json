{
    "sklearn.ensemble.GradientBoostingRegressor": {
        "loss": {
            "refined_type": {
                "kind": "EnumType",
                "values": [
                    "quantile",
                    "huber",
                    "absolute_error",
                    "squared_error"
                ]
            },
            "docstring": {
                "type": "{'squared_error', 'absolute_error', 'huber', 'quantile'},             default='squared_error'",
                "description": "Loss function to be optimized. 'squared_error' refers to the squared\nerror for regression. 'absolute_error' refers to the absolute error of\nregression and is a robust loss function. 'huber' is a\ncombination of the two. 'quantile' allows quantile regression (use\n`alpha` to specify the quantile).\n\n.. deprecated:: 1.0\n    The loss 'ls' was deprecated in v1.0 and will be removed in\n    version 1.2. Use `loss='squared_error'` which is equivalent.\n\n.. deprecated:: 1.0\n    The loss 'lad' was deprecated in v1.0 and will be removed in\n    version 1.2. Use `loss='absolute_error'` which is equivalent."
            }
        },
        "criterion": {
            "refined_type": {
                "kind": "EnumType",
                "values": ["squared_error", "mse", "friedman_mse", "mae"]
            },
            "docstring": {
                "type": "{'friedman_mse', 'squared_error', 'mse', 'mae'},             default='friedman_mse'",
                "description": "The function to measure the quality of a split. Supported criteria\nare \"friedman_mse\" for the mean squared error with improvement\nscore by Friedman, \"squared_error\" for mean squared error, and \"mae\"\nfor the mean absolute error. The default value of \"friedman_mse\" is\ngenerally the best as it can provide a better approximation in some\ncases.\n\n.. versionadded:: 0.18\n\n.. deprecated:: 0.24\n    `criterion='mae'` is deprecated and will be removed in version\n    1.1 (renaming of 0.26). The correct way of minimizing the absolute\n    error is to use `loss='absolute_error'` instead.\n\n.. deprecated:: 1.0\n    Criterion 'mse' was deprecated in v1.0 and will be removed in\n    version 1.2. Use `criterion='squared_error'` which is equivalent."
            }
        },
        "max_features": {
            "refined_type": {
                "kind": "UnionType",
                "types": [
                    {
                        "kind": "EnumType",
                        "values": ["sqrt", "auto", "log2"]
                    },
                    {
                        "kind": "NamedType",
                        "name": "float"
                    },
                    {
                        "kind": "NamedType",
                        "name": "int"
                    }
                ]
            },
            "docstring": {
                "type": "{'auto', 'sqrt', 'log2'}, int or float, default=None",
                "description": "The number of features to consider when looking for the best split:\n\n- If int, then consider `max_features` features at each split.\n- If float, then `max_features` is a fraction and\n  `int(max_features * n_features)` features are considered at each\n  split.\n- If \"auto\", then `max_features=n_features`.\n- If \"sqrt\", then `max_features=sqrt(n_features)`.\n- If \"log2\", then `max_features=log2(n_features)`.\n- If None, then `max_features=n_features`.\n\nChoosing `max_features < n_features` leads to a reduction of variance\nand an increase in bias.\n\nNote: the search for a split does not stop until at least one\nvalid partition of the node samples is found, even if it requires to\neffectively inspect more than ``max_features`` features."
            }
        },
        "validation_fraction": {
            "refined_type": {
                "kind": "BoundaryType",
                "baseType": "float",
                "min": 0,
                "minInclusive": false,
                "max": 1,
                "maxInclusive": false
            },
            "docstring": {
                "type": "float, default=0.1",
                "description": "The proportion of training data to set aside as validation set for\nearly stopping. Must be between 0 and 1.\nOnly used if ``n_iter_no_change`` is set to an integer.\n\n.. versionadded:: 0.20"
            }
        },
        "ccp_alpha": {
            "refined_type": {
                "kind": "BoundaryType",
                "baseType": "float",
                "min": 0,
                "minInclusive": true,
                "max": null,
                "maxInclusive": false
            },
            "docstring": {
                "type": "non-negative float, default=0.0",
                "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The\nsubtree with the largest cost complexity that is smaller than\n``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n:ref:`minimal_cost_complexity_pruning` for details.\n\n.. versionadded:: 0.22"
            }
        }
    }
}
