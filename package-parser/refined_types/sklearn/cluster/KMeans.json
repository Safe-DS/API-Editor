{
    "sklearn.cluster.KMeans": {
        "init": {
            "refined_type": {
                "kind": "UnionType",
                "types": [
                    {
                        "kind": "NamedType",
                        "name": "callable"
                    },
                    {
                        "kind": "NamedType",
                        "name": "array-like"
                    },
                    {
                        "kind": "EnumType",
                        "values": ["k-means++", "random"]
                    }
                ]
            },
            "docstring": {
                "type": "{'k-means++', 'random'}, callable or array-like of shape (n_clusters, n_features), default='k-means++'",
                "description": "Method for initialization:\n\n'k-means++' : selects initial cluster centers for k-mean\nclustering in a smart way to speed up convergence. See section\nNotes in k_init for more details.\n\n'random': choose `n_clusters` observations (rows) at random from data\nfor the initial centroids.\n\nIf an array is passed, it should be of shape (n_clusters, n_features)\nand gives the initial centers.\n\nIf a callable is passed, it should take arguments X, n_clusters and a\nrandom state and return an initialization."
            }
        },
        "algorithm": {
            "refined_type": {
                "kind": "EnumType",
                "values": ["full", "elkan", "auto"]
            },
            "docstring": {
                "type": "{'auto', 'full', 'elkan'}, default='auto'",
                "description": "K-means algorithm to use. The classical EM-style algorithm is \"full\". The \"elkan\" variation is more efficient on data with well-defined clusters, by using the triangle inequality. However itâ€™s more memory intensive due to the allocation of an extra array of shape (n_samples, n_clusters).\n\nFor now \"auto\" (kept for backward compatibility) chooses \"elkan\" but it might change in the future for a better heuristic.\n\n"
            }
        }
    }
}
