{
    "sklearn/sklearn._config/config_context/display": {
        "target": "sklearn/sklearn._config/config_context/display",
        "enumName": "Display",
        "pairs": [
            {
                "stringValue": "diagram",
                "instanceName": "Diagram"
            },
            {
                "stringValue": "text",
                "instanceName": "Text"
            }
        ]
    },
    "sklearn/sklearn._config/set_config/display": {
        "target": "sklearn/sklearn._config/set_config/display",
        "enumName": "Display",
        "pairs": [
            {
                "stringValue": "diagram",
                "instanceName": "Diagram"
            },
            {
                "stringValue": "text",
                "instanceName": "Text"
            }
        ]
    },
    "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/deviance/weights": {
        "target": "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/deviance/weights",
        "enumName": "Weights",
        "pairs": []
    },
    "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/deviance_derivative/weights": {
        "target": "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/deviance_derivative/weights",
        "enumName": "Weights",
        "pairs": []
    },
    "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/__init__/power": {
        "target": "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/__init__/power",
        "enumName": "Power",
        "pairs": []
    },
    "sklearn/sklearn.base/BaseEstimator/_check_feature_names/X": {
        "target": "sklearn/sklearn.base/BaseEstimator/_check_feature_names/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.base/BaseEstimator/_check_n_features/X": {
        "target": "sklearn/sklearn.base/BaseEstimator/_check_n_features/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.base/BaseEstimator/_validate_data/X": {
        "target": "sklearn/sklearn.base/BaseEstimator/_validate_data/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.base/OutlierMixin/fit_predict/X": {
        "target": "sklearn/sklearn.base/OutlierMixin/fit_predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.base/clone/estimator": {
        "target": "sklearn/sklearn.base/clone/estimator",
        "enumName": "Estimator",
        "pairs": []
    },
    "sklearn/sklearn.calibration/CalibratedClassifierCV/__init__/method": {
        "target": "sklearn/sklearn.calibration/CalibratedClassifierCV/__init__/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "sigmoid",
                "instanceName": "Sigmoid"
            },
            {
                "stringValue": "isotonic",
                "instanceName": "Isotonic"
            }
        ]
    },
    "sklearn/sklearn.calibration/CalibrationDisplay/from_estimator/X": {
        "target": "sklearn/sklearn.calibration/CalibrationDisplay/from_estimator/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.calibration/CalibrationDisplay/from_estimator/strategy": {
        "target": "sklearn/sklearn.calibration/CalibrationDisplay/from_estimator/strategy",
        "enumName": "Strategy",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "quantile",
                "instanceName": "Quantile"
            }
        ]
    },
    "sklearn/sklearn.calibration/CalibrationDisplay/from_predictions/strategy": {
        "target": "sklearn/sklearn.calibration/CalibrationDisplay/from_predictions/strategy",
        "enumName": "Strategy",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "quantile",
                "instanceName": "Quantile"
            }
        ]
    },
    "sklearn/sklearn.calibration/_CalibratedClassifier/__init__/method": {
        "target": "sklearn/sklearn.calibration/_CalibratedClassifier/__init__/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "sigmoid",
                "instanceName": "Sigmoid"
            },
            {
                "stringValue": "isotonic",
                "instanceName": "Isotonic"
            }
        ]
    },
    "sklearn/sklearn.calibration/_fit_calibrator/method": {
        "target": "sklearn/sklearn.calibration/_fit_calibrator/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "sigmoid",
                "instanceName": "Sigmoid"
            },
            {
                "stringValue": "isotonic",
                "instanceName": "Isotonic"
            }
        ]
    },
    "sklearn/sklearn.calibration/_fit_classifier_calibrator_pair/method": {
        "target": "sklearn/sklearn.calibration/_fit_classifier_calibrator_pair/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "sigmoid",
                "instanceName": "Sigmoid"
            },
            {
                "stringValue": "isotonic",
                "instanceName": "Isotonic"
            }
        ]
    },
    "sklearn/sklearn.calibration/calibration_curve/strategy": {
        "target": "sklearn/sklearn.calibration/calibration_curve/strategy",
        "enumName": "Strategy",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "quantile",
                "instanceName": "Quantile"
            }
        ]
    },
    "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/__init__/affinity": {
        "target": "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/__init__/affinity",
        "enumName": "Affinity",
        "pairs": [
            {
                "stringValue": "euclidean",
                "instanceName": "Euclidean"
            },
            {
                "stringValue": "precomputed",
                "instanceName": "Precomputed"
            }
        ]
    },
    "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/fit/X": {
        "target": "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/fit_predict/X": {
        "target": "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/fit_predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/predict/X": {
        "target": "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/__init__/linkage": {
        "target": "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/__init__/linkage",
        "enumName": "Linkage",
        "pairs": [
            {
                "stringValue": "single",
                "instanceName": "Single"
            },
            {
                "stringValue": "ward",
                "instanceName": "Ward"
            },
            {
                "stringValue": "complete",
                "instanceName": "Complete"
            },
            {
                "stringValue": "average",
                "instanceName": "Average"
            }
        ]
    },
    "sklearn/sklearn.cluster._agglomerative/FeatureAgglomeration/__init__/linkage": {
        "target": "sklearn/sklearn.cluster._agglomerative/FeatureAgglomeration/__init__/linkage",
        "enumName": "Linkage",
        "pairs": [
            {
                "stringValue": "single",
                "instanceName": "Single"
            },
            {
                "stringValue": "ward",
                "instanceName": "Ward"
            },
            {
                "stringValue": "complete",
                "instanceName": "Complete"
            },
            {
                "stringValue": "average",
                "instanceName": "Average"
            }
        ]
    },
    "sklearn/sklearn.cluster._agglomerative/_fix_connectivity/affinity": {
        "target": "sklearn/sklearn.cluster._agglomerative/_fix_connectivity/affinity",
        "enumName": "Affinity",
        "pairs": [
            {
                "stringValue": "euclidean",
                "instanceName": "Euclidean"
            },
            {
                "stringValue": "precomputed",
                "instanceName": "Precomputed"
            }
        ]
    },
    "sklearn/sklearn.cluster._agglomerative/linkage_tree/linkage": {
        "target": "sklearn/sklearn.cluster._agglomerative/linkage_tree/linkage",
        "enumName": "Linkage",
        "pairs": [
            {
                "stringValue": "single",
                "instanceName": "Single"
            },
            {
                "stringValue": "average",
                "instanceName": "Average"
            },
            {
                "stringValue": "complete",
                "instanceName": "Complete"
            }
        ]
    },
    "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/method": {
        "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "scale",
                "instanceName": "Scale"
            },
            {
                "stringValue": "log",
                "instanceName": "Log"
            },
            {
                "stringValue": "bistochastic",
                "instanceName": "Bistochastic"
            }
        ]
    },
    "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/svd_method": {
        "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/svd_method",
        "enumName": "SvdMethod",
        "pairs": [
            {
                "stringValue": "randomized",
                "instanceName": "Randomized"
            },
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            }
        ]
    },
    "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/init": {
        "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/init",
        "enumName": "Init",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "k-means++",
                "instanceName": "Kmeans"
            }
        ]
    },
    "sklearn/sklearn.cluster._bicluster/SpectralCoclustering/__init__/svd_method": {
        "target": "sklearn/sklearn.cluster._bicluster/SpectralCoclustering/__init__/svd_method",
        "enumName": "SvdMethod",
        "pairs": [
            {
                "stringValue": "randomized",
                "instanceName": "Randomized"
            },
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            }
        ]
    },
    "sklearn/sklearn.cluster._birch/Birch/fit/X": {
        "target": "sklearn/sklearn.cluster._birch/Birch/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._birch/Birch/partial_fit/X": {
        "target": "sklearn/sklearn.cluster._birch/Birch/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._birch/Birch/predict/X": {
        "target": "sklearn/sklearn.cluster._birch/Birch/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._birch/Birch/transform/X": {
        "target": "sklearn/sklearn.cluster._birch/Birch/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._dbscan/DBSCAN/__init__/algorithm": {
        "target": "sklearn/sklearn.cluster._dbscan/DBSCAN/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.cluster._dbscan/DBSCAN/fit/X": {
        "target": "sklearn/sklearn.cluster._dbscan/DBSCAN/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._dbscan/DBSCAN/fit_predict/X": {
        "target": "sklearn/sklearn.cluster._dbscan/DBSCAN/fit_predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._dbscan/dbscan/X": {
        "target": "sklearn/sklearn.cluster._dbscan/dbscan/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._dbscan/dbscan/algorithm": {
        "target": "sklearn/sklearn.cluster._dbscan/dbscan/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.cluster._kmeans/KMeans/__init__/init": {
        "target": "sklearn/sklearn.cluster._kmeans/KMeans/__init__/init",
        "enumName": "Init",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "k-means++",
                "instanceName": "Kmeans"
            }
        ]
    },
    "sklearn/sklearn.cluster._kmeans/KMeans/__init__/algorithm": {
        "target": "sklearn/sklearn.cluster._kmeans/KMeans/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "elkan",
                "instanceName": "Elkan"
            },
            {
                "stringValue": "full",
                "instanceName": "Full"
            }
        ]
    },
    "sklearn/sklearn.cluster._kmeans/KMeans/_init_centroids/X": {
        "target": "sklearn/sklearn.cluster._kmeans/KMeans/_init_centroids/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/KMeans/_init_centroids/init": {
        "target": "sklearn/sklearn.cluster._kmeans/KMeans/_init_centroids/init",
        "enumName": "Init",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "k-means++",
                "instanceName": "Kmeans"
            }
        ]
    },
    "sklearn/sklearn.cluster._kmeans/KMeans/fit/X": {
        "target": "sklearn/sklearn.cluster._kmeans/KMeans/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/KMeans/fit_predict/X": {
        "target": "sklearn/sklearn.cluster._kmeans/KMeans/fit_predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/KMeans/fit_transform/X": {
        "target": "sklearn/sklearn.cluster._kmeans/KMeans/fit_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/KMeans/predict/X": {
        "target": "sklearn/sklearn.cluster._kmeans/KMeans/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/KMeans/score/X": {
        "target": "sklearn/sklearn.cluster._kmeans/KMeans/score/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/KMeans/transform/X": {
        "target": "sklearn/sklearn.cluster._kmeans/KMeans/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/__init__/init": {
        "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/__init__/init",
        "enumName": "Init",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "k-means++",
                "instanceName": "Kmeans"
            }
        ]
    },
    "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/fit/X": {
        "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/partial_fit/X": {
        "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/predict/X": {
        "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/_kmeans_plusplus/X": {
        "target": "sklearn/sklearn.cluster._kmeans/_kmeans_plusplus/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/_kmeans_single_elkan/X": {
        "target": "sklearn/sklearn.cluster._kmeans/_kmeans_single_elkan/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/_kmeans_single_lloyd/X": {
        "target": "sklearn/sklearn.cluster._kmeans/_kmeans_single_lloyd/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/_labels_inertia/X": {
        "target": "sklearn/sklearn.cluster._kmeans/_labels_inertia/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/_mini_batch_step/X": {
        "target": "sklearn/sklearn.cluster._kmeans/_mini_batch_step/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/k_means/X": {
        "target": "sklearn/sklearn.cluster._kmeans/k_means/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._kmeans/k_means/init": {
        "target": "sklearn/sklearn.cluster._kmeans/k_means/init",
        "enumName": "Init",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "k-means++",
                "instanceName": "Kmeans"
            }
        ]
    },
    "sklearn/sklearn.cluster._kmeans/k_means/algorithm": {
        "target": "sklearn/sklearn.cluster._kmeans/k_means/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "elkan",
                "instanceName": "Elkan"
            },
            {
                "stringValue": "full",
                "instanceName": "Full"
            }
        ]
    },
    "sklearn/sklearn.cluster._kmeans/kmeans_plusplus/X": {
        "target": "sklearn/sklearn.cluster._kmeans/kmeans_plusplus/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._optics/OPTICS/__init__/algorithm": {
        "target": "sklearn/sklearn.cluster._optics/OPTICS/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.cluster._optics/compute_optics_graph/algorithm": {
        "target": "sklearn/sklearn.cluster._optics/compute_optics_graph/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.cluster._spectral/SpectralClustering/__init__/eigen_solver": {
        "target": "sklearn/sklearn.cluster._spectral/SpectralClustering/__init__/eigen_solver",
        "enumName": "EigenSolver",
        "pairs": [
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            },
            {
                "stringValue": "amg",
                "instanceName": "Amg"
            },
            {
                "stringValue": "lobpcg",
                "instanceName": "Lobpcg"
            }
        ]
    },
    "sklearn/sklearn.cluster._spectral/SpectralClustering/__init__/assign_labels": {
        "target": "sklearn/sklearn.cluster._spectral/SpectralClustering/__init__/assign_labels",
        "enumName": "AssignLabels",
        "pairs": [
            {
                "stringValue": "kmeans",
                "instanceName": "Kmeans"
            },
            {
                "stringValue": "discretize",
                "instanceName": "Discretize"
            }
        ]
    },
    "sklearn/sklearn.cluster._spectral/SpectralClustering/fit/X": {
        "target": "sklearn/sklearn.cluster._spectral/SpectralClustering/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._spectral/SpectralClustering/fit_predict/X": {
        "target": "sklearn/sklearn.cluster._spectral/SpectralClustering/fit_predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.cluster._spectral/spectral_clustering/affinity": {
        "target": "sklearn/sklearn.cluster._spectral/spectral_clustering/affinity",
        "enumName": "Affinity",
        "pairs": []
    },
    "sklearn/sklearn.cluster._spectral/spectral_clustering/eigen_solver": {
        "target": "sklearn/sklearn.cluster._spectral/spectral_clustering/eigen_solver",
        "enumName": "EigenSolver",
        "pairs": [
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            },
            {
                "stringValue": "amg",
                "instanceName": "Amg"
            },
            {
                "stringValue": "lobpcg",
                "instanceName": "Lobpcg"
            }
        ]
    },
    "sklearn/sklearn.cluster._spectral/spectral_clustering/assign_labels": {
        "target": "sklearn/sklearn.cluster._spectral/spectral_clustering/assign_labels",
        "enumName": "AssignLabels",
        "pairs": [
            {
                "stringValue": "kmeans",
                "instanceName": "Kmeans"
            },
            {
                "stringValue": "discretize",
                "instanceName": "Discretize"
            }
        ]
    },
    "sklearn/sklearn.compose._column_transformer/ColumnTransformer/__init__/transformers": {
        "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/__init__/transformers",
        "enumName": "Transformers",
        "pairs": [
            {
                "stringValue": "drop",
                "instanceName": "Drop"
            },
            {
                "stringValue": "passthrough",
                "instanceName": "Passthrough"
            }
        ]
    },
    "sklearn/sklearn.compose._column_transformer/ColumnTransformer/__init__/remainder": {
        "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/__init__/remainder",
        "enumName": "Remainder",
        "pairs": [
            {
                "stringValue": "drop",
                "instanceName": "Drop"
            },
            {
                "stringValue": "passthrough",
                "instanceName": "Passthrough"
            }
        ]
    },
    "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_hstack/Xs": {
        "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_hstack/Xs",
        "enumName": "Xs",
        "pairs": []
    },
    "sklearn/sklearn.compose._column_transformer/ColumnTransformer/fit/X": {
        "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.compose._column_transformer/ColumnTransformer/fit_transform/X": {
        "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/fit_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.compose._column_transformer/ColumnTransformer/transform/X": {
        "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.compose._column_transformer/make_column_transformer/remainder": {
        "target": "sklearn/sklearn.compose._column_transformer/make_column_transformer/remainder",
        "enumName": "Remainder",
        "pairs": [
            {
                "stringValue": "drop",
                "instanceName": "Drop"
            },
            {
                "stringValue": "passthrough",
                "instanceName": "Passthrough"
            }
        ]
    },
    "sklearn/sklearn.compose._target/TransformedTargetRegressor/fit/X": {
        "target": "sklearn/sklearn.compose._target/TransformedTargetRegressor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.compose._target/TransformedTargetRegressor/predict/X": {
        "target": "sklearn/sklearn.compose._target/TransformedTargetRegressor/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/fit/X": {
        "target": "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/error_norm/norm": {
        "target": "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/error_norm/norm",
        "enumName": "Norm",
        "pairs": [
            {
                "stringValue": "frobenius",
                "instanceName": "Frobenius"
            },
            {
                "stringValue": "spectral",
                "instanceName": "Spectral"
            }
        ]
    },
    "sklearn/sklearn.covariance._graph_lasso/GraphicalLasso/__init__/mode": {
        "target": "sklearn/sklearn.covariance._graph_lasso/GraphicalLasso/__init__/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            }
        ]
    },
    "sklearn/sklearn.covariance._graph_lasso/GraphicalLassoCV/__init__/mode": {
        "target": "sklearn/sklearn.covariance._graph_lasso/GraphicalLassoCV/__init__/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            }
        ]
    },
    "sklearn/sklearn.covariance._graph_lasso/graphical_lasso/mode": {
        "target": "sklearn/sklearn.covariance._graph_lasso/graphical_lasso/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            }
        ]
    },
    "sklearn/sklearn.covariance._graph_lasso/graphical_lasso_path/mode": {
        "target": "sklearn/sklearn.covariance._graph_lasso/graphical_lasso_path/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            }
        ]
    },
    "sklearn/sklearn.cross_decomposition._pls/CCA/__init__/tol": {
        "target": "sklearn/sklearn.cross_decomposition._pls/CCA/__init__/tol",
        "enumName": "Tol",
        "pairs": []
    },
    "sklearn/sklearn.cross_decomposition._pls/PLSCanonical/__init__/algorithm": {
        "target": "sklearn/sklearn.cross_decomposition._pls/PLSCanonical/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "nipals",
                "instanceName": "Nipals"
            },
            {
                "stringValue": "svd",
                "instanceName": "Svd"
            }
        ]
    },
    "sklearn/sklearn.cross_decomposition._pls/PLSCanonical/__init__/tol": {
        "target": "sklearn/sklearn.cross_decomposition._pls/PLSCanonical/__init__/tol",
        "enumName": "Tol",
        "pairs": []
    },
    "sklearn/sklearn.cross_decomposition._pls/PLSRegression/__init__/tol": {
        "target": "sklearn/sklearn.cross_decomposition._pls/PLSRegression/__init__/tol",
        "enumName": "Tol",
        "pairs": []
    },
    "sklearn/sklearn.datasets._base/load_files/decode_error": {
        "target": "sklearn/sklearn.datasets._base/load_files/decode_error",
        "enumName": "DecodeError",
        "pairs": [
            {
                "stringValue": "replace",
                "instanceName": "Replace"
            },
            {
                "stringValue": "strict",
                "instanceName": "Strict"
            },
            {
                "stringValue": "ignore",
                "instanceName": "Ignore"
            }
        ]
    },
    "sklearn/sklearn.datasets._base/load_sample_image/image_name": {
        "target": "sklearn/sklearn.datasets._base/load_sample_image/image_name",
        "enumName": "ImageName",
        "pairs": []
    },
    "sklearn/sklearn.datasets._kddcup99/fetch_kddcup99/subset": {
        "target": "sklearn/sklearn.datasets._kddcup99/fetch_kddcup99/subset",
        "enumName": "Subset",
        "pairs": [
            {
                "stringValue": "SA",
                "instanceName": "Sa"
            },
            {
                "stringValue": "http",
                "instanceName": "Http"
            },
            {
                "stringValue": "SF",
                "instanceName": "Sf"
            },
            {
                "stringValue": "smtp",
                "instanceName": "Smtp"
            }
        ]
    },
    "sklearn/sklearn.datasets._lfw/fetch_lfw_pairs/subset": {
        "target": "sklearn/sklearn.datasets._lfw/fetch_lfw_pairs/subset",
        "enumName": "Subset",
        "pairs": [
            {
                "stringValue": "train",
                "instanceName": "Train"
            },
            {
                "stringValue": "test",
                "instanceName": "Test"
            },
            {
                "stringValue": "10_folds",
                "instanceName": "Folds"
            }
        ]
    },
    "sklearn/sklearn.datasets._rcv1/fetch_rcv1/subset": {
        "target": "sklearn/sklearn.datasets._rcv1/fetch_rcv1/subset",
        "enumName": "Subset",
        "pairs": [
            {
                "stringValue": "train",
                "instanceName": "Train"
            },
            {
                "stringValue": "test",
                "instanceName": "Test"
            },
            {
                "stringValue": "all",
                "instanceName": "All"
            }
        ]
    },
    "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/return_indicator": {
        "target": "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/return_indicator",
        "enumName": "ReturnIndicator",
        "pairs": [
            {
                "stringValue": "dense",
                "instanceName": "Dense"
            },
            {
                "stringValue": "sparse",
                "instanceName": "Sparse"
            }
        ]
    },
    "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/X": {
        "target": "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/y": {
        "target": "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/subset": {
        "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/subset",
        "enumName": "Subset",
        "pairs": [
            {
                "stringValue": "train",
                "instanceName": "Train"
            },
            {
                "stringValue": "test",
                "instanceName": "Test"
            },
            {
                "stringValue": "all",
                "instanceName": "All"
            }
        ]
    },
    "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups_vectorized/subset": {
        "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups_vectorized/subset",
        "enumName": "Subset",
        "pairs": [
            {
                "stringValue": "train",
                "instanceName": "Train"
            },
            {
                "stringValue": "test",
                "instanceName": "Test"
            },
            {
                "stringValue": "all",
                "instanceName": "All"
            }
        ]
    },
    "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/__init__/fit_algorithm": {
        "target": "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/__init__/fit_algorithm",
        "enumName": "FitAlgorithm",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            }
        ]
    },
    "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/__init__/transform_algorithm": {
        "target": "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/__init__/transform_algorithm",
        "enumName": "TransformAlgorithm",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "omp",
                "instanceName": "Omp"
            },
            {
                "stringValue": "lasso_cd",
                "instanceName": "LassoCd"
            },
            {
                "stringValue": "lasso_lars",
                "instanceName": "LassoLars"
            },
            {
                "stringValue": "threshold",
                "instanceName": "Threshold"
            }
        ]
    },
    "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/__init__/fit_algorithm": {
        "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/__init__/fit_algorithm",
        "enumName": "FitAlgorithm",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            }
        ]
    },
    "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/__init__/transform_algorithm": {
        "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/__init__/transform_algorithm",
        "enumName": "TransformAlgorithm",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "omp",
                "instanceName": "Omp"
            },
            {
                "stringValue": "lasso_cd",
                "instanceName": "LassoCd"
            },
            {
                "stringValue": "lasso_lars",
                "instanceName": "LassoLars"
            },
            {
                "stringValue": "threshold",
                "instanceName": "Threshold"
            }
        ]
    },
    "sklearn/sklearn.decomposition._dict_learning/SparseCoder/__init__/transform_algorithm": {
        "target": "sklearn/sklearn.decomposition._dict_learning/SparseCoder/__init__/transform_algorithm",
        "enumName": "TransformAlgorithm",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "omp",
                "instanceName": "Omp"
            },
            {
                "stringValue": "lasso_cd",
                "instanceName": "LassoCd"
            },
            {
                "stringValue": "lasso_lars",
                "instanceName": "LassoLars"
            },
            {
                "stringValue": "threshold",
                "instanceName": "Threshold"
            }
        ]
    },
    "sklearn/sklearn.decomposition._dict_learning/_sparse_encode/algorithm": {
        "target": "sklearn/sklearn.decomposition._dict_learning/_sparse_encode/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "omp",
                "instanceName": "Omp"
            },
            {
                "stringValue": "lasso_cd",
                "instanceName": "LassoCd"
            },
            {
                "stringValue": "lasso_lars",
                "instanceName": "LassoLars"
            },
            {
                "stringValue": "threshold",
                "instanceName": "Threshold"
            }
        ]
    },
    "sklearn/sklearn.decomposition._dict_learning/dict_learning/method": {
        "target": "sklearn/sklearn.decomposition._dict_learning/dict_learning/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            }
        ]
    },
    "sklearn/sklearn.decomposition._dict_learning/dict_learning_online/method": {
        "target": "sklearn/sklearn.decomposition._dict_learning/dict_learning_online/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            }
        ]
    },
    "sklearn/sklearn.decomposition._dict_learning/sparse_encode/algorithm": {
        "target": "sklearn/sklearn.decomposition._dict_learning/sparse_encode/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "omp",
                "instanceName": "Omp"
            },
            {
                "stringValue": "lasso_cd",
                "instanceName": "LassoCd"
            },
            {
                "stringValue": "lasso_lars",
                "instanceName": "LassoLars"
            },
            {
                "stringValue": "threshold",
                "instanceName": "Threshold"
            }
        ]
    },
    "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/__init__/svd_method": {
        "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/__init__/svd_method",
        "enumName": "SvdMethod",
        "pairs": [
            {
                "stringValue": "randomized",
                "instanceName": "Randomized"
            },
            {
                "stringValue": "lapack",
                "instanceName": "Lapack"
            }
        ]
    },
    "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/__init__/rotation": {
        "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/__init__/rotation",
        "enumName": "Rotation",
        "pairs": [
            {
                "stringValue": "quartimax",
                "instanceName": "Quartimax"
            },
            {
                "stringValue": "varimax",
                "instanceName": "Varimax"
            }
        ]
    },
    "sklearn/sklearn.decomposition._fastica/FastICA/__init__/algorithm": {
        "target": "sklearn/sklearn.decomposition._fastica/FastICA/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "deflation",
                "instanceName": "Deflation"
            },
            {
                "stringValue": "parallel",
                "instanceName": "Parallel"
            }
        ]
    },
    "sklearn/sklearn.decomposition._fastica/FastICA/__init__/fun": {
        "target": "sklearn/sklearn.decomposition._fastica/FastICA/__init__/fun",
        "enumName": "Fun",
        "pairs": [
            {
                "stringValue": "cube",
                "instanceName": "Cube"
            },
            {
                "stringValue": "exp",
                "instanceName": "Exp"
            },
            {
                "stringValue": "logcosh",
                "instanceName": "Logcosh"
            }
        ]
    },
    "sklearn/sklearn.decomposition._fastica/FastICA/__init__/fun_args": {
        "target": "sklearn/sklearn.decomposition._fastica/FastICA/__init__/fun_args",
        "enumName": "FunArgs",
        "pairs": [
            {
                "stringValue": "alpha",
                "instanceName": "Alpha"
            }
        ]
    },
    "sklearn/sklearn.decomposition._fastica/fastica/algorithm": {
        "target": "sklearn/sklearn.decomposition._fastica/fastica/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "deflation",
                "instanceName": "Deflation"
            },
            {
                "stringValue": "parallel",
                "instanceName": "Parallel"
            }
        ]
    },
    "sklearn/sklearn.decomposition._fastica/fastica/fun": {
        "target": "sklearn/sklearn.decomposition._fastica/fastica/fun",
        "enumName": "Fun",
        "pairs": [
            {
                "stringValue": "cube",
                "instanceName": "Cube"
            },
            {
                "stringValue": "exp",
                "instanceName": "Exp"
            },
            {
                "stringValue": "logcosh",
                "instanceName": "Logcosh"
            }
        ]
    },
    "sklearn/sklearn.decomposition._fastica/fastica/fun_args": {
        "target": "sklearn/sklearn.decomposition._fastica/fastica/fun_args",
        "enumName": "FunArgs",
        "pairs": [
            {
                "stringValue": "alpha",
                "instanceName": "Alpha"
            }
        ]
    },
    "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/fit/X": {
        "target": "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/transform/X": {
        "target": "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/__init__/kernel": {
        "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/__init__/kernel",
        "enumName": "Kernel",
        "pairs": [
            {
                "stringValue": "precomputed",
                "instanceName": "Precomputed"
            },
            {
                "stringValue": "linear",
                "instanceName": "Linear"
            },
            {
                "stringValue": "rbf",
                "instanceName": "Rbf"
            },
            {
                "stringValue": "sigmoid",
                "instanceName": "Sigmoid"
            },
            {
                "stringValue": "poly",
                "instanceName": "Poly"
            },
            {
                "stringValue": "cosine",
                "instanceName": "Cosine"
            }
        ]
    },
    "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/__init__/eigen_solver": {
        "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/__init__/eigen_solver",
        "enumName": "EigenSolver",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "randomized",
                "instanceName": "Randomized"
            },
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            },
            {
                "stringValue": "dense",
                "instanceName": "Dense"
            }
        ]
    },
    "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/fit/X": {
        "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/fit_transform/X": {
        "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/fit_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/inverse_transform/X": {
        "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/inverse_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/transform/X": {
        "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/__init__/learning_method": {
        "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/__init__/learning_method",
        "enumName": "LearningMethod",
        "pairs": [
            {
                "stringValue": "batch",
                "instanceName": "Batch"
            },
            {
                "stringValue": "online",
                "instanceName": "Online"
            }
        ]
    },
    "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_approx_bound/X": {
        "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_approx_bound/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_e_step/X": {
        "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_e_step/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_em_step/X": {
        "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_em_step/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_perplexity_precomp_distr/X": {
        "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_perplexity_precomp_distr/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_unnormalized_transform/X": {
        "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_unnormalized_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/fit/X": {
        "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/partial_fit/X": {
        "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/perplexity/X": {
        "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/perplexity/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/score/X": {
        "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/score/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/transform/X": {
        "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._lda/_update_doc_distribution/X": {
        "target": "sklearn/sklearn.decomposition._lda/_update_doc_distribution/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._nmf/NMF/__init__/init": {
        "target": "sklearn/sklearn.decomposition._nmf/NMF/__init__/init",
        "enumName": "Init",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "nndsvdar",
                "instanceName": "Nndsvdar"
            },
            {
                "stringValue": "nndsvda",
                "instanceName": "Nndsvda"
            },
            {
                "stringValue": "custom",
                "instanceName": "Custom"
            },
            {
                "stringValue": "nndsvd",
                "instanceName": "Nndsvd"
            }
        ]
    },
    "sklearn/sklearn.decomposition._nmf/NMF/__init__/solver": {
        "target": "sklearn/sklearn.decomposition._nmf/NMF/__init__/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            },
            {
                "stringValue": "mu",
                "instanceName": "Mu"
            }
        ]
    },
    "sklearn/sklearn.decomposition._nmf/NMF/__init__/beta_loss": {
        "target": "sklearn/sklearn.decomposition._nmf/NMF/__init__/beta_loss",
        "enumName": "BetaLoss",
        "pairs": [
            {
                "stringValue": "frobenius",
                "instanceName": "Frobenius"
            },
            {
                "stringValue": "kullback-leibler",
                "instanceName": "Kullbackleibler"
            },
            {
                "stringValue": "itakura-saito",
                "instanceName": "Itakurasaito"
            }
        ]
    },
    "sklearn/sklearn.decomposition._nmf/NMF/__init__/regularization": {
        "target": "sklearn/sklearn.decomposition._nmf/NMF/__init__/regularization",
        "enumName": "Regularization",
        "pairs": [
            {
                "stringValue": "transformation",
                "instanceName": "Transformation"
            },
            {
                "stringValue": "both",
                "instanceName": "Both"
            },
            {
                "stringValue": "components",
                "instanceName": "Components"
            }
        ]
    },
    "sklearn/sklearn.decomposition._nmf/NMF/_fit_transform/X": {
        "target": "sklearn/sklearn.decomposition._nmf/NMF/_fit_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._nmf/NMF/fit/X": {
        "target": "sklearn/sklearn.decomposition._nmf/NMF/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._nmf/NMF/fit_transform/X": {
        "target": "sklearn/sklearn.decomposition._nmf/NMF/fit_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._nmf/NMF/inverse_transform/W": {
        "target": "sklearn/sklearn.decomposition._nmf/NMF/inverse_transform/W",
        "enumName": "W",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._nmf/NMF/transform/X": {
        "target": "sklearn/sklearn.decomposition._nmf/NMF/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._nmf/_beta_divergence/beta": {
        "target": "sklearn/sklearn.decomposition._nmf/_beta_divergence/beta",
        "enumName": "Beta",
        "pairs": [
            {
                "stringValue": "frobenius",
                "instanceName": "Frobenius"
            },
            {
                "stringValue": "kullback-leibler",
                "instanceName": "Kullbackleibler"
            },
            {
                "stringValue": "itakura-saito",
                "instanceName": "Itakurasaito"
            }
        ]
    },
    "sklearn/sklearn.decomposition._nmf/_fit_multiplicative_update/beta_loss": {
        "target": "sklearn/sklearn.decomposition._nmf/_fit_multiplicative_update/beta_loss",
        "enumName": "BetaLoss",
        "pairs": [
            {
                "stringValue": "frobenius",
                "instanceName": "Frobenius"
            },
            {
                "stringValue": "kullback-leibler",
                "instanceName": "Kullbackleibler"
            },
            {
                "stringValue": "itakura-saito",
                "instanceName": "Itakurasaito"
            }
        ]
    },
    "sklearn/sklearn.decomposition._nmf/_initialize_nmf/init": {
        "target": "sklearn/sklearn.decomposition._nmf/_initialize_nmf/init",
        "enumName": "Init",
        "pairs": [
            {
                "stringValue": "nndsvd",
                "instanceName": "Nndsvd"
            },
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "nndsvdar",
                "instanceName": "Nndsvdar"
            },
            {
                "stringValue": "nndsvda",
                "instanceName": "Nndsvda"
            }
        ]
    },
    "sklearn/sklearn.decomposition._nmf/non_negative_factorization/init": {
        "target": "sklearn/sklearn.decomposition._nmf/non_negative_factorization/init",
        "enumName": "Init",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "nndsvdar",
                "instanceName": "Nndsvdar"
            },
            {
                "stringValue": "nndsvda",
                "instanceName": "Nndsvda"
            },
            {
                "stringValue": "custom",
                "instanceName": "Custom"
            },
            {
                "stringValue": "nndsvd",
                "instanceName": "Nndsvd"
            }
        ]
    },
    "sklearn/sklearn.decomposition._nmf/non_negative_factorization/solver": {
        "target": "sklearn/sklearn.decomposition._nmf/non_negative_factorization/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            },
            {
                "stringValue": "mu",
                "instanceName": "Mu"
            }
        ]
    },
    "sklearn/sklearn.decomposition._nmf/non_negative_factorization/beta_loss": {
        "target": "sklearn/sklearn.decomposition._nmf/non_negative_factorization/beta_loss",
        "enumName": "BetaLoss",
        "pairs": [
            {
                "stringValue": "frobenius",
                "instanceName": "Frobenius"
            },
            {
                "stringValue": "kullback-leibler",
                "instanceName": "Kullbackleibler"
            },
            {
                "stringValue": "itakura-saito",
                "instanceName": "Itakurasaito"
            }
        ]
    },
    "sklearn/sklearn.decomposition._nmf/non_negative_factorization/regularization": {
        "target": "sklearn/sklearn.decomposition._nmf/non_negative_factorization/regularization",
        "enumName": "Regularization",
        "pairs": [
            {
                "stringValue": "transformation",
                "instanceName": "Transformation"
            },
            {
                "stringValue": "both",
                "instanceName": "Both"
            },
            {
                "stringValue": "components",
                "instanceName": "Components"
            }
        ]
    },
    "sklearn/sklearn.decomposition._pca/PCA/__init__/svd_solver": {
        "target": "sklearn/sklearn.decomposition._pca/PCA/__init__/svd_solver",
        "enumName": "SvdSolver",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "full",
                "instanceName": "Full"
            },
            {
                "stringValue": "randomized",
                "instanceName": "Randomized"
            },
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            }
        ]
    },
    "sklearn/sklearn.decomposition._sparse_pca/MiniBatchSparsePCA/__init__/method": {
        "target": "sklearn/sklearn.decomposition._sparse_pca/MiniBatchSparsePCA/__init__/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            }
        ]
    },
    "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/__init__/method": {
        "target": "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/__init__/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "lars",
                "instanceName": "Lars"
            },
            {
                "stringValue": "cd",
                "instanceName": "Cd"
            }
        ]
    },
    "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/__init__/algorithm": {
        "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "randomized",
                "instanceName": "Randomized"
            },
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            }
        ]
    },
    "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/fit/X": {
        "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/fit_transform/X": {
        "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/fit_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/transform/X": {
        "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/__init__/solver": {
        "target": "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/__init__/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "eigen",
                "instanceName": "Eigen"
            },
            {
                "stringValue": "lsqr",
                "instanceName": "Lsqr"
            },
            {
                "stringValue": "svd",
                "instanceName": "Svd"
            }
        ]
    },
    "sklearn/sklearn.dummy/DummyClassifier/__init__/strategy": {
        "target": "sklearn/sklearn.dummy/DummyClassifier/__init__/strategy",
        "enumName": "Strategy",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "constant",
                "instanceName": "Constant"
            },
            {
                "stringValue": "stratified",
                "instanceName": "Stratified"
            },
            {
                "stringValue": "most_frequent",
                "instanceName": "MostFrequent"
            },
            {
                "stringValue": "prior",
                "instanceName": "Prior"
            }
        ]
    },
    "sklearn/sklearn.dummy/DummyClassifier/predict_log_proba/X": {
        "target": "sklearn/sklearn.dummy/DummyClassifier/predict_log_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.dummy/DummyRegressor/__init__/strategy": {
        "target": "sklearn/sklearn.dummy/DummyRegressor/__init__/strategy",
        "enumName": "Strategy",
        "pairs": [
            {
                "stringValue": "quantile",
                "instanceName": "Quantile"
            },
            {
                "stringValue": "mean",
                "instanceName": "Mean"
            },
            {
                "stringValue": "constant",
                "instanceName": "Constant"
            },
            {
                "stringValue": "median",
                "instanceName": "Median"
            }
        ]
    },
    "sklearn/sklearn.ensemble._bagging/BaggingClassifier/decision_function/X": {
        "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict/X": {
        "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict_log_proba/X": {
        "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict_log_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict_proba/X": {
        "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._bagging/BaggingRegressor/predict/X": {
        "target": "sklearn/sklearn.ensemble._bagging/BaggingRegressor/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._bagging/BaseBagging/_fit/X": {
        "target": "sklearn/sklearn.ensemble._bagging/BaseBagging/_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._bagging/BaseBagging/fit/X": {
        "target": "sklearn/sklearn.ensemble._bagging/BaseBagging/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._forest/BaseForest/apply/X": {
        "target": "sklearn/sklearn.ensemble._forest/BaseForest/apply/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._forest/BaseForest/decision_path/X": {
        "target": "sklearn/sklearn.ensemble._forest/BaseForest/decision_path/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._forest/BaseForest/fit/X": {
        "target": "sklearn/sklearn.ensemble._forest/BaseForest/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/criterion": {
        "target": "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "gini",
                "instanceName": "Gini"
            },
            {
                "stringValue": "entropy",
                "instanceName": "Entropy"
            }
        ]
    },
    "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/max_features": {
        "target": "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/max_features",
        "enumName": "MaxFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "sqrt",
                "instanceName": "Sqrt"
            },
            {
                "stringValue": "log2",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/class_weight": {
        "target": "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": [
            {
                "stringValue": "balanced",
                "instanceName": "Balanced"
            },
            {
                "stringValue": "balanced_subsample",
                "instanceName": "BalancedSubsample"
            }
        ]
    },
    "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__/criterion": {
        "target": "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "absolute_error",
                "instanceName": "AbsoluteError"
            },
            {
                "stringValue": "squared_error",
                "instanceName": "SquaredError"
            }
        ]
    },
    "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__/max_features": {
        "target": "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__/max_features",
        "enumName": "MaxFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "sqrt",
                "instanceName": "Sqrt"
            },
            {
                "stringValue": "log2",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.ensemble._forest/ForestClassifier/predict/X": {
        "target": "sklearn/sklearn.ensemble._forest/ForestClassifier/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._forest/ForestClassifier/predict_log_proba/X": {
        "target": "sklearn/sklearn.ensemble._forest/ForestClassifier/predict_log_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._forest/ForestClassifier/predict_proba/X": {
        "target": "sklearn/sklearn.ensemble._forest/ForestClassifier/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._forest/ForestRegressor/predict/X": {
        "target": "sklearn/sklearn.ensemble._forest/ForestRegressor/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/criterion": {
        "target": "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "gini",
                "instanceName": "Gini"
            },
            {
                "stringValue": "entropy",
                "instanceName": "Entropy"
            }
        ]
    },
    "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/max_features": {
        "target": "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/max_features",
        "enumName": "MaxFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "sqrt",
                "instanceName": "Sqrt"
            },
            {
                "stringValue": "log2",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/class_weight": {
        "target": "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": [
            {
                "stringValue": "balanced",
                "instanceName": "Balanced"
            },
            {
                "stringValue": "balanced_subsample",
                "instanceName": "BalancedSubsample"
            }
        ]
    },
    "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__/criterion": {
        "target": "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "absolute_error",
                "instanceName": "AbsoluteError"
            },
            {
                "stringValue": "poisson",
                "instanceName": "Poisson"
            },
            {
                "stringValue": "squared_error",
                "instanceName": "SquaredError"
            }
        ]
    },
    "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__/max_features": {
        "target": "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__/max_features",
        "enumName": "MaxFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "sqrt",
                "instanceName": "Sqrt"
            },
            {
                "stringValue": "log2",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/fit/X": {
        "target": "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/fit_transform/X": {
        "target": "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/fit_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/transform/X": {
        "target": "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_staged_raw_predict/X": {
        "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_staged_raw_predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/apply/X": {
        "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/apply/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/fit/X": {
        "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/loss": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/loss",
        "enumName": "Loss",
        "pairs": [
            {
                "stringValue": "deviance",
                "instanceName": "Deviance"
            },
            {
                "stringValue": "exponential",
                "instanceName": "Exponential"
            }
        ]
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/criterion": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "mse",
                "instanceName": "Mse"
            },
            {
                "stringValue": "friedman_mse",
                "instanceName": "FriedmanMse"
            },
            {
                "stringValue": "squared_error",
                "instanceName": "SquaredError"
            },
            {
                "stringValue": "mae",
                "instanceName": "Mae"
            }
        ]
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/max_features": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/max_features",
        "enumName": "MaxFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "sqrt",
                "instanceName": "Sqrt"
            },
            {
                "stringValue": "log2",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/decision_function/X": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict/X": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict_log_proba/X": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict_log_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict_proba/X": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_decision_function/X": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_predict/X": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_predict_proba/X": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/loss": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/loss",
        "enumName": "Loss",
        "pairs": [
            {
                "stringValue": "huber",
                "instanceName": "Huber"
            },
            {
                "stringValue": "absolute_error",
                "instanceName": "AbsoluteError"
            },
            {
                "stringValue": "quantile",
                "instanceName": "Quantile"
            },
            {
                "stringValue": "squared_error",
                "instanceName": "SquaredError"
            }
        ]
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/criterion": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "mse",
                "instanceName": "Mse"
            },
            {
                "stringValue": "friedman_mse",
                "instanceName": "FriedmanMse"
            },
            {
                "stringValue": "squared_error",
                "instanceName": "SquaredError"
            },
            {
                "stringValue": "mae",
                "instanceName": "Mae"
            }
        ]
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/max_features": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/max_features",
        "enumName": "MaxFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "sqrt",
                "instanceName": "Sqrt"
            },
            {
                "stringValue": "log2",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/apply/X": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/apply/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/predict/X": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/staged_predict/X": {
        "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/staged_predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper/__init__/known_categories": {
        "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper/__init__/known_categories",
        "enumName": "KnownCategories",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/__init__/loss": {
        "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/__init__/loss",
        "enumName": "Loss",
        "pairs": [
            {
                "stringValue": "binary_crossentropy",
                "instanceName": "BinaryCrossentropy"
            },
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "categorical_crossentropy",
                "instanceName": "CategoricalCrossentropy"
            }
        ]
    },
    "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/__init__/categorical_features": {
        "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/__init__/categorical_features",
        "enumName": "CategoricalFeatures",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/__init__/loss": {
        "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/__init__/loss",
        "enumName": "Loss",
        "pairs": [
            {
                "stringValue": "absolute_error",
                "instanceName": "AbsoluteError"
            },
            {
                "stringValue": "poisson",
                "instanceName": "Poisson"
            },
            {
                "stringValue": "squared_error",
                "instanceName": "SquaredError"
            }
        ]
    },
    "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/__init__/categorical_features": {
        "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/__init__/categorical_features",
        "enumName": "CategoricalFeatures",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._iforest/IsolationForest/decision_function/X": {
        "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._iforest/IsolationForest/fit/X": {
        "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._iforest/IsolationForest/predict/X": {
        "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._iforest/IsolationForest/score_samples/X": {
        "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/score_samples/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._stacking/StackingClassifier/__init__/stack_method": {
        "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/__init__/stack_method",
        "enumName": "StackMethod",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "predict_proba",
                "instanceName": "PredictProba"
            },
            {
                "stringValue": "predict",
                "instanceName": "Predict"
            },
            {
                "stringValue": "decision_function",
                "instanceName": "DecisionFunction"
            }
        ]
    },
    "sklearn/sklearn.ensemble._stacking/StackingClassifier/decision_function/X": {
        "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._stacking/StackingClassifier/fit/X": {
        "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._stacking/StackingClassifier/predict/X": {
        "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._stacking/StackingClassifier/predict_proba/X": {
        "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._stacking/StackingClassifier/transform/X": {
        "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._stacking/StackingRegressor/fit/X": {
        "target": "sklearn/sklearn.ensemble._stacking/StackingRegressor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._stacking/StackingRegressor/transform/X": {
        "target": "sklearn/sklearn.ensemble._stacking/StackingRegressor/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._stacking/_BaseStacking/fit/X": {
        "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._stacking/_BaseStacking/predict/X": {
        "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._voting/VotingClassifier/__init__/voting": {
        "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/__init__/voting",
        "enumName": "Voting",
        "pairs": [
            {
                "stringValue": "soft",
                "instanceName": "Soft"
            },
            {
                "stringValue": "hard",
                "instanceName": "Hard"
            }
        ]
    },
    "sklearn/sklearn.ensemble._voting/VotingClassifier/fit/X": {
        "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._voting/VotingClassifier/predict/X": {
        "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._voting/VotingClassifier/predict_proba/X": {
        "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._voting/VotingClassifier/transform/X": {
        "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._voting/VotingRegressor/fit/X": {
        "target": "sklearn/sklearn.ensemble._voting/VotingRegressor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._voting/VotingRegressor/predict/X": {
        "target": "sklearn/sklearn.ensemble._voting/VotingRegressor/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._voting/VotingRegressor/transform/X": {
        "target": "sklearn/sklearn.ensemble._voting/VotingRegressor/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._voting/_BaseVoting/fit_transform/X": {
        "target": "sklearn/sklearn.ensemble._voting/_BaseVoting/fit_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/__init__/algorithm": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "SAMME",
                "instanceName": "Samme"
            },
            {
                "stringValue": "SAMME.R",
                "instanceName": "Sammer"
            }
        ]
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_boost/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_boost/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/decision_function/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/fit/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict_log_proba/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict_log_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict_proba/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/staged_decision_function/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/staged_decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/staged_predict_proba/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/staged_predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/__init__/loss": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/__init__/loss",
        "enumName": "Loss",
        "pairs": [
            {
                "stringValue": "linear",
                "instanceName": "Linear"
            },
            {
                "stringValue": "exponential",
                "instanceName": "Exponential"
            },
            {
                "stringValue": "square",
                "instanceName": "Square"
            }
        ]
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/_boost/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/_boost/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/fit/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/predict/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/staged_predict/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/staged_predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/_boost/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/_boost/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/fit/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/staged_score/X": {
        "target": "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/staged_score/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.externals._lobpcg/lobpcg/A": {
        "target": "sklearn/sklearn.externals._lobpcg/lobpcg/A",
        "enumName": "A",
        "pairs": []
    },
    "sklearn/sklearn.externals._lobpcg/lobpcg/B": {
        "target": "sklearn/sklearn.externals._lobpcg/lobpcg/B",
        "enumName": "B",
        "pairs": []
    },
    "sklearn/sklearn.externals._lobpcg/lobpcg/M": {
        "target": "sklearn/sklearn.externals._lobpcg/lobpcg/M",
        "enumName": "M",
        "pairs": []
    },
    "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/inverse_transform/X": {
        "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/inverse_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.feature_extraction._hash/FeatureHasher/__init__/input_type": {
        "target": "sklearn/sklearn.feature_extraction._hash/FeatureHasher/__init__/input_type",
        "enumName": "InputType",
        "pairs": [
            {
                "stringValue": "dict",
                "instanceName": "Dict"
            },
            {
                "stringValue": "pair",
                "instanceName": "Pair"
            },
            {
                "stringValue": "string",
                "instanceName": "String"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/input": {
        "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/input",
        "enumName": "Input",
        "pairs": [
            {
                "stringValue": "file",
                "instanceName": "File"
            },
            {
                "stringValue": "content",
                "instanceName": "Content"
            },
            {
                "stringValue": "filename",
                "instanceName": "Filename"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/decode_error": {
        "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/decode_error",
        "enumName": "DecodeError",
        "pairs": [
            {
                "stringValue": "replace",
                "instanceName": "Replace"
            },
            {
                "stringValue": "strict",
                "instanceName": "Strict"
            },
            {
                "stringValue": "ignore",
                "instanceName": "Ignore"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/strip_accents": {
        "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/strip_accents",
        "enumName": "StripAccents",
        "pairs": [
            {
                "stringValue": "unicode",
                "instanceName": "Unicode"
            },
            {
                "stringValue": "ascii",
                "instanceName": "Ascii"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/stop_words": {
        "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/stop_words",
        "enumName": "StopWords",
        "pairs": [
            {
                "stringValue": "english",
                "instanceName": "English"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/analyzer": {
        "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/analyzer",
        "enumName": "Analyzer",
        "pairs": [
            {
                "stringValue": "char_wb",
                "instanceName": "CharWb"
            },
            {
                "stringValue": "word",
                "instanceName": "Word"
            },
            {
                "stringValue": "char",
                "instanceName": "Char"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/CountVectorizer/inverse_transform/X": {
        "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/inverse_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/input": {
        "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/input",
        "enumName": "Input",
        "pairs": [
            {
                "stringValue": "file",
                "instanceName": "File"
            },
            {
                "stringValue": "content",
                "instanceName": "Content"
            },
            {
                "stringValue": "filename",
                "instanceName": "Filename"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/decode_error": {
        "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/decode_error",
        "enumName": "DecodeError",
        "pairs": [
            {
                "stringValue": "replace",
                "instanceName": "Replace"
            },
            {
                "stringValue": "strict",
                "instanceName": "Strict"
            },
            {
                "stringValue": "ignore",
                "instanceName": "Ignore"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/strip_accents": {
        "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/strip_accents",
        "enumName": "StripAccents",
        "pairs": [
            {
                "stringValue": "unicode",
                "instanceName": "Unicode"
            },
            {
                "stringValue": "ascii",
                "instanceName": "Ascii"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/stop_words": {
        "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/stop_words",
        "enumName": "StopWords",
        "pairs": [
            {
                "stringValue": "english",
                "instanceName": "English"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/analyzer": {
        "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/analyzer",
        "enumName": "Analyzer",
        "pairs": [
            {
                "stringValue": "char_wb",
                "instanceName": "CharWb"
            },
            {
                "stringValue": "word",
                "instanceName": "Word"
            },
            {
                "stringValue": "char",
                "instanceName": "Char"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/norm": {
        "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/norm",
        "enumName": "Norm",
        "pairs": [
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/TfidfTransformer/__init__/norm": {
        "target": "sklearn/sklearn.feature_extraction.text/TfidfTransformer/__init__/norm",
        "enumName": "Norm",
        "pairs": [
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/input": {
        "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/input",
        "enumName": "Input",
        "pairs": [
            {
                "stringValue": "file",
                "instanceName": "File"
            },
            {
                "stringValue": "content",
                "instanceName": "Content"
            },
            {
                "stringValue": "filename",
                "instanceName": "Filename"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/decode_error": {
        "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/decode_error",
        "enumName": "DecodeError",
        "pairs": [
            {
                "stringValue": "replace",
                "instanceName": "Replace"
            },
            {
                "stringValue": "strict",
                "instanceName": "Strict"
            },
            {
                "stringValue": "ignore",
                "instanceName": "Ignore"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/strip_accents": {
        "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/strip_accents",
        "enumName": "StripAccents",
        "pairs": [
            {
                "stringValue": "unicode",
                "instanceName": "Unicode"
            },
            {
                "stringValue": "ascii",
                "instanceName": "Ascii"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/analyzer": {
        "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/analyzer",
        "enumName": "Analyzer",
        "pairs": [
            {
                "stringValue": "char_wb",
                "instanceName": "CharWb"
            },
            {
                "stringValue": "word",
                "instanceName": "Word"
            },
            {
                "stringValue": "char",
                "instanceName": "Char"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/stop_words": {
        "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/stop_words",
        "enumName": "StopWords",
        "pairs": [
            {
                "stringValue": "english",
                "instanceName": "English"
            }
        ]
    },
    "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/norm": {
        "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/norm",
        "enumName": "Norm",
        "pairs": [
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.feature_selection._base/_get_feature_importances/transform_func": {
        "target": "sklearn/sklearn.feature_selection._base/_get_feature_importances/transform_func",
        "enumName": "TransformFunc",
        "pairs": [
            {
                "stringValue": "norm",
                "instanceName": "Norm"
            },
            {
                "stringValue": "square",
                "instanceName": "Square"
            }
        ]
    },
    "sklearn/sklearn.feature_selection._mutual_info/_estimate_mi/discrete_features": {
        "target": "sklearn/sklearn.feature_selection._mutual_info/_estimate_mi/discrete_features",
        "enumName": "DiscreteFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            }
        ]
    },
    "sklearn/sklearn.feature_selection._mutual_info/mutual_info_classif/discrete_features": {
        "target": "sklearn/sklearn.feature_selection._mutual_info/mutual_info_classif/discrete_features",
        "enumName": "DiscreteFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            }
        ]
    },
    "sklearn/sklearn.feature_selection._mutual_info/mutual_info_regression/discrete_features": {
        "target": "sklearn/sklearn.feature_selection._mutual_info/mutual_info_regression/discrete_features",
        "enumName": "DiscreteFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            }
        ]
    },
    "sklearn/sklearn.feature_selection._rfe/RFE/decision_function/X": {
        "target": "sklearn/sklearn.feature_selection._rfe/RFE/decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.feature_selection._rfe/RFE/fit/X": {
        "target": "sklearn/sklearn.feature_selection._rfe/RFE/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.feature_selection._rfe/RFE/predict_proba/X": {
        "target": "sklearn/sklearn.feature_selection._rfe/RFE/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.feature_selection._rfe/RFECV/fit/X": {
        "target": "sklearn/sklearn.feature_selection._rfe/RFECV/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/__init__/direction": {
        "target": "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/__init__/direction",
        "enumName": "Direction",
        "pairs": [
            {
                "stringValue": "forward",
                "instanceName": "Forward"
            },
            {
                "stringValue": "backward",
                "instanceName": "Backward"
            }
        ]
    },
    "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/__init__/mode": {
        "target": "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/__init__/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "fwe",
                "instanceName": "Fwe"
            },
            {
                "stringValue": "k_best",
                "instanceName": "KBest"
            },
            {
                "stringValue": "fpr",
                "instanceName": "Fpr"
            },
            {
                "stringValue": "fdr",
                "instanceName": "Fdr"
            },
            {
                "stringValue": "percentile",
                "instanceName": "Percentile"
            }
        ]
    },
    "sklearn/sklearn.feature_selection._univariate_selection/chi2/X": {
        "target": "sklearn/sklearn.feature_selection._univariate_selection/chi2/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.feature_selection._univariate_selection/f_classif/X": {
        "target": "sklearn/sklearn.feature_selection._univariate_selection/f_classif/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.feature_selection._univariate_selection/f_regression/X": {
        "target": "sklearn/sklearn.feature_selection._univariate_selection/f_regression/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.feature_selection._univariate_selection/r_regression/X": {
        "target": "sklearn/sklearn.feature_selection._univariate_selection/r_regression/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.feature_selection._variance_threshold/VarianceThreshold/fit/X": {
        "target": "sklearn/sklearn.feature_selection._variance_threshold/VarianceThreshold/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/__init__/multi_class": {
        "target": "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/__init__/multi_class",
        "enumName": "MultiClass",
        "pairs": [
            {
                "stringValue": "one_vs_one",
                "instanceName": "OneVsOne"
            },
            {
                "stringValue": "one_vs_rest",
                "instanceName": "OneVsRest"
            }
        ]
    },
    "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/__init__/optimizer": {
        "target": "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/__init__/optimizer",
        "enumName": "Optimizer",
        "pairs": [
            {
                "stringValue": "fmin_l_bfgs_b",
                "instanceName": "FminLBfgsB"
            }
        ]
    },
    "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/__init__/metric": {
        "target": "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/__init__/metric",
        "enumName": "Metric",
        "pairs": [
            {
                "stringValue": "polynomial",
                "instanceName": "Polynomial"
            },
            {
                "stringValue": "linear",
                "instanceName": "Linear"
            },
            {
                "stringValue": "laplacian",
                "instanceName": "Laplacian"
            },
            {
                "stringValue": "rbf",
                "instanceName": "Rbf"
            },
            {
                "stringValue": "additive_chi2",
                "instanceName": "AdditiveChi"
            },
            {
                "stringValue": "sigmoid",
                "instanceName": "Sigmoid"
            },
            {
                "stringValue": "chi2",
                "instanceName": "Chi"
            },
            {
                "stringValue": "poly",
                "instanceName": "Poly"
            },
            {
                "stringValue": "cosine",
                "instanceName": "Cosine"
            }
        ]
    },
    "sklearn/sklearn.impute._base/MissingIndicator/__init__/features": {
        "target": "sklearn/sklearn.impute._base/MissingIndicator/__init__/features",
        "enumName": "Features",
        "pairs": [
            {
                "stringValue": "missing-only",
                "instanceName": "Missingonly"
            },
            {
                "stringValue": "all",
                "instanceName": "All"
            }
        ]
    },
    "sklearn/sklearn.impute._base/MissingIndicator/_fit/X": {
        "target": "sklearn/sklearn.impute._base/MissingIndicator/_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.impute._base/MissingIndicator/_get_missing_features_info/X": {
        "target": "sklearn/sklearn.impute._base/MissingIndicator/_get_missing_features_info/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.impute._base/MissingIndicator/fit/X": {
        "target": "sklearn/sklearn.impute._base/MissingIndicator/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.impute._base/MissingIndicator/fit_transform/X": {
        "target": "sklearn/sklearn.impute._base/MissingIndicator/fit_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.impute._base/MissingIndicator/transform/X": {
        "target": "sklearn/sklearn.impute._base/MissingIndicator/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.impute._base/SimpleImputer/fit/X": {
        "target": "sklearn/sklearn.impute._base/SimpleImputer/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.impute._base/SimpleImputer/transform/X": {
        "target": "sklearn/sklearn.impute._base/SimpleImputer/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.impute._iterative/IterativeImputer/__init__/max_iter": {
        "target": "sklearn/sklearn.impute._iterative/IterativeImputer/__init__/max_iter",
        "enumName": "MaxIter",
        "pairs": []
    },
    "sklearn/sklearn.impute._iterative/IterativeImputer/__init__/initial_strategy": {
        "target": "sklearn/sklearn.impute._iterative/IterativeImputer/__init__/initial_strategy",
        "enumName": "InitialStrategy",
        "pairs": [
            {
                "stringValue": "most_frequent",
                "instanceName": "MostFrequent"
            },
            {
                "stringValue": "mean",
                "instanceName": "Mean"
            },
            {
                "stringValue": "constant",
                "instanceName": "Constant"
            },
            {
                "stringValue": "median",
                "instanceName": "Median"
            }
        ]
    },
    "sklearn/sklearn.impute._iterative/IterativeImputer/__init__/imputation_order": {
        "target": "sklearn/sklearn.impute._iterative/IterativeImputer/__init__/imputation_order",
        "enumName": "ImputationOrder",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "roman",
                "instanceName": "Roman"
            },
            {
                "stringValue": "ascending",
                "instanceName": "Ascending"
            },
            {
                "stringValue": "descending",
                "instanceName": "Descending"
            },
            {
                "stringValue": "arabic",
                "instanceName": "Arabic"
            }
        ]
    },
    "sklearn/sklearn.impute._knn/KNNImputer/__init__/weights": {
        "target": "sklearn/sklearn.impute._knn/KNNImputer/__init__/weights",
        "enumName": "Weights",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.impute._knn/KNNImputer/__init__/metric": {
        "target": "sklearn/sklearn.impute._knn/KNNImputer/__init__/metric",
        "enumName": "Metric",
        "pairs": [
            {
                "stringValue": "nan_euclidean",
                "instanceName": "NanEuclidean"
            }
        ]
    },
    "sklearn/sklearn.inspection._partial_dependence/partial_dependence/X": {
        "target": "sklearn/sklearn.inspection._partial_dependence/partial_dependence/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.inspection._partial_dependence/partial_dependence/features": {
        "target": "sklearn/sklearn.inspection._partial_dependence/partial_dependence/features",
        "enumName": "Features",
        "pairs": []
    },
    "sklearn/sklearn.inspection._partial_dependence/partial_dependence/response_method": {
        "target": "sklearn/sklearn.inspection._partial_dependence/partial_dependence/response_method",
        "enumName": "ResponseMethod",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "predict_proba",
                "instanceName": "PredictProba"
            },
            {
                "stringValue": "decision_function",
                "instanceName": "DecisionFunction"
            }
        ]
    },
    "sklearn/sklearn.inspection._partial_dependence/partial_dependence/method": {
        "target": "sklearn/sklearn.inspection._partial_dependence/partial_dependence/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "recursion",
                "instanceName": "Recursion"
            }
        ]
    },
    "sklearn/sklearn.inspection._partial_dependence/partial_dependence/kind": {
        "target": "sklearn/sklearn.inspection._partial_dependence/partial_dependence/kind",
        "enumName": "Kind",
        "pairs": [
            {
                "stringValue": "individual",
                "instanceName": "Individual"
            },
            {
                "stringValue": "average",
                "instanceName": "Average"
            },
            {
                "stringValue": "legacy",
                "instanceName": "Legacy"
            },
            {
                "stringValue": "both",
                "instanceName": "Both"
            }
        ]
    },
    "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/__init__/kind": {
        "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/__init__/kind",
        "enumName": "Kind",
        "pairs": [
            {
                "stringValue": "individual",
                "instanceName": "Individual"
            },
            {
                "stringValue": "average",
                "instanceName": "Average"
            },
            {
                "stringValue": "both",
                "instanceName": "Both"
            }
        ]
    },
    "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/X": {
        "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/features": {
        "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/features",
        "enumName": "Features",
        "pairs": []
    },
    "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/response_method": {
        "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/response_method",
        "enumName": "ResponseMethod",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "predict_proba",
                "instanceName": "PredictProba"
            },
            {
                "stringValue": "decision_function",
                "instanceName": "DecisionFunction"
            }
        ]
    },
    "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/kind": {
        "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/kind",
        "enumName": "Kind",
        "pairs": [
            {
                "stringValue": "individual",
                "instanceName": "Individual"
            },
            {
                "stringValue": "average",
                "instanceName": "Average"
            },
            {
                "stringValue": "both",
                "instanceName": "Both"
            }
        ]
    },
    "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/X": {
        "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/features": {
        "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/features",
        "enumName": "Features",
        "pairs": []
    },
    "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/response_method": {
        "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/response_method",
        "enumName": "ResponseMethod",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "predict_proba",
                "instanceName": "PredictProba"
            },
            {
                "stringValue": "decision_function",
                "instanceName": "DecisionFunction"
            }
        ]
    },
    "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/kind": {
        "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/kind",
        "enumName": "Kind",
        "pairs": [
            {
                "stringValue": "individual",
                "instanceName": "Individual"
            },
            {
                "stringValue": "average",
                "instanceName": "Average"
            },
            {
                "stringValue": "both",
                "instanceName": "Both"
            }
        ]
    },
    "sklearn/sklearn.isotonic/IsotonicRegression/__init__/out_of_bounds": {
        "target": "sklearn/sklearn.isotonic/IsotonicRegression/__init__/out_of_bounds",
        "enumName": "OutOfBounds",
        "pairs": [
            {
                "stringValue": "raise",
                "instanceName": "Raise"
            },
            {
                "stringValue": "nan",
                "instanceName": "Nan"
            },
            {
                "stringValue": "clip",
                "instanceName": "Clip"
            }
        ]
    },
    "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/__init__/sample_interval": {
        "target": "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/__init__/sample_interval",
        "enumName": "SampleInterval",
        "pairs": []
    },
    "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/transform/X": {
        "target": "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.kernel_approximation/PolynomialCountSketch/fit/X": {
        "target": "sklearn/sklearn.kernel_approximation/PolynomialCountSketch/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.kernel_approximation/PolynomialCountSketch/transform/X": {
        "target": "sklearn/sklearn.kernel_approximation/PolynomialCountSketch/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.kernel_approximation/RBFSampler/fit/X": {
        "target": "sklearn/sklearn.kernel_approximation/RBFSampler/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.kernel_approximation/RBFSampler/transform/X": {
        "target": "sklearn/sklearn.kernel_approximation/RBFSampler/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.kernel_ridge/KernelRidge/fit/X": {
        "target": "sklearn/sklearn.kernel_ridge/KernelRidge/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.kernel_ridge/KernelRidge/predict/X": {
        "target": "sklearn/sklearn.kernel_ridge/KernelRidge/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._base/LinearClassifierMixin/decision_function/X": {
        "target": "sklearn/sklearn.linear_model._base/LinearClassifierMixin/decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._base/LinearClassifierMixin/predict/X": {
        "target": "sklearn/sklearn.linear_model._base/LinearClassifierMixin/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._base/LinearRegression/fit/X": {
        "target": "sklearn/sklearn.linear_model._base/LinearRegression/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._bayes/ARDRegression/predict/X": {
        "target": "sklearn/sklearn.linear_model._bayes/ARDRegression/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._bayes/BayesianRidge/predict/X": {
        "target": "sklearn/sklearn.linear_model._bayes/BayesianRidge/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/__init__/selection": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/__init__/selection",
        "enumName": "Selection",
        "pairs": [
            {
                "stringValue": "cyclic",
                "instanceName": "Cyclic"
            },
            {
                "stringValue": "random",
                "instanceName": "Random"
            }
        ]
    },
    "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/fit/X": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/fit/y": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/fit/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/__init__/selection": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/__init__/selection",
        "enumName": "Selection",
        "pairs": [
            {
                "stringValue": "cyclic",
                "instanceName": "Cyclic"
            },
            {
                "stringValue": "random",
                "instanceName": "Random"
            }
        ]
    },
    "sklearn/sklearn.linear_model._coordinate_descent/Lasso/__init__/selection": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/Lasso/__init__/selection",
        "enumName": "Selection",
        "pairs": [
            {
                "stringValue": "cyclic",
                "instanceName": "Cyclic"
            },
            {
                "stringValue": "random",
                "instanceName": "Random"
            }
        ]
    },
    "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/__init__/selection": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/__init__/selection",
        "enumName": "Selection",
        "pairs": [
            {
                "stringValue": "cyclic",
                "instanceName": "Cyclic"
            },
            {
                "stringValue": "random",
                "instanceName": "Random"
            }
        ]
    },
    "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/fit/X": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNet/__init__/selection": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNet/__init__/selection",
        "enumName": "Selection",
        "pairs": [
            {
                "stringValue": "cyclic",
                "instanceName": "Cyclic"
            },
            {
                "stringValue": "random",
                "instanceName": "Random"
            }
        ]
    },
    "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/__init__/selection": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/__init__/selection",
        "enumName": "Selection",
        "pairs": [
            {
                "stringValue": "cyclic",
                "instanceName": "Cyclic"
            },
            {
                "stringValue": "random",
                "instanceName": "Random"
            }
        ]
    },
    "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLasso/__init__/selection": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLasso/__init__/selection",
        "enumName": "Selection",
        "pairs": [
            {
                "stringValue": "cyclic",
                "instanceName": "Cyclic"
            },
            {
                "stringValue": "random",
                "instanceName": "Random"
            }
        ]
    },
    "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/__init__/selection": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/__init__/selection",
        "enumName": "Selection",
        "pairs": [
            {
                "stringValue": "cyclic",
                "instanceName": "Cyclic"
            },
            {
                "stringValue": "random",
                "instanceName": "Random"
            }
        ]
    },
    "sklearn/sklearn.linear_model._coordinate_descent/_alpha_grid/X": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/_alpha_grid/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._coordinate_descent/_path_residuals/X": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/_path_residuals/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._coordinate_descent/_path_residuals/X_order": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/_path_residuals/X_order",
        "enumName": "XOrder",
        "pairs": [
            {
                "stringValue": "F",
                "instanceName": "F"
            },
            {
                "stringValue": "C",
                "instanceName": "C"
            }
        ]
    },
    "sklearn/sklearn.linear_model._coordinate_descent/_set_order/X": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/_set_order/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._coordinate_descent/_set_order/order": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/_set_order/order",
        "enumName": "Order",
        "pairs": [
            {
                "stringValue": "F",
                "instanceName": "F"
            },
            {
                "stringValue": "C",
                "instanceName": "C"
            }
        ]
    },
    "sklearn/sklearn.linear_model._coordinate_descent/enet_path/X": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/enet_path/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._coordinate_descent/enet_path/y": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/enet_path/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._coordinate_descent/lasso_path/X": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/lasso_path/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._coordinate_descent/lasso_path/y": {
        "target": "sklearn/sklearn.linear_model._coordinate_descent/lasso_path/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._glm.glm/GammaRegressor/__init__/tol": {
        "target": "sklearn/sklearn.linear_model._glm.glm/GammaRegressor/__init__/tol",
        "enumName": "Tol",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/__init__/family": {
        "target": "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/__init__/family",
        "enumName": "Family",
        "pairs": [
            {
                "stringValue": "normal",
                "instanceName": "Normal"
            },
            {
                "stringValue": "gamma",
                "instanceName": "Gamma"
            },
            {
                "stringValue": "poisson",
                "instanceName": "Poisson"
            },
            {
                "stringValue": "inverse-gaussian",
                "instanceName": "Inversegaussian"
            }
        ]
    },
    "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/__init__/link": {
        "target": "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/__init__/link",
        "enumName": "Link",
        "pairs": [
            {
                "stringValue": "identity",
                "instanceName": "Identity"
            },
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "log",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/__init__/tol": {
        "target": "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/__init__/tol",
        "enumName": "Tol",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/_linear_predictor/X": {
        "target": "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/_linear_predictor/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/fit/X": {
        "target": "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/predict/X": {
        "target": "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/score/X": {
        "target": "sklearn/sklearn.linear_model._glm.glm/GeneralizedLinearRegressor/score/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._glm.glm/PoissonRegressor/__init__/tol": {
        "target": "sklearn/sklearn.linear_model._glm.glm/PoissonRegressor/__init__/tol",
        "enumName": "Tol",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._glm.glm/TweedieRegressor/__init__/link": {
        "target": "sklearn/sklearn.linear_model._glm.glm/TweedieRegressor/__init__/link",
        "enumName": "Link",
        "pairs": [
            {
                "stringValue": "identity",
                "instanceName": "Identity"
            },
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "log",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.linear_model._glm.glm/TweedieRegressor/__init__/tol": {
        "target": "sklearn/sklearn.linear_model._glm.glm/TweedieRegressor/__init__/tol",
        "enumName": "Tol",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._huber/HuberRegressor/__init__/tol": {
        "target": "sklearn/sklearn.linear_model._huber/HuberRegressor/__init__/tol",
        "enumName": "Tol",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/__init__/criterion": {
        "target": "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "bic",
                "instanceName": "Bic"
            },
            {
                "stringValue": "aic",
                "instanceName": "Aic"
            }
        ]
    },
    "sklearn/sklearn.linear_model._least_angle/_lars_path_residues/method": {
        "target": "sklearn/sklearn.linear_model._least_angle/_lars_path_residues/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "lar",
                "instanceName": "Lar"
            },
            {
                "stringValue": "lasso",
                "instanceName": "Lasso"
            }
        ]
    },
    "sklearn/sklearn.linear_model._least_angle/_lars_path_solver/method": {
        "target": "sklearn/sklearn.linear_model._least_angle/_lars_path_solver/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "lar",
                "instanceName": "Lar"
            },
            {
                "stringValue": "lasso",
                "instanceName": "Lasso"
            }
        ]
    },
    "sklearn/sklearn.linear_model._least_angle/lars_path/method": {
        "target": "sklearn/sklearn.linear_model._least_angle/lars_path/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "lar",
                "instanceName": "Lar"
            },
            {
                "stringValue": "lasso",
                "instanceName": "Lasso"
            }
        ]
    },
    "sklearn/sklearn.linear_model._least_angle/lars_path_gram/method": {
        "target": "sklearn/sklearn.linear_model._least_angle/lars_path_gram/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "lar",
                "instanceName": "Lar"
            },
            {
                "stringValue": "lasso",
                "instanceName": "Lasso"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/penalty": {
        "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/penalty",
        "enumName": "Penalty",
        "pairs": [
            {
                "stringValue": "none",
                "instanceName": "None"
            },
            {
                "stringValue": "elasticnet",
                "instanceName": "Elasticnet"
            },
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/class_weight": {
        "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/solver": {
        "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "sag",
                "instanceName": "Sag"
            },
            {
                "stringValue": "saga",
                "instanceName": "Saga"
            },
            {
                "stringValue": "newton-cg",
                "instanceName": "Newtoncg"
            },
            {
                "stringValue": "lbfgs",
                "instanceName": "Lbfgs"
            },
            {
                "stringValue": "liblinear",
                "instanceName": "Liblinear"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/multi_class": {
        "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/multi_class",
        "enumName": "MultiClass",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "multinomial",
                "instanceName": "Multinomial"
            },
            {
                "stringValue": "ovr",
                "instanceName": "Ovr"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/LogisticRegression/fit/X": {
        "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/penalty": {
        "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/penalty",
        "enumName": "Penalty",
        "pairs": [
            {
                "stringValue": "elasticnet",
                "instanceName": "Elasticnet"
            },
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/solver": {
        "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "sag",
                "instanceName": "Sag"
            },
            {
                "stringValue": "saga",
                "instanceName": "Saga"
            },
            {
                "stringValue": "newton-cg",
                "instanceName": "Newtoncg"
            },
            {
                "stringValue": "lbfgs",
                "instanceName": "Lbfgs"
            },
            {
                "stringValue": "liblinear",
                "instanceName": "Liblinear"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/class_weight": {
        "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/multi_class": {
        "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/multi_class",
        "enumName": "MultiClass",
        "pairs": [
            {
                "stringValue": ", ",
                "instanceName": ""
            },
            {
                "stringValue": "auto, ",
                "instanceName": "Auto"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/fit/X": {
        "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_intercept_dot/X": {
        "target": "sklearn/sklearn.linear_model._logistic/_intercept_dot/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/X": {
        "target": "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/class_weight": {
        "target": "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/solver": {
        "target": "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "sag",
                "instanceName": "Sag"
            },
            {
                "stringValue": "saga",
                "instanceName": "Saga"
            },
            {
                "stringValue": "newton-cg",
                "instanceName": "Newtoncg"
            },
            {
                "stringValue": "lbfgs",
                "instanceName": "Lbfgs"
            },
            {
                "stringValue": "liblinear",
                "instanceName": "Liblinear"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/penalty": {
        "target": "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/penalty",
        "enumName": "Penalty",
        "pairs": [
            {
                "stringValue": "elasticnet",
                "instanceName": "Elasticnet"
            },
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/multi_class": {
        "target": "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/multi_class",
        "enumName": "MultiClass",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "multinomial",
                "instanceName": "Multinomial"
            },
            {
                "stringValue": "ovr",
                "instanceName": "Ovr"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/_logistic_grad_hess/X": {
        "target": "sklearn/sklearn.linear_model._logistic/_logistic_grad_hess/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_logistic_loss/X": {
        "target": "sklearn/sklearn.linear_model._logistic/_logistic_loss/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_logistic_loss_and_grad/X": {
        "target": "sklearn/sklearn.linear_model._logistic/_logistic_loss_and_grad/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/X": {
        "target": "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/tol": {
        "target": "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/tol",
        "enumName": "Tol",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/solver": {
        "target": "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "sag",
                "instanceName": "Sag"
            },
            {
                "stringValue": "saga",
                "instanceName": "Saga"
            },
            {
                "stringValue": "newton-cg",
                "instanceName": "Newtoncg"
            },
            {
                "stringValue": "lbfgs",
                "instanceName": "Lbfgs"
            },
            {
                "stringValue": "liblinear",
                "instanceName": "Liblinear"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/class_weight": {
        "target": "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/penalty": {
        "target": "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/penalty",
        "enumName": "Penalty",
        "pairs": [
            {
                "stringValue": "elasticnet",
                "instanceName": "Elasticnet"
            },
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/multi_class": {
        "target": "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/multi_class",
        "enumName": "MultiClass",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "multinomial",
                "instanceName": "Multinomial"
            },
            {
                "stringValue": "ovr",
                "instanceName": "Ovr"
            }
        ]
    },
    "sklearn/sklearn.linear_model._logistic/_multinomial_grad_hess/X": {
        "target": "sklearn/sklearn.linear_model._logistic/_multinomial_grad_hess/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_multinomial_loss/X": {
        "target": "sklearn/sklearn.linear_model._logistic/_multinomial_loss/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._logistic/_multinomial_loss_grad/X": {
        "target": "sklearn/sklearn.linear_model._logistic/_multinomial_loss_grad/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/__init__/class_weight": {
        "target": "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/fit/X": {
        "target": "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/partial_fit/X": {
        "target": "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveRegressor/fit/X": {
        "target": "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveRegressor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveRegressor/partial_fit/X": {
        "target": "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveRegressor/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._perceptron/Perceptron/__init__/penalty": {
        "target": "sklearn/sklearn.linear_model._perceptron/Perceptron/__init__/penalty",
        "enumName": "Penalty",
        "pairs": [
            {
                "stringValue": "elasticnet",
                "instanceName": "Elasticnet"
            },
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.linear_model._perceptron/Perceptron/__init__/class_weight": {
        "target": "sklearn/sklearn.linear_model._perceptron/Perceptron/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._quantile/QuantileRegressor/__init__/solver": {
        "target": "sklearn/sklearn.linear_model._quantile/QuantileRegressor/__init__/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "highs-ds",
                "instanceName": "Highsds"
            },
            {
                "stringValue": "revised simplex",
                "instanceName": "Revisedsimplex"
            },
            {
                "stringValue": "highs-ipm",
                "instanceName": "Highsipm"
            },
            {
                "stringValue": "highs",
                "instanceName": "Highs"
            },
            {
                "stringValue": "interior-point",
                "instanceName": "Interiorpoint"
            }
        ]
    },
    "sklearn/sklearn.linear_model._quantile/QuantileRegressor/__init__/solver_options": {
        "target": "sklearn/sklearn.linear_model._quantile/QuantileRegressor/__init__/solver_options",
        "enumName": "SolverOptions",
        "pairs": [
            {
                "stringValue": "lstsq",
                "instanceName": "Lstsq"
            }
        ]
    },
    "sklearn/sklearn.linear_model._ransac/RANSACRegressor/fit/X": {
        "target": "sklearn/sklearn.linear_model._ransac/RANSACRegressor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ransac/RANSACRegressor/predict/X": {
        "target": "sklearn/sklearn.linear_model._ransac/RANSACRegressor/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ridge/Ridge/__init__/alpha": {
        "target": "sklearn/sklearn.linear_model._ridge/Ridge/__init__/alpha",
        "enumName": "Alpha",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ridge/Ridge/__init__/solver": {
        "target": "sklearn/sklearn.linear_model._ridge/Ridge/__init__/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "sag",
                "instanceName": "Sag"
            },
            {
                "stringValue": "saga",
                "instanceName": "Saga"
            },
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "cholesky",
                "instanceName": "Cholesky"
            },
            {
                "stringValue": "lsqr",
                "instanceName": "Lsqr"
            },
            {
                "stringValue": "lbfgs",
                "instanceName": "Lbfgs"
            },
            {
                "stringValue": "sparse_cg",
                "instanceName": "SparseCg"
            },
            {
                "stringValue": "svd",
                "instanceName": "Svd"
            }
        ]
    },
    "sklearn/sklearn.linear_model._ridge/Ridge/fit/X": {
        "target": "sklearn/sklearn.linear_model._ridge/Ridge/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ridge/RidgeClassifier/__init__/class_weight": {
        "target": "sklearn/sklearn.linear_model._ridge/RidgeClassifier/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ridge/RidgeClassifier/__init__/solver": {
        "target": "sklearn/sklearn.linear_model._ridge/RidgeClassifier/__init__/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "sag",
                "instanceName": "Sag"
            },
            {
                "stringValue": "saga",
                "instanceName": "Saga"
            },
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "cholesky",
                "instanceName": "Cholesky"
            },
            {
                "stringValue": "lsqr",
                "instanceName": "Lsqr"
            },
            {
                "stringValue": "lbfgs",
                "instanceName": "Lbfgs"
            },
            {
                "stringValue": "sparse_cg",
                "instanceName": "SparseCg"
            },
            {
                "stringValue": "svd",
                "instanceName": "Svd"
            }
        ]
    },
    "sklearn/sklearn.linear_model._ridge/RidgeClassifier/fit/X": {
        "target": "sklearn/sklearn.linear_model._ridge/RidgeClassifier/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ridge/RidgeClassifierCV/__init__/class_weight": {
        "target": "sklearn/sklearn.linear_model._ridge/RidgeClassifierCV/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/_prepare_data/X": {
        "target": "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/_prepare_data/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/predict/X": {
        "target": "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_compute_gram/X": {
        "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_compute_gram/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ridge/_RidgeGCV/fit/X": {
        "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ridge/ridge_regression/X": {
        "target": "sklearn/sklearn.linear_model._ridge/ridge_regression/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._ridge/ridge_regression/solver": {
        "target": "sklearn/sklearn.linear_model._ridge/ridge_regression/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "sag",
                "instanceName": "Sag"
            },
            {
                "stringValue": "saga",
                "instanceName": "Saga"
            },
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "cholesky",
                "instanceName": "Cholesky"
            },
            {
                "stringValue": "lsqr",
                "instanceName": "Lsqr"
            },
            {
                "stringValue": "lbfgs",
                "instanceName": "Lbfgs"
            },
            {
                "stringValue": "sparse_cg",
                "instanceName": "SparseCg"
            },
            {
                "stringValue": "svd",
                "instanceName": "Svd"
            }
        ]
    },
    "sklearn/sklearn.linear_model._sag/get_auto_step_size/loss": {
        "target": "sklearn/sklearn.linear_model._sag/get_auto_step_size/loss",
        "enumName": "Loss",
        "pairs": [
            {
                "stringValue": "squared",
                "instanceName": "Squared"
            },
            {
                "stringValue": "multinomial",
                "instanceName": "Multinomial"
            },
            {
                "stringValue": "log",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.linear_model._sag/sag_solver/X": {
        "target": "sklearn/sklearn.linear_model._sag/sag_solver/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._sag/sag_solver/loss": {
        "target": "sklearn/sklearn.linear_model._sag/sag_solver/loss",
        "enumName": "Loss",
        "pairs": [
            {
                "stringValue": "squared",
                "instanceName": "Squared"
            },
            {
                "stringValue": "multinomial",
                "instanceName": "Multinomial"
            },
            {
                "stringValue": "log",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/fit/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/partial_fit/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/_decision_function/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/_decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/fit/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/partial_fit/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/predict/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/penalty": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/penalty",
        "enumName": "Penalty",
        "pairs": [
            {
                "stringValue": "elasticnet",
                "instanceName": "Elasticnet"
            },
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/class_weight": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/predict_log_proba/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/predict_log_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/predict_proba/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/__init__/learning_rate": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/__init__/learning_rate",
        "enumName": "LearningRate",
        "pairs": [
            {
                "stringValue": "invscaling",
                "instanceName": "Invscaling"
            },
            {
                "stringValue": "adaptive",
                "instanceName": "Adaptive"
            },
            {
                "stringValue": "optimal",
                "instanceName": "Optimal"
            },
            {
                "stringValue": "constant",
                "instanceName": "Constant"
            }
        ]
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/decision_function/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/fit/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/partial_fit/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/predict/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/score_samples/X": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/score_samples/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.linear_model._stochastic_gradient/SGDRegressor/__init__/penalty": {
        "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDRegressor/__init__/penalty",
        "enumName": "Penalty",
        "pairs": [
            {
                "stringValue": "elasticnet",
                "instanceName": "Elasticnet"
            },
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.manifold._isomap/Isomap/__init__/eigen_solver": {
        "target": "sklearn/sklearn.manifold._isomap/Isomap/__init__/eigen_solver",
        "enumName": "EigenSolver",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            },
            {
                "stringValue": "dense",
                "instanceName": "Dense"
            }
        ]
    },
    "sklearn/sklearn.manifold._isomap/Isomap/__init__/path_method": {
        "target": "sklearn/sklearn.manifold._isomap/Isomap/__init__/path_method",
        "enumName": "PathMethod",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "D",
                "instanceName": "D"
            },
            {
                "stringValue": "FW",
                "instanceName": "Fw"
            }
        ]
    },
    "sklearn/sklearn.manifold._isomap/Isomap/__init__/neighbors_algorithm": {
        "target": "sklearn/sklearn.manifold._isomap/Isomap/__init__/neighbors_algorithm",
        "enumName": "NeighborsAlgorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.manifold._isomap/Isomap/fit/X": {
        "target": "sklearn/sklearn.manifold._isomap/Isomap/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.manifold._isomap/Isomap/fit_transform/X": {
        "target": "sklearn/sklearn.manifold._isomap/Isomap/fit_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/eigen_solver": {
        "target": "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/eigen_solver",
        "enumName": "EigenSolver",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            },
            {
                "stringValue": "dense",
                "instanceName": "Dense"
            }
        ]
    },
    "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/method": {
        "target": "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "ltsa",
                "instanceName": "Ltsa"
            },
            {
                "stringValue": "modified",
                "instanceName": "Modified"
            },
            {
                "stringValue": "hessian",
                "instanceName": "Hessian"
            },
            {
                "stringValue": "standard",
                "instanceName": "Standard"
            }
        ]
    },
    "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/neighbors_algorithm": {
        "target": "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/neighbors_algorithm",
        "enumName": "NeighborsAlgorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.manifold._locally_linear/barycenter_kneighbors_graph/X": {
        "target": "sklearn/sklearn.manifold._locally_linear/barycenter_kneighbors_graph/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding/X": {
        "target": "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding/eigen_solver": {
        "target": "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding/eigen_solver",
        "enumName": "EigenSolver",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            },
            {
                "stringValue": "dense",
                "instanceName": "Dense"
            }
        ]
    },
    "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding/method": {
        "target": "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "ltsa",
                "instanceName": "Ltsa"
            },
            {
                "stringValue": "modified",
                "instanceName": "Modified"
            },
            {
                "stringValue": "hessian",
                "instanceName": "Hessian"
            },
            {
                "stringValue": "standard",
                "instanceName": "Standard"
            }
        ]
    },
    "sklearn/sklearn.manifold._locally_linear/null_space/M": {
        "target": "sklearn/sklearn.manifold._locally_linear/null_space/M",
        "enumName": "M",
        "pairs": []
    },
    "sklearn/sklearn.manifold._locally_linear/null_space/eigen_solver": {
        "target": "sklearn/sklearn.manifold._locally_linear/null_space/eigen_solver",
        "enumName": "EigenSolver",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            },
            {
                "stringValue": "dense",
                "instanceName": "Dense"
            }
        ]
    },
    "sklearn/sklearn.manifold._mds/MDS/__init__/dissimilarity": {
        "target": "sklearn/sklearn.manifold._mds/MDS/__init__/dissimilarity",
        "enumName": "Dissimilarity",
        "pairs": [
            {
                "stringValue": "euclidean",
                "instanceName": "Euclidean"
            },
            {
                "stringValue": "precomputed",
                "instanceName": "Precomputed"
            }
        ]
    },
    "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/__init__/affinity": {
        "target": "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/__init__/affinity",
        "enumName": "Affinity",
        "pairs": [
            {
                "stringValue": "precomputed",
                "instanceName": "Precomputed"
            },
            {
                "stringValue": "nearest_neighbors",
                "instanceName": "NearestNeighbors"
            },
            {
                "stringValue": "rbf",
                "instanceName": "Rbf"
            },
            {
                "stringValue": "precomputed_nearest_neighbors",
                "instanceName": "PrecomputedNearestNeighbors"
            }
        ]
    },
    "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/__init__/eigen_solver": {
        "target": "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/__init__/eigen_solver",
        "enumName": "EigenSolver",
        "pairs": [
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            },
            {
                "stringValue": "amg",
                "instanceName": "Amg"
            },
            {
                "stringValue": "lobpcg",
                "instanceName": "Lobpcg"
            }
        ]
    },
    "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/fit/X": {
        "target": "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/fit_transform/X": {
        "target": "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/fit_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.manifold._spectral_embedding/_graph_is_connected/graph": {
        "target": "sklearn/sklearn.manifold._spectral_embedding/_graph_is_connected/graph",
        "enumName": "Graph",
        "pairs": []
    },
    "sklearn/sklearn.manifold._spectral_embedding/_set_diag/laplacian": {
        "target": "sklearn/sklearn.manifold._spectral_embedding/_set_diag/laplacian",
        "enumName": "Laplacian",
        "pairs": []
    },
    "sklearn/sklearn.manifold._spectral_embedding/spectral_embedding/adjacency": {
        "target": "sklearn/sklearn.manifold._spectral_embedding/spectral_embedding/adjacency",
        "enumName": "Adjacency",
        "pairs": []
    },
    "sklearn/sklearn.manifold._spectral_embedding/spectral_embedding/eigen_solver": {
        "target": "sklearn/sklearn.manifold._spectral_embedding/spectral_embedding/eigen_solver",
        "enumName": "EigenSolver",
        "pairs": [
            {
                "stringValue": "arpack",
                "instanceName": "Arpack"
            },
            {
                "stringValue": "amg",
                "instanceName": "Amg"
            },
            {
                "stringValue": "lobpcg",
                "instanceName": "Lobpcg"
            }
        ]
    },
    "sklearn/sklearn.manifold._t_sne/TSNE/__init__/init": {
        "target": "sklearn/sklearn.manifold._t_sne/TSNE/__init__/init",
        "enumName": "Init",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "pca",
                "instanceName": "Pca"
            }
        ]
    },
    "sklearn/sklearn.metrics._base/_average_binary_score/average": {
        "target": "sklearn/sklearn.metrics._base/_average_binary_score/average",
        "enumName": "Average",
        "pairs": [
            {
                "stringValue": "macro",
                "instanceName": "Macro"
            },
            {
                "stringValue": "weighted",
                "instanceName": "Weighted"
            },
            {
                "stringValue": "micro",
                "instanceName": "Micro"
            },
            {
                "stringValue": "samples",
                "instanceName": "Samples"
            }
        ]
    },
    "sklearn/sklearn.metrics._base/_average_multiclass_ovo_score/average": {
        "target": "sklearn/sklearn.metrics._base/_average_multiclass_ovo_score/average",
        "enumName": "Average",
        "pairs": [
            {
                "stringValue": "macro",
                "instanceName": "Macro"
            },
            {
                "stringValue": "weighted",
                "instanceName": "Weighted"
            }
        ]
    },
    "sklearn/sklearn.metrics._classification/brier_score_loss/pos_label": {
        "target": "sklearn/sklearn.metrics._classification/brier_score_loss/pos_label",
        "enumName": "PosLabel",
        "pairs": []
    },
    "sklearn/sklearn.metrics._classification/cohen_kappa_score/weights": {
        "target": "sklearn/sklearn.metrics._classification/cohen_kappa_score/weights",
        "enumName": "Weights",
        "pairs": [
            {
                "stringValue": "linear",
                "instanceName": "Linear"
            },
            {
                "stringValue": "quadratic",
                "instanceName": "Quadratic"
            }
        ]
    },
    "sklearn/sklearn.metrics._classification/confusion_matrix/normalize": {
        "target": "sklearn/sklearn.metrics._classification/confusion_matrix/normalize",
        "enumName": "Normalize",
        "pairs": [
            {
                "stringValue": "true",
                "instanceName": "True"
            },
            {
                "stringValue": "all",
                "instanceName": "All"
            },
            {
                "stringValue": "pred",
                "instanceName": "Pred"
            }
        ]
    },
    "sklearn/sklearn.metrics._classification/f1_score/average": {
        "target": "sklearn/sklearn.metrics._classification/f1_score/average",
        "enumName": "Average",
        "pairs": [
            {
                "stringValue": "binary",
                "instanceName": "Binary"
            },
            {
                "stringValue": "micro",
                "instanceName": "Micro"
            },
            {
                "stringValue": "samples",
                "instanceName": "Samples"
            },
            {
                "stringValue": "macro",
                "instanceName": "Macro"
            },
            {
                "stringValue": "weighted",
                "instanceName": "Weighted"
            }
        ]
    },
    "sklearn/sklearn.metrics._classification/fbeta_score/average": {
        "target": "sklearn/sklearn.metrics._classification/fbeta_score/average",
        "enumName": "Average",
        "pairs": [
            {
                "stringValue": "binary",
                "instanceName": "Binary"
            },
            {
                "stringValue": "micro",
                "instanceName": "Micro"
            },
            {
                "stringValue": "samples",
                "instanceName": "Samples"
            },
            {
                "stringValue": "macro",
                "instanceName": "Macro"
            },
            {
                "stringValue": "weighted",
                "instanceName": "Weighted"
            }
        ]
    },
    "sklearn/sklearn.metrics._classification/jaccard_score/average": {
        "target": "sklearn/sklearn.metrics._classification/jaccard_score/average",
        "enumName": "Average",
        "pairs": [
            {
                "stringValue": "binary",
                "instanceName": "Binary"
            },
            {
                "stringValue": "micro",
                "instanceName": "Micro"
            },
            {
                "stringValue": "samples",
                "instanceName": "Samples"
            },
            {
                "stringValue": "macro",
                "instanceName": "Macro"
            },
            {
                "stringValue": "weighted",
                "instanceName": "Weighted"
            }
        ]
    },
    "sklearn/sklearn.metrics._classification/jaccard_score/zero_division": {
        "target": "sklearn/sklearn.metrics._classification/jaccard_score/zero_division",
        "enumName": "ZeroDivision",
        "pairs": []
    },
    "sklearn/sklearn.metrics._classification/multilabel_confusion_matrix/y_true": {
        "target": "sklearn/sklearn.metrics._classification/multilabel_confusion_matrix/y_true",
        "enumName": "YTrue",
        "pairs": []
    },
    "sklearn/sklearn.metrics._classification/multilabel_confusion_matrix/y_pred": {
        "target": "sklearn/sklearn.metrics._classification/multilabel_confusion_matrix/y_pred",
        "enumName": "YPred",
        "pairs": []
    },
    "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/average": {
        "target": "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/average",
        "enumName": "Average",
        "pairs": [
            {
                "stringValue": "binary",
                "instanceName": "Binary"
            },
            {
                "stringValue": "micro",
                "instanceName": "Micro"
            },
            {
                "stringValue": "samples",
                "instanceName": "Samples"
            },
            {
                "stringValue": "macro",
                "instanceName": "Macro"
            },
            {
                "stringValue": "weighted",
                "instanceName": "Weighted"
            }
        ]
    },
    "sklearn/sklearn.metrics._classification/precision_score/average": {
        "target": "sklearn/sklearn.metrics._classification/precision_score/average",
        "enumName": "Average",
        "pairs": [
            {
                "stringValue": "binary",
                "instanceName": "Binary"
            },
            {
                "stringValue": "micro",
                "instanceName": "Micro"
            },
            {
                "stringValue": "samples",
                "instanceName": "Samples"
            },
            {
                "stringValue": "macro",
                "instanceName": "Macro"
            },
            {
                "stringValue": "weighted",
                "instanceName": "Weighted"
            }
        ]
    },
    "sklearn/sklearn.metrics._classification/recall_score/average": {
        "target": "sklearn/sklearn.metrics._classification/recall_score/average",
        "enumName": "Average",
        "pairs": [
            {
                "stringValue": "binary",
                "instanceName": "Binary"
            },
            {
                "stringValue": "micro",
                "instanceName": "Micro"
            },
            {
                "stringValue": "samples",
                "instanceName": "Samples"
            },
            {
                "stringValue": "macro",
                "instanceName": "Macro"
            },
            {
                "stringValue": "weighted",
                "instanceName": "Weighted"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.base/_get_response/X": {
        "target": "sklearn/sklearn.metrics._plot.base/_get_response/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator/X": {
        "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator/normalize": {
        "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator/normalize",
        "enumName": "Normalize",
        "pairs": [
            {
                "stringValue": "true",
                "instanceName": "True"
            },
            {
                "stringValue": "all",
                "instanceName": "All"
            },
            {
                "stringValue": "pred",
                "instanceName": "Pred"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator/xticks_rotation": {
        "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator/xticks_rotation",
        "enumName": "XticksRotation",
        "pairs": [
            {
                "stringValue": "horizontal",
                "instanceName": "Horizontal"
            },
            {
                "stringValue": "vertical",
                "instanceName": "Vertical"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_predictions/normalize": {
        "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_predictions/normalize",
        "enumName": "Normalize",
        "pairs": [
            {
                "stringValue": "true",
                "instanceName": "True"
            },
            {
                "stringValue": "all",
                "instanceName": "All"
            },
            {
                "stringValue": "pred",
                "instanceName": "Pred"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_predictions/xticks_rotation": {
        "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_predictions/xticks_rotation",
        "enumName": "XticksRotation",
        "pairs": [
            {
                "stringValue": "horizontal",
                "instanceName": "Horizontal"
            },
            {
                "stringValue": "vertical",
                "instanceName": "Vertical"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/plot/xticks_rotation": {
        "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/plot/xticks_rotation",
        "enumName": "XticksRotation",
        "pairs": [
            {
                "stringValue": "horizontal",
                "instanceName": "Horizontal"
            },
            {
                "stringValue": "vertical",
                "instanceName": "Vertical"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/X": {
        "target": "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/normalize": {
        "target": "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/normalize",
        "enumName": "Normalize",
        "pairs": [
            {
                "stringValue": "true",
                "instanceName": "True"
            },
            {
                "stringValue": "all",
                "instanceName": "All"
            },
            {
                "stringValue": "pred",
                "instanceName": "Pred"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/xticks_rotation": {
        "target": "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/xticks_rotation",
        "enumName": "XticksRotation",
        "pairs": [
            {
                "stringValue": "horizontal",
                "instanceName": "Horizontal"
            },
            {
                "stringValue": "vertical",
                "instanceName": "Vertical"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_estimator/X": {
        "target": "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_estimator/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_estimator/response_method": {
        "target": "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_estimator/response_method",
        "enumName": "ResponseMethod",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "predict_proba",
                "instanceName": "PredictProba"
            },
            {
                "stringValue": "decision_function",
                "instanceName": "DecisionFunction"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_estimator/pos_label": {
        "target": "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_estimator/pos_label",
        "enumName": "PosLabel",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_predictions/pos_label": {
        "target": "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_predictions/pos_label",
        "enumName": "PosLabel",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.det_curve/plot_det_curve/X": {
        "target": "sklearn/sklearn.metrics._plot.det_curve/plot_det_curve/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.det_curve/plot_det_curve/response_method": {
        "target": "sklearn/sklearn.metrics._plot.det_curve/plot_det_curve/response_method",
        "enumName": "ResponseMethod",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "predict_proba",
                "instanceName": "PredictProba"
            },
            {
                "stringValue": "decision_function",
                "instanceName": "DecisionFunction"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.det_curve/plot_det_curve/pos_label": {
        "target": "sklearn/sklearn.metrics._plot.det_curve/plot_det_curve/pos_label",
        "enumName": "PosLabel",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/from_estimator/X": {
        "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/from_estimator/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/from_estimator/response_method": {
        "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/from_estimator/response_method",
        "enumName": "ResponseMethod",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "predict_proba",
                "instanceName": "PredictProba"
            },
            {
                "stringValue": "decision_function",
                "instanceName": "DecisionFunction"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/X": {
        "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/response_method": {
        "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/response_method",
        "enumName": "ResponseMethod",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "predict_proba",
                "instanceName": "PredictProba"
            },
            {
                "stringValue": "decision_function",
                "instanceName": "DecisionFunction"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_estimator/X": {
        "target": "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_estimator/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_estimator/response_method": {
        "target": "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_estimator/response_method",
        "enumName": "ResponseMethod",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "predict_proba",
                "instanceName": "PredictProba"
            },
            {
                "stringValue": "decision_function",
                "instanceName": "DecisionFunction"
            }
        ]
    },
    "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_predictions/pos_label": {
        "target": "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_predictions/pos_label",
        "enumName": "PosLabel",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/X": {
        "target": "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/response_method": {
        "target": "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/response_method",
        "enumName": "ResponseMethod",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "predict_proba",
                "instanceName": "PredictProba"
            },
            {
                "stringValue": "decision_function",
                "instanceName": "DecisionFunction"
            }
        ]
    },
    "sklearn/sklearn.metrics._ranking/_multiclass_roc_auc_score/multi_class": {
        "target": "sklearn/sklearn.metrics._ranking/_multiclass_roc_auc_score/multi_class",
        "enumName": "MultiClass",
        "pairs": [
            {
                "stringValue": "ovo",
                "instanceName": "Ovo"
            },
            {
                "stringValue": "ovr",
                "instanceName": "Ovr"
            }
        ]
    },
    "sklearn/sklearn.metrics._ranking/_multiclass_roc_auc_score/average": {
        "target": "sklearn/sklearn.metrics._ranking/_multiclass_roc_auc_score/average",
        "enumName": "Average",
        "pairs": [
            {
                "stringValue": "macro",
                "instanceName": "Macro"
            },
            {
                "stringValue": "weighted",
                "instanceName": "Weighted"
            }
        ]
    },
    "sklearn/sklearn.metrics._ranking/average_precision_score/average": {
        "target": "sklearn/sklearn.metrics._ranking/average_precision_score/average",
        "enumName": "Average",
        "pairs": [
            {
                "stringValue": "macro",
                "instanceName": "Macro"
            },
            {
                "stringValue": "weighted",
                "instanceName": "Weighted"
            },
            {
                "stringValue": "micro",
                "instanceName": "Micro"
            },
            {
                "stringValue": "samples",
                "instanceName": "Samples"
            }
        ]
    },
    "sklearn/sklearn.metrics._ranking/det_curve/y_true": {
        "target": "sklearn/sklearn.metrics._ranking/det_curve/y_true",
        "enumName": "YTrue",
        "pairs": []
    },
    "sklearn/sklearn.metrics._ranking/det_curve/pos_label": {
        "target": "sklearn/sklearn.metrics._ranking/det_curve/pos_label",
        "enumName": "PosLabel",
        "pairs": []
    },
    "sklearn/sklearn.metrics._ranking/label_ranking_average_precision_score/y_true": {
        "target": "sklearn/sklearn.metrics._ranking/label_ranking_average_precision_score/y_true",
        "enumName": "YTrue",
        "pairs": []
    },
    "sklearn/sklearn.metrics._ranking/label_ranking_loss/y_true": {
        "target": "sklearn/sklearn.metrics._ranking/label_ranking_loss/y_true",
        "enumName": "YTrue",
        "pairs": []
    },
    "sklearn/sklearn.metrics._ranking/precision_recall_curve/y_true": {
        "target": "sklearn/sklearn.metrics._ranking/precision_recall_curve/y_true",
        "enumName": "YTrue",
        "pairs": []
    },
    "sklearn/sklearn.metrics._ranking/precision_recall_curve/pos_label": {
        "target": "sklearn/sklearn.metrics._ranking/precision_recall_curve/pos_label",
        "enumName": "PosLabel",
        "pairs": []
    },
    "sklearn/sklearn.metrics._ranking/roc_auc_score/average": {
        "target": "sklearn/sklearn.metrics._ranking/roc_auc_score/average",
        "enumName": "Average",
        "pairs": [
            {
                "stringValue": "macro",
                "instanceName": "Macro"
            },
            {
                "stringValue": "weighted",
                "instanceName": "Weighted"
            },
            {
                "stringValue": "micro",
                "instanceName": "Micro"
            },
            {
                "stringValue": "samples",
                "instanceName": "Samples"
            }
        ]
    },
    "sklearn/sklearn.metrics._ranking/roc_auc_score/multi_class": {
        "target": "sklearn/sklearn.metrics._ranking/roc_auc_score/multi_class",
        "enumName": "MultiClass",
        "pairs": [
            {
                "stringValue": "raise",
                "instanceName": "Raise"
            },
            {
                "stringValue": "ovo",
                "instanceName": "Ovo"
            },
            {
                "stringValue": "ovr",
                "instanceName": "Ovr"
            }
        ]
    },
    "sklearn/sklearn.metrics._ranking/roc_curve/y_true": {
        "target": "sklearn/sklearn.metrics._ranking/roc_curve/y_true",
        "enumName": "YTrue",
        "pairs": []
    },
    "sklearn/sklearn.metrics._ranking/roc_curve/pos_label": {
        "target": "sklearn/sklearn.metrics._ranking/roc_curve/pos_label",
        "enumName": "PosLabel",
        "pairs": []
    },
    "sklearn/sklearn.metrics._regression/explained_variance_score/multioutput": {
        "target": "sklearn/sklearn.metrics._regression/explained_variance_score/multioutput",
        "enumName": "Multioutput",
        "pairs": [
            {
                "stringValue": "variance_weighted",
                "instanceName": "VarianceWeighted"
            },
            {
                "stringValue": "raw_values",
                "instanceName": "RawValues"
            },
            {
                "stringValue": "uniform_average",
                "instanceName": "UniformAverage"
            }
        ]
    },
    "sklearn/sklearn.metrics._regression/mean_absolute_error/multioutput": {
        "target": "sklearn/sklearn.metrics._regression/mean_absolute_error/multioutput",
        "enumName": "Multioutput",
        "pairs": [
            {
                "stringValue": "raw_values",
                "instanceName": "RawValues"
            },
            {
                "stringValue": "uniform_average",
                "instanceName": "UniformAverage"
            }
        ]
    },
    "sklearn/sklearn.metrics._regression/mean_absolute_percentage_error/multioutput": {
        "target": "sklearn/sklearn.metrics._regression/mean_absolute_percentage_error/multioutput",
        "enumName": "Multioutput",
        "pairs": [
            {
                "stringValue": "raw_values",
                "instanceName": "RawValues"
            },
            {
                "stringValue": "uniform_average",
                "instanceName": "UniformAverage"
            }
        ]
    },
    "sklearn/sklearn.metrics._regression/mean_pinball_loss/multioutput": {
        "target": "sklearn/sklearn.metrics._regression/mean_pinball_loss/multioutput",
        "enumName": "Multioutput",
        "pairs": [
            {
                "stringValue": "raw_values",
                "instanceName": "RawValues"
            },
            {
                "stringValue": "uniform_average",
                "instanceName": "UniformAverage"
            }
        ]
    },
    "sklearn/sklearn.metrics._regression/mean_squared_error/multioutput": {
        "target": "sklearn/sklearn.metrics._regression/mean_squared_error/multioutput",
        "enumName": "Multioutput",
        "pairs": [
            {
                "stringValue": "raw_values",
                "instanceName": "RawValues"
            },
            {
                "stringValue": "uniform_average",
                "instanceName": "UniformAverage"
            }
        ]
    },
    "sklearn/sklearn.metrics._regression/mean_squared_log_error/multioutput": {
        "target": "sklearn/sklearn.metrics._regression/mean_squared_log_error/multioutput",
        "enumName": "Multioutput",
        "pairs": [
            {
                "stringValue": "raw_values",
                "instanceName": "RawValues"
            },
            {
                "stringValue": "uniform_average",
                "instanceName": "UniformAverage"
            }
        ]
    },
    "sklearn/sklearn.metrics._regression/median_absolute_error/multioutput": {
        "target": "sklearn/sklearn.metrics._regression/median_absolute_error/multioutput",
        "enumName": "Multioutput",
        "pairs": [
            {
                "stringValue": "raw_values",
                "instanceName": "RawValues"
            },
            {
                "stringValue": "uniform_average",
                "instanceName": "UniformAverage"
            }
        ]
    },
    "sklearn/sklearn.metrics._regression/r2_score/multioutput": {
        "target": "sklearn/sklearn.metrics._regression/r2_score/multioutput",
        "enumName": "Multioutput",
        "pairs": [
            {
                "stringValue": "variance_weighted",
                "instanceName": "VarianceWeighted"
            },
            {
                "stringValue": "raw_values",
                "instanceName": "RawValues"
            },
            {
                "stringValue": "uniform_average",
                "instanceName": "UniformAverage"
            }
        ]
    },
    "sklearn/sklearn.metrics._scorer/_BaseScorer/__call__/X": {
        "target": "sklearn/sklearn.metrics._scorer/_BaseScorer/__call__/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._scorer/_PredictScorer/_score/X": {
        "target": "sklearn/sklearn.metrics._scorer/_PredictScorer/_score/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._scorer/_ProbaScorer/_score/X": {
        "target": "sklearn/sklearn.metrics._scorer/_ProbaScorer/_score/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics._scorer/_ThresholdScorer/_score/X": {
        "target": "sklearn/sklearn.metrics._scorer/_ThresholdScorer/_score/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics.cluster._supervised/mutual_info_score/contingency": {
        "target": "sklearn/sklearn.metrics.cluster._supervised/mutual_info_score/contingency",
        "enumName": "Contingency",
        "pairs": []
    },
    "sklearn/sklearn.metrics.cluster._unsupervised/_silhouette_reduce/labels": {
        "target": "sklearn/sklearn.metrics.cluster._unsupervised/_silhouette_reduce/labels",
        "enumName": "Labels",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/check_paired_arrays/X": {
        "target": "sklearn/sklearn.metrics.pairwise/check_paired_arrays/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/check_paired_arrays/Y": {
        "target": "sklearn/sklearn.metrics.pairwise/check_paired_arrays/Y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/check_pairwise_arrays/X": {
        "target": "sklearn/sklearn.metrics.pairwise/check_pairwise_arrays/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/check_pairwise_arrays/Y": {
        "target": "sklearn/sklearn.metrics.pairwise/check_pairwise_arrays/Y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/cosine_distances/X": {
        "target": "sklearn/sklearn.metrics.pairwise/cosine_distances/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/cosine_distances/Y": {
        "target": "sklearn/sklearn.metrics.pairwise/cosine_distances/Y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/cosine_similarity/X": {
        "target": "sklearn/sklearn.metrics.pairwise/cosine_similarity/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/cosine_similarity/Y": {
        "target": "sklearn/sklearn.metrics.pairwise/cosine_similarity/Y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/euclidean_distances/X": {
        "target": "sklearn/sklearn.metrics.pairwise/euclidean_distances/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/euclidean_distances/Y": {
        "target": "sklearn/sklearn.metrics.pairwise/euclidean_distances/Y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin_min/X": {
        "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin_min/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin_min/Y": {
        "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin_min/Y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/__init__/covariance_type": {
        "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/__init__/covariance_type",
        "enumName": "CovarianceType",
        "pairs": [
            {
                "stringValue": "spherical",
                "instanceName": "Spherical"
            },
            {
                "stringValue": "full",
                "instanceName": "Full"
            },
            {
                "stringValue": "diag",
                "instanceName": "Diag"
            },
            {
                "stringValue": "tied",
                "instanceName": "Tied"
            }
        ]
    },
    "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/__init__/init_params": {
        "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/__init__/init_params",
        "enumName": "InitParams",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "kmeans",
                "instanceName": "Kmeans"
            }
        ]
    },
    "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/__init__/covariance_type": {
        "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/__init__/covariance_type",
        "enumName": "CovarianceType",
        "pairs": [
            {
                "stringValue": "spherical",
                "instanceName": "Spherical"
            },
            {
                "stringValue": "full",
                "instanceName": "Full"
            },
            {
                "stringValue": "diag",
                "instanceName": "Diag"
            },
            {
                "stringValue": "tied",
                "instanceName": "Tied"
            }
        ]
    },
    "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/__init__/init_params": {
        "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/__init__/init_params",
        "enumName": "InitParams",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "kmeans",
                "instanceName": "Kmeans"
            }
        ]
    },
    "sklearn/sklearn.mixture._gaussian_mixture/_compute_log_det_cholesky/covariance_type": {
        "target": "sklearn/sklearn.mixture._gaussian_mixture/_compute_log_det_cholesky/covariance_type",
        "enumName": "CovarianceType",
        "pairs": [
            {
                "stringValue": "spherical",
                "instanceName": "Spherical"
            },
            {
                "stringValue": "full",
                "instanceName": "Full"
            },
            {
                "stringValue": "diag",
                "instanceName": "Diag"
            },
            {
                "stringValue": "tied",
                "instanceName": "Tied"
            }
        ]
    },
    "sklearn/sklearn.mixture._gaussian_mixture/_compute_precision_cholesky/covariance_type": {
        "target": "sklearn/sklearn.mixture._gaussian_mixture/_compute_precision_cholesky/covariance_type",
        "enumName": "CovarianceType",
        "pairs": [
            {
                "stringValue": "spherical",
                "instanceName": "Spherical"
            },
            {
                "stringValue": "full",
                "instanceName": "Full"
            },
            {
                "stringValue": "diag",
                "instanceName": "Diag"
            },
            {
                "stringValue": "tied",
                "instanceName": "Tied"
            }
        ]
    },
    "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_parameters/covariance_type": {
        "target": "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_parameters/covariance_type",
        "enumName": "CovarianceType",
        "pairs": [
            {
                "stringValue": "spherical",
                "instanceName": "Spherical"
            },
            {
                "stringValue": "full",
                "instanceName": "Full"
            },
            {
                "stringValue": "diag",
                "instanceName": "Diag"
            },
            {
                "stringValue": "tied",
                "instanceName": "Tied"
            }
        ]
    },
    "sklearn/sklearn.mixture._gaussian_mixture/_estimate_log_gaussian_prob/covariance_type": {
        "target": "sklearn/sklearn.mixture._gaussian_mixture/_estimate_log_gaussian_prob/covariance_type",
        "enumName": "CovarianceType",
        "pairs": [
            {
                "stringValue": "spherical",
                "instanceName": "Spherical"
            },
            {
                "stringValue": "full",
                "instanceName": "Full"
            },
            {
                "stringValue": "diag",
                "instanceName": "Diag"
            },
            {
                "stringValue": "tied",
                "instanceName": "Tied"
            }
        ]
    },
    "sklearn/sklearn.model_selection._search_successive_halving/HalvingGridSearchCV/__init__/min_resources": {
        "target": "sklearn/sklearn.model_selection._search_successive_halving/HalvingGridSearchCV/__init__/min_resources",
        "enumName": "MinResources",
        "pairs": [
            {
                "stringValue": "exhaust",
                "instanceName": "Exhaust"
            },
            {
                "stringValue": "smallest",
                "instanceName": "Smallest"
            }
        ]
    },
    "sklearn/sklearn.model_selection._search_successive_halving/HalvingRandomSearchCV/__init__/min_resources": {
        "target": "sklearn/sklearn.model_selection._search_successive_halving/HalvingRandomSearchCV/__init__/min_resources",
        "enumName": "MinResources",
        "pairs": [
            {
                "stringValue": "exhaust",
                "instanceName": "Exhaust"
            },
            {
                "stringValue": "smallest",
                "instanceName": "Smallest"
            }
        ]
    },
    "sklearn/sklearn.model_selection._validation/_fit_and_score/split_progress": {
        "target": "sklearn/sklearn.model_selection._validation/_fit_and_score/split_progress",
        "enumName": "SplitProgress",
        "pairs": []
    },
    "sklearn/sklearn.model_selection._validation/_fit_and_score/candidate_progress": {
        "target": "sklearn/sklearn.model_selection._validation/_fit_and_score/candidate_progress",
        "enumName": "CandidateProgress",
        "pairs": []
    },
    "sklearn/sklearn.model_selection._validation/cross_val_predict/method": {
        "target": "sklearn/sklearn.model_selection._validation/cross_val_predict/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "predict_proba",
                "instanceName": "PredictProba"
            },
            {
                "stringValue": "predict",
                "instanceName": "Predict"
            },
            {
                "stringValue": "decision_function",
                "instanceName": "DecisionFunction"
            },
            {
                "stringValue": "predict_log_proba",
                "instanceName": "PredictLogProba"
            }
        ]
    },
    "sklearn/sklearn.multioutput/ClassifierChain/fit/X": {
        "target": "sklearn/sklearn.multioutput/ClassifierChain/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/ClassifierChain/predict_proba/X": {
        "target": "sklearn/sklearn.multioutput/ClassifierChain/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/MultiOutputClassifier/fit/X": {
        "target": "sklearn/sklearn.multioutput/MultiOutputClassifier/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/MultiOutputRegressor/partial_fit/X": {
        "target": "sklearn/sklearn.multioutput/MultiOutputRegressor/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/MultiOutputRegressor/partial_fit/y": {
        "target": "sklearn/sklearn.multioutput/MultiOutputRegressor/partial_fit/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/RegressorChain/fit/X": {
        "target": "sklearn/sklearn.multioutput/RegressorChain/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/_BaseChain/fit/X": {
        "target": "sklearn/sklearn.multioutput/_BaseChain/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/_BaseChain/predict/X": {
        "target": "sklearn/sklearn.multioutput/_BaseChain/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/_MultiOutputEstimator/fit/X": {
        "target": "sklearn/sklearn.multioutput/_MultiOutputEstimator/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/_MultiOutputEstimator/fit/y": {
        "target": "sklearn/sklearn.multioutput/_MultiOutputEstimator/fit/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/_MultiOutputEstimator/partial_fit/X": {
        "target": "sklearn/sklearn.multioutput/_MultiOutputEstimator/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/_MultiOutputEstimator/partial_fit/y": {
        "target": "sklearn/sklearn.multioutput/_MultiOutputEstimator/partial_fit/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.multioutput/_MultiOutputEstimator/predict/X": {
        "target": "sklearn/sklearn.multioutput/_MultiOutputEstimator/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.naive_bayes/CategoricalNB/fit/X": {
        "target": "sklearn/sklearn.naive_bayes/CategoricalNB/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.naive_bayes/CategoricalNB/partial_fit/X": {
        "target": "sklearn/sklearn.naive_bayes/CategoricalNB/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/fit/X": {
        "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/partial_fit/X": {
        "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._base/KNeighborsMixin/kneighbors_graph/mode": {
        "target": "sklearn/sklearn.neighbors._base/KNeighborsMixin/kneighbors_graph/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "connectivity",
                "instanceName": "Connectivity"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin/radius_neighbors_graph/mode": {
        "target": "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin/radius_neighbors_graph/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "connectivity",
                "instanceName": "Connectivity"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.neighbors._base/_check_precomputed/X": {
        "target": "sklearn/sklearn.neighbors._base/_check_precomputed/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._base/_get_weights/weights": {
        "target": "sklearn/sklearn.neighbors._base/_get_weights/weights",
        "enumName": "Weights",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/__init__/weights": {
        "target": "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/__init__/weights",
        "enumName": "Weights",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/__init__/algorithm": {
        "target": "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/fit/X": {
        "target": "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/fit/y": {
        "target": "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/fit/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/weights": {
        "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/weights",
        "enumName": "Weights",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/algorithm": {
        "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/outlier_label": {
        "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/outlier_label",
        "enumName": "OutlierLabel",
        "pairs": [
            {
                "stringValue": "most_frequent",
                "instanceName": "MostFrequent"
            }
        ]
    },
    "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/fit/X": {
        "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/fit/y": {
        "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/fit/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/__init__/mode": {
        "target": "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/__init__/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "connectivity",
                "instanceName": "Connectivity"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/__init__/algorithm": {
        "target": "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/fit/X": {
        "target": "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/__init__/mode": {
        "target": "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/__init__/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "connectivity",
                "instanceName": "Connectivity"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/__init__/algorithm": {
        "target": "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/fit/X": {
        "target": "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._graph/kneighbors_graph/mode": {
        "target": "sklearn/sklearn.neighbors._graph/kneighbors_graph/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "connectivity",
                "instanceName": "Connectivity"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.neighbors._graph/radius_neighbors_graph/mode": {
        "target": "sklearn/sklearn.neighbors._graph/radius_neighbors_graph/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "connectivity",
                "instanceName": "Connectivity"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.neighbors._kde/KernelDensity/__init__/algorithm": {
        "target": "sklearn/sklearn.neighbors._kde/KernelDensity/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.neighbors._kde/KernelDensity/__init__/kernel": {
        "target": "sklearn/sklearn.neighbors._kde/KernelDensity/__init__/kernel",
        "enumName": "Kernel",
        "pairs": [
            {
                "stringValue": "linear",
                "instanceName": "Linear"
            },
            {
                "stringValue": "epanechnikov",
                "instanceName": "Epanechnikov"
            },
            {
                "stringValue": "tophat",
                "instanceName": "Tophat"
            },
            {
                "stringValue": "gaussian",
                "instanceName": "Gaussian"
            },
            {
                "stringValue": "exponential",
                "instanceName": "Exponential"
            },
            {
                "stringValue": "cosine",
                "instanceName": "Cosine"
            }
        ]
    },
    "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/__init__/algorithm": {
        "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/fit/X": {
        "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/__init__/init": {
        "target": "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/__init__/init",
        "enumName": "Init",
        "pairs": [
            {
                "stringValue": "lda",
                "instanceName": "Lda"
            },
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "identity",
                "instanceName": "Identity"
            },
            {
                "stringValue": "pca",
                "instanceName": "Pca"
            }
        ]
    },
    "sklearn/sklearn.neighbors._nearest_centroid/NearestCentroid/fit/X": {
        "target": "sklearn/sklearn.neighbors._nearest_centroid/NearestCentroid/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._nearest_centroid/NearestCentroid/predict/X": {
        "target": "sklearn/sklearn.neighbors._nearest_centroid/NearestCentroid/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/__init__/weights": {
        "target": "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/__init__/weights",
        "enumName": "Weights",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/__init__/algorithm": {
        "target": "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/fit/X": {
        "target": "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/fit/y": {
        "target": "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/fit/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/__init__/weights": {
        "target": "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/__init__/weights",
        "enumName": "Weights",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/__init__/algorithm": {
        "target": "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/fit/X": {
        "target": "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/fit/y": {
        "target": "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/fit/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.neighbors._unsupervised/NearestNeighbors/__init__/algorithm": {
        "target": "sklearn/sklearn.neighbors._unsupervised/NearestNeighbors/__init__/algorithm",
        "enumName": "Algorithm",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "brute",
                "instanceName": "Brute"
            },
            {
                "stringValue": "ball_tree",
                "instanceName": "BallTree"
            },
            {
                "stringValue": "kd_tree",
                "instanceName": "KdTree"
            }
        ]
    },
    "sklearn/sklearn.neighbors._unsupervised/NearestNeighbors/fit/X": {
        "target": "sklearn/sklearn.neighbors._unsupervised/NearestNeighbors/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_identity/X": {
        "target": "sklearn/sklearn.neural_network._base/inplace_identity/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_identity_derivative/Z": {
        "target": "sklearn/sklearn.neural_network._base/inplace_identity_derivative/Z",
        "enumName": "Z",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_identity_derivative/delta": {
        "target": "sklearn/sklearn.neural_network._base/inplace_identity_derivative/delta",
        "enumName": "Delta",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_logistic/X": {
        "target": "sklearn/sklearn.neural_network._base/inplace_logistic/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_logistic_derivative/Z": {
        "target": "sklearn/sklearn.neural_network._base/inplace_logistic_derivative/Z",
        "enumName": "Z",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_logistic_derivative/delta": {
        "target": "sklearn/sklearn.neural_network._base/inplace_logistic_derivative/delta",
        "enumName": "Delta",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_relu/X": {
        "target": "sklearn/sklearn.neural_network._base/inplace_relu/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_relu_derivative/Z": {
        "target": "sklearn/sklearn.neural_network._base/inplace_relu_derivative/Z",
        "enumName": "Z",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_relu_derivative/delta": {
        "target": "sklearn/sklearn.neural_network._base/inplace_relu_derivative/delta",
        "enumName": "Delta",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_softmax/X": {
        "target": "sklearn/sklearn.neural_network._base/inplace_softmax/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_tanh/X": {
        "target": "sklearn/sklearn.neural_network._base/inplace_tanh/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_tanh_derivative/Z": {
        "target": "sklearn/sklearn.neural_network._base/inplace_tanh_derivative/Z",
        "enumName": "Z",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._base/inplace_tanh_derivative/delta": {
        "target": "sklearn/sklearn.neural_network._base/inplace_tanh_derivative/delta",
        "enumName": "Delta",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_backprop/X": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_backprop/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_forward_pass_fast/X": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_forward_pass_fast/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_loss_grad_lbfgs/X": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_loss_grad_lbfgs/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/partial_fit/X": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/activation": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/activation",
        "enumName": "Activation",
        "pairs": [
            {
                "stringValue": "identity",
                "instanceName": "Identity"
            },
            {
                "stringValue": "tanh",
                "instanceName": "Tanh"
            },
            {
                "stringValue": "relu",
                "instanceName": "Relu"
            },
            {
                "stringValue": "logistic",
                "instanceName": "Logistic"
            }
        ]
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/solver": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "sgd",
                "instanceName": "Sgd"
            },
            {
                "stringValue": "adam",
                "instanceName": "Adam"
            },
            {
                "stringValue": "lbfgs",
                "instanceName": "Lbfgs"
            }
        ]
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/learning_rate": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/learning_rate",
        "enumName": "LearningRate",
        "pairs": [
            {
                "stringValue": "adaptive",
                "instanceName": "Adaptive"
            },
            {
                "stringValue": "constant",
                "instanceName": "Constant"
            },
            {
                "stringValue": "invscaling",
                "instanceName": "Invscaling"
            }
        ]
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/partial_fit/X": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/predict/X": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/predict_proba/X": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/activation": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/activation",
        "enumName": "Activation",
        "pairs": [
            {
                "stringValue": "identity",
                "instanceName": "Identity"
            },
            {
                "stringValue": "tanh",
                "instanceName": "Tanh"
            },
            {
                "stringValue": "relu",
                "instanceName": "Relu"
            },
            {
                "stringValue": "logistic",
                "instanceName": "Logistic"
            }
        ]
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/solver": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/solver",
        "enumName": "Solver",
        "pairs": [
            {
                "stringValue": "sgd",
                "instanceName": "Sgd"
            },
            {
                "stringValue": "adam",
                "instanceName": "Adam"
            },
            {
                "stringValue": "lbfgs",
                "instanceName": "Lbfgs"
            }
        ]
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/learning_rate": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/learning_rate",
        "enumName": "LearningRate",
        "pairs": [
            {
                "stringValue": "adaptive",
                "instanceName": "Adaptive"
            },
            {
                "stringValue": "constant",
                "instanceName": "Constant"
            },
            {
                "stringValue": "invscaling",
                "instanceName": "Invscaling"
            }
        ]
    },
    "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/predict/X": {
        "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._rbm/BernoulliRBM/fit/X": {
        "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._rbm/BernoulliRBM/score_samples/X": {
        "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/score_samples/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._rbm/BernoulliRBM/transform/X": {
        "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/__init__/lr_schedule": {
        "target": "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/__init__/lr_schedule",
        "enumName": "LrSchedule",
        "pairs": [
            {
                "stringValue": "adaptive",
                "instanceName": "Adaptive"
            },
            {
                "stringValue": "constant",
                "instanceName": "Constant"
            },
            {
                "stringValue": "invscaling",
                "instanceName": "Invscaling"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._data/Binarizer/fit/X": {
        "target": "sklearn/sklearn.preprocessing._data/Binarizer/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/Binarizer/transform/X": {
        "target": "sklearn/sklearn.preprocessing._data/Binarizer/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/MaxAbsScaler/fit/X": {
        "target": "sklearn/sklearn.preprocessing._data/MaxAbsScaler/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/MaxAbsScaler/inverse_transform/X": {
        "target": "sklearn/sklearn.preprocessing._data/MaxAbsScaler/inverse_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/MaxAbsScaler/partial_fit/X": {
        "target": "sklearn/sklearn.preprocessing._data/MaxAbsScaler/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/MaxAbsScaler/transform/X": {
        "target": "sklearn/sklearn.preprocessing._data/MaxAbsScaler/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/Normalizer/__init__/norm": {
        "target": "sklearn/sklearn.preprocessing._data/Normalizer/__init__/norm",
        "enumName": "Norm",
        "pairs": [
            {
                "stringValue": "max",
                "instanceName": "Max"
            },
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._data/Normalizer/fit/X": {
        "target": "sklearn/sklearn.preprocessing._data/Normalizer/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/Normalizer/transform/X": {
        "target": "sklearn/sklearn.preprocessing._data/Normalizer/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/PowerTransformer/__init__/method": {
        "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/__init__/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "box-cox",
                "instanceName": "Boxcox"
            },
            {
                "stringValue": "yeo-johnson",
                "instanceName": "Yeojohnson"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._data/QuantileTransformer/__init__/output_distribution": {
        "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/__init__/output_distribution",
        "enumName": "OutputDistribution",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "normal",
                "instanceName": "Normal"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._data/QuantileTransformer/fit/X": {
        "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/QuantileTransformer/inverse_transform/X": {
        "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/inverse_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/QuantileTransformer/transform/X": {
        "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/RobustScaler/fit/X": {
        "target": "sklearn/sklearn.preprocessing._data/RobustScaler/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/RobustScaler/inverse_transform/X": {
        "target": "sklearn/sklearn.preprocessing._data/RobustScaler/inverse_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/RobustScaler/transform/X": {
        "target": "sklearn/sklearn.preprocessing._data/RobustScaler/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/StandardScaler/fit/X": {
        "target": "sklearn/sklearn.preprocessing._data/StandardScaler/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/StandardScaler/inverse_transform/X": {
        "target": "sklearn/sklearn.preprocessing._data/StandardScaler/inverse_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/StandardScaler/partial_fit/X": {
        "target": "sklearn/sklearn.preprocessing._data/StandardScaler/partial_fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/add_dummy_feature/X": {
        "target": "sklearn/sklearn.preprocessing._data/add_dummy_feature/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/binarize/X": {
        "target": "sklearn/sklearn.preprocessing._data/binarize/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/maxabs_scale/X": {
        "target": "sklearn/sklearn.preprocessing._data/maxabs_scale/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/normalize/X": {
        "target": "sklearn/sklearn.preprocessing._data/normalize/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/normalize/norm": {
        "target": "sklearn/sklearn.preprocessing._data/normalize/norm",
        "enumName": "Norm",
        "pairs": [
            {
                "stringValue": "max",
                "instanceName": "Max"
            },
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._data/normalize/axis": {
        "target": "sklearn/sklearn.preprocessing._data/normalize/axis",
        "enumName": "Axis",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/power_transform/method": {
        "target": "sklearn/sklearn.preprocessing._data/power_transform/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "box-cox",
                "instanceName": "Boxcox"
            },
            {
                "stringValue": "yeo-johnson",
                "instanceName": "Yeojohnson"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._data/quantile_transform/X": {
        "target": "sklearn/sklearn.preprocessing._data/quantile_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/quantile_transform/output_distribution": {
        "target": "sklearn/sklearn.preprocessing._data/quantile_transform/output_distribution",
        "enumName": "OutputDistribution",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "normal",
                "instanceName": "Normal"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._data/robust_scale/X": {
        "target": "sklearn/sklearn.preprocessing._data/robust_scale/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._data/scale/X": {
        "target": "sklearn/sklearn.preprocessing._data/scale/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__/encode": {
        "target": "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__/encode",
        "enumName": "Encode",
        "pairs": [
            {
                "stringValue": "onehot",
                "instanceName": "Onehot"
            },
            {
                "stringValue": "ordinal",
                "instanceName": "Ordinal"
            },
            {
                "stringValue": "onehot-dense",
                "instanceName": "Onehotdense"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__/strategy": {
        "target": "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__/strategy",
        "enumName": "Strategy",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "quantile",
                "instanceName": "Quantile"
            },
            {
                "stringValue": "kmeans",
                "instanceName": "Kmeans"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__/dtype": {
        "target": "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__/dtype",
        "enumName": "Dtype",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/__init__/drop": {
        "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/__init__/drop",
        "enumName": "Drop",
        "pairs": [
            {
                "stringValue": "if_binary",
                "instanceName": "IfBinary"
            },
            {
                "stringValue": "first",
                "instanceName": "First"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/__init__/handle_unknown": {
        "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/__init__/handle_unknown",
        "enumName": "HandleUnknown",
        "pairs": [
            {
                "stringValue": "error",
                "instanceName": "Error"
            },
            {
                "stringValue": "ignore",
                "instanceName": "Ignore"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/inverse_transform/X": {
        "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/inverse_transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/__init__/handle_unknown": {
        "target": "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/__init__/handle_unknown",
        "enumName": "HandleUnknown",
        "pairs": [
            {
                "stringValue": "use_encoded_value",
                "instanceName": "UseEncodedValue"
            },
            {
                "stringValue": "error",
                "instanceName": "Error"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._label/LabelBinarizer/fit_transform/y": {
        "target": "sklearn/sklearn.preprocessing._label/LabelBinarizer/fit_transform/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._label/LabelBinarizer/inverse_transform/Y": {
        "target": "sklearn/sklearn.preprocessing._label/LabelBinarizer/inverse_transform/Y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._label/LabelBinarizer/transform/y": {
        "target": "sklearn/sklearn.preprocessing._label/LabelBinarizer/transform/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/inverse_transform/yt": {
        "target": "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/inverse_transform/yt",
        "enumName": "Yt",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/__init__/order": {
        "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/__init__/order",
        "enumName": "Order",
        "pairs": [
            {
                "stringValue": "F",
                "instanceName": "F"
            },
            {
                "stringValue": "C",
                "instanceName": "C"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/fit/X": {
        "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/transform/X": {
        "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/n_knots": {
        "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/n_knots",
        "enumName": "NKnots",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "quantile",
                "instanceName": "Quantile"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/knots": {
        "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/knots",
        "enumName": "Knots",
        "pairs": [
            {
                "stringValue": "uniform",
                "instanceName": "Uniform"
            },
            {
                "stringValue": "quantile",
                "instanceName": "Quantile"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/extrapolation": {
        "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/extrapolation",
        "enumName": "Extrapolation",
        "pairs": [
            {
                "stringValue": "linear",
                "instanceName": "Linear"
            },
            {
                "stringValue": "continue",
                "instanceName": "Continue"
            },
            {
                "stringValue": "error",
                "instanceName": "Error"
            },
            {
                "stringValue": "periodic",
                "instanceName": "Periodic"
            },
            {
                "stringValue": "constant",
                "instanceName": "Constant"
            }
        ]
    },
    "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/order": {
        "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/order",
        "enumName": "Order",
        "pairs": [
            {
                "stringValue": "F",
                "instanceName": "F"
            },
            {
                "stringValue": "C",
                "instanceName": "C"
            }
        ]
    },
    "sklearn/sklearn.random_projection/BaseRandomProjection/fit/X": {
        "target": "sklearn/sklearn.random_projection/BaseRandomProjection/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.random_projection/BaseRandomProjection/transform/X": {
        "target": "sklearn/sklearn.random_projection/BaseRandomProjection/transform/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/__init__/kernel": {
        "target": "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/__init__/kernel",
        "enumName": "Kernel",
        "pairs": [
            {
                "stringValue": "knn",
                "instanceName": "Knn"
            },
            {
                "stringValue": "rbf",
                "instanceName": "Rbf"
            }
        ]
    },
    "sklearn/sklearn.semi_supervised._label_propagation/LabelPropagation/__init__/kernel": {
        "target": "sklearn/sklearn.semi_supervised._label_propagation/LabelPropagation/__init__/kernel",
        "enumName": "Kernel",
        "pairs": [
            {
                "stringValue": "knn",
                "instanceName": "Knn"
            },
            {
                "stringValue": "rbf",
                "instanceName": "Rbf"
            }
        ]
    },
    "sklearn/sklearn.semi_supervised._label_propagation/LabelSpreading/__init__/kernel": {
        "target": "sklearn/sklearn.semi_supervised._label_propagation/LabelSpreading/__init__/kernel",
        "enumName": "Kernel",
        "pairs": [
            {
                "stringValue": "knn",
                "instanceName": "Knn"
            },
            {
                "stringValue": "rbf",
                "instanceName": "Rbf"
            }
        ]
    },
    "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/__init__/criterion": {
        "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "k_best",
                "instanceName": "KBest"
            },
            {
                "stringValue": "threshold",
                "instanceName": "Threshold"
            }
        ]
    },
    "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/decision_function/X": {
        "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/decision_function/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/fit/X": {
        "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/fit/y": {
        "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/fit/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict/X": {
        "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict_log_proba/X": {
        "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict_log_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict_proba/X": {
        "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/score/X": {
        "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/score/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.svm._base/BaseLibSVM/fit/X": {
        "target": "sklearn/sklearn.svm._base/BaseLibSVM/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.svm._base/BaseLibSVM/predict/X": {
        "target": "sklearn/sklearn.svm._base/BaseLibSVM/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.svm._base/BaseSVC/predict/X": {
        "target": "sklearn/sklearn.svm._base/BaseSVC/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.svm._base/_fit_liblinear/X": {
        "target": "sklearn/sklearn.svm._base/_fit_liblinear/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.svm._base/_fit_liblinear/class_weight": {
        "target": "sklearn/sklearn.svm._base/_fit_liblinear/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.svm._base/_fit_liblinear/penalty": {
        "target": "sklearn/sklearn.svm._base/_fit_liblinear/penalty",
        "enumName": "Penalty",
        "pairs": [
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.svm._base/_fit_liblinear/multi_class": {
        "target": "sklearn/sklearn.svm._base/_fit_liblinear/multi_class",
        "enumName": "MultiClass",
        "pairs": [
            {
                "stringValue": "crammer_singer",
                "instanceName": "CrammerSinger"
            },
            {
                "stringValue": "ovr",
                "instanceName": "Ovr"
            }
        ]
    },
    "sklearn/sklearn.svm._base/_fit_liblinear/loss": {
        "target": "sklearn/sklearn.svm._base/_fit_liblinear/loss",
        "enumName": "Loss",
        "pairs": [
            {
                "stringValue": "epsilon_insensitive",
                "instanceName": "EpsilonInsensitive"
            },
            {
                "stringValue": "squared_hinge",
                "instanceName": "SquaredHinge"
            },
            {
                "stringValue": "hinge",
                "instanceName": "Hinge"
            },
            {
                "stringValue": "logistic_regression",
                "instanceName": "LogisticRegression"
            }
        ]
    },
    "sklearn/sklearn.svm._bounds/l1_min_c/X": {
        "target": "sklearn/sklearn.svm._bounds/l1_min_c/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.svm._bounds/l1_min_c/loss": {
        "target": "sklearn/sklearn.svm._bounds/l1_min_c/loss",
        "enumName": "Loss",
        "pairs": [
            {
                "stringValue": "squared_hinge",
                "instanceName": "SquaredHinge"
            },
            {
                "stringValue": "log",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/LinearSVC/__init__/penalty": {
        "target": "sklearn/sklearn.svm._classes/LinearSVC/__init__/penalty",
        "enumName": "Penalty",
        "pairs": [
            {
                "stringValue": "l2",
                "instanceName": "L"
            },
            {
                "stringValue": "l1",
                "instanceName": "L"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/LinearSVC/__init__/loss": {
        "target": "sklearn/sklearn.svm._classes/LinearSVC/__init__/loss",
        "enumName": "Loss",
        "pairs": [
            {
                "stringValue": "squared_hinge",
                "instanceName": "SquaredHinge"
            },
            {
                "stringValue": "hinge",
                "instanceName": "Hinge"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/LinearSVC/__init__/multi_class": {
        "target": "sklearn/sklearn.svm._classes/LinearSVC/__init__/multi_class",
        "enumName": "MultiClass",
        "pairs": [
            {
                "stringValue": "crammer_singer",
                "instanceName": "CrammerSinger"
            },
            {
                "stringValue": "ovr",
                "instanceName": "Ovr"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/LinearSVC/fit/X": {
        "target": "sklearn/sklearn.svm._classes/LinearSVC/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.svm._classes/LinearSVR/__init__/loss": {
        "target": "sklearn/sklearn.svm._classes/LinearSVR/__init__/loss",
        "enumName": "Loss",
        "pairs": [
            {
                "stringValue": "epsilon_insensitive",
                "instanceName": "EpsilonInsensitive"
            },
            {
                "stringValue": "squared_epsilon_insensitive",
                "instanceName": "SquaredEpsilonInsensitive"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/LinearSVR/fit/X": {
        "target": "sklearn/sklearn.svm._classes/LinearSVR/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.svm._classes/NuSVC/__init__/kernel": {
        "target": "sklearn/sklearn.svm._classes/NuSVC/__init__/kernel",
        "enumName": "Kernel",
        "pairs": [
            {
                "stringValue": "precomputed",
                "instanceName": "Precomputed"
            },
            {
                "stringValue": "linear",
                "instanceName": "Linear"
            },
            {
                "stringValue": "rbf",
                "instanceName": "Rbf"
            },
            {
                "stringValue": "sigmoid",
                "instanceName": "Sigmoid"
            },
            {
                "stringValue": "poly",
                "instanceName": "Poly"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/NuSVC/__init__/gamma": {
        "target": "sklearn/sklearn.svm._classes/NuSVC/__init__/gamma",
        "enumName": "Gamma",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "scale",
                "instanceName": "Scale"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/NuSVC/__init__/class_weight": {
        "target": "sklearn/sklearn.svm._classes/NuSVC/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": [
            {
                "stringValue": "balanced",
                "instanceName": "Balanced"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/NuSVC/__init__/decision_function_shape": {
        "target": "sklearn/sklearn.svm._classes/NuSVC/__init__/decision_function_shape",
        "enumName": "DecisionFunctionShape",
        "pairs": [
            {
                "stringValue": "ovo",
                "instanceName": "Ovo"
            },
            {
                "stringValue": "ovr",
                "instanceName": "Ovr"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/NuSVR/__init__/kernel": {
        "target": "sklearn/sklearn.svm._classes/NuSVR/__init__/kernel",
        "enumName": "Kernel",
        "pairs": [
            {
                "stringValue": "precomputed",
                "instanceName": "Precomputed"
            },
            {
                "stringValue": "linear",
                "instanceName": "Linear"
            },
            {
                "stringValue": "rbf",
                "instanceName": "Rbf"
            },
            {
                "stringValue": "sigmoid",
                "instanceName": "Sigmoid"
            },
            {
                "stringValue": "poly",
                "instanceName": "Poly"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/NuSVR/__init__/gamma": {
        "target": "sklearn/sklearn.svm._classes/NuSVR/__init__/gamma",
        "enumName": "Gamma",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "scale",
                "instanceName": "Scale"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/OneClassSVM/__init__/kernel": {
        "target": "sklearn/sklearn.svm._classes/OneClassSVM/__init__/kernel",
        "enumName": "Kernel",
        "pairs": [
            {
                "stringValue": "precomputed",
                "instanceName": "Precomputed"
            },
            {
                "stringValue": "linear",
                "instanceName": "Linear"
            },
            {
                "stringValue": "rbf",
                "instanceName": "Rbf"
            },
            {
                "stringValue": "sigmoid",
                "instanceName": "Sigmoid"
            },
            {
                "stringValue": "poly",
                "instanceName": "Poly"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/OneClassSVM/__init__/gamma": {
        "target": "sklearn/sklearn.svm._classes/OneClassSVM/__init__/gamma",
        "enumName": "Gamma",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "scale",
                "instanceName": "Scale"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/OneClassSVM/fit/X": {
        "target": "sklearn/sklearn.svm._classes/OneClassSVM/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.svm._classes/OneClassSVM/predict/X": {
        "target": "sklearn/sklearn.svm._classes/OneClassSVM/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.svm._classes/SVC/__init__/kernel": {
        "target": "sklearn/sklearn.svm._classes/SVC/__init__/kernel",
        "enumName": "Kernel",
        "pairs": [
            {
                "stringValue": "precomputed",
                "instanceName": "Precomputed"
            },
            {
                "stringValue": "linear",
                "instanceName": "Linear"
            },
            {
                "stringValue": "rbf",
                "instanceName": "Rbf"
            },
            {
                "stringValue": "sigmoid",
                "instanceName": "Sigmoid"
            },
            {
                "stringValue": "poly",
                "instanceName": "Poly"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/SVC/__init__/gamma": {
        "target": "sklearn/sklearn.svm._classes/SVC/__init__/gamma",
        "enumName": "Gamma",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "scale",
                "instanceName": "Scale"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/SVC/__init__/decision_function_shape": {
        "target": "sklearn/sklearn.svm._classes/SVC/__init__/decision_function_shape",
        "enumName": "DecisionFunctionShape",
        "pairs": [
            {
                "stringValue": "ovo",
                "instanceName": "Ovo"
            },
            {
                "stringValue": "ovr",
                "instanceName": "Ovr"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/SVR/__init__/kernel": {
        "target": "sklearn/sklearn.svm._classes/SVR/__init__/kernel",
        "enumName": "Kernel",
        "pairs": [
            {
                "stringValue": "precomputed",
                "instanceName": "Precomputed"
            },
            {
                "stringValue": "linear",
                "instanceName": "Linear"
            },
            {
                "stringValue": "rbf",
                "instanceName": "Rbf"
            },
            {
                "stringValue": "sigmoid",
                "instanceName": "Sigmoid"
            },
            {
                "stringValue": "poly",
                "instanceName": "Poly"
            }
        ]
    },
    "sklearn/sklearn.svm._classes/SVR/__init__/gamma": {
        "target": "sklearn/sklearn.svm._classes/SVR/__init__/gamma",
        "enumName": "Gamma",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "scale",
                "instanceName": "Scale"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/BaseDecisionTree/apply/X": {
        "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/apply/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.tree._classes/BaseDecisionTree/cost_complexity_pruning_path/X": {
        "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/cost_complexity_pruning_path/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.tree._classes/BaseDecisionTree/decision_path/X": {
        "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/decision_path/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.tree._classes/BaseDecisionTree/predict/X": {
        "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/predict/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/criterion": {
        "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "gini",
                "instanceName": "Gini"
            },
            {
                "stringValue": "entropy",
                "instanceName": "Entropy"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/splitter": {
        "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/splitter",
        "enumName": "Splitter",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "best",
                "instanceName": "Best"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/max_features": {
        "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/max_features",
        "enumName": "MaxFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "sqrt",
                "instanceName": "Sqrt"
            },
            {
                "stringValue": "log2",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/class_weight": {
        "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.tree._classes/DecisionTreeClassifier/fit/X": {
        "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.tree._classes/DecisionTreeClassifier/predict_log_proba/X": {
        "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/predict_log_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.tree._classes/DecisionTreeClassifier/predict_proba/X": {
        "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/predict_proba/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/criterion": {
        "target": "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "squared_error",
                "instanceName": "SquaredError"
            },
            {
                "stringValue": "absolute_error",
                "instanceName": "AbsoluteError"
            },
            {
                "stringValue": "poisson",
                "instanceName": "Poisson"
            },
            {
                "stringValue": "friedman_mse",
                "instanceName": "FriedmanMse"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/splitter": {
        "target": "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/splitter",
        "enumName": "Splitter",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "best",
                "instanceName": "Best"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/max_features": {
        "target": "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/max_features",
        "enumName": "MaxFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "sqrt",
                "instanceName": "Sqrt"
            },
            {
                "stringValue": "log2",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/DecisionTreeRegressor/fit/X": {
        "target": "sklearn/sklearn.tree._classes/DecisionTreeRegressor/fit/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/criterion": {
        "target": "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "gini",
                "instanceName": "Gini"
            },
            {
                "stringValue": "entropy",
                "instanceName": "Entropy"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/splitter": {
        "target": "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/splitter",
        "enumName": "Splitter",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "best",
                "instanceName": "Best"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/max_features": {
        "target": "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/max_features",
        "enumName": "MaxFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "sqrt",
                "instanceName": "Sqrt"
            },
            {
                "stringValue": "log2",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/class_weight": {
        "target": "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/criterion": {
        "target": "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/criterion",
        "enumName": "Criterion",
        "pairs": [
            {
                "stringValue": "friedman_mse",
                "instanceName": "FriedmanMse"
            },
            {
                "stringValue": "squared_error",
                "instanceName": "SquaredError"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/splitter": {
        "target": "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/splitter",
        "enumName": "Splitter",
        "pairs": [
            {
                "stringValue": "random",
                "instanceName": "Random"
            },
            {
                "stringValue": "best",
                "instanceName": "Best"
            }
        ]
    },
    "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/max_features": {
        "target": "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/max_features",
        "enumName": "MaxFeatures",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "sqrt",
                "instanceName": "Sqrt"
            },
            {
                "stringValue": "log2",
                "instanceName": "Log"
            }
        ]
    },
    "sklearn/sklearn.tree._export/export_graphviz/label": {
        "target": "sklearn/sklearn.tree._export/export_graphviz/label",
        "enumName": "Label",
        "pairs": [
            {
                "stringValue": "none",
                "instanceName": "None"
            },
            {
                "stringValue": "root",
                "instanceName": "Root"
            },
            {
                "stringValue": "all",
                "instanceName": "All"
            }
        ]
    },
    "sklearn/sklearn.tree._export/plot_tree/label": {
        "target": "sklearn/sklearn.tree._export/plot_tree/label",
        "enumName": "Label",
        "pairs": [
            {
                "stringValue": "none",
                "instanceName": "None"
            },
            {
                "stringValue": "root",
                "instanceName": "Root"
            },
            {
                "stringValue": "all",
                "instanceName": "All"
            }
        ]
    },
    "sklearn/sklearn.utils._estimator_html_repr/_VisualBlock/__init__/kind": {
        "target": "sklearn/sklearn.utils._estimator_html_repr/_VisualBlock/__init__/kind",
        "enumName": "Kind",
        "pairs": [
            {
                "stringValue": "single",
                "instanceName": "Single"
            },
            {
                "stringValue": "serial",
                "instanceName": "Serial"
            },
            {
                "stringValue": "parallel",
                "instanceName": "Parallel"
            }
        ]
    },
    "sklearn/sklearn.utils._mask/_get_mask/X": {
        "target": "sklearn/sklearn.utils._mask/_get_mask/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils._mask/_get_mask/value_to_mask": {
        "target": "sklearn/sklearn.utils._mask/_get_mask/value_to_mask",
        "enumName": "ValueToMask",
        "pairs": []
    },
    "sklearn/sklearn.utils._testing/_convert_container/constructor_name": {
        "target": "sklearn/sklearn.utils._testing/_convert_container/constructor_name",
        "enumName": "ConstructorName",
        "pairs": [
            {
                "stringValue": "dataframe",
                "instanceName": "Dataframe"
            },
            {
                "stringValue": "array",
                "instanceName": "Array"
            },
            {
                "stringValue": "sparse_csr",
                "instanceName": "SparseCsr"
            },
            {
                "stringValue": "slice",
                "instanceName": "Slice"
            },
            {
                "stringValue": "sparse",
                "instanceName": "Sparse"
            },
            {
                "stringValue": "sparse_csc",
                "instanceName": "SparseCsc"
            },
            {
                "stringValue": "tuple",
                "instanceName": "Tuple"
            },
            {
                "stringValue": "series",
                "instanceName": "Series"
            },
            {
                "stringValue": "list",
                "instanceName": "List"
            },
            {
                "stringValue": "index",
                "instanceName": "Index"
            }
        ]
    },
    "sklearn/sklearn.utils._testing/assert_allclose_dense_sparse/x": {
        "target": "sklearn/sklearn.utils._testing/assert_allclose_dense_sparse/x",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils._testing/assert_allclose_dense_sparse/y": {
        "target": "sklearn/sklearn.utils._testing/assert_allclose_dense_sparse/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.utils/all_estimators/type_filter": {
        "target": "sklearn/sklearn.utils/all_estimators/type_filter",
        "enumName": "TypeFilter",
        "pairs": [
            {
                "stringValue": "cluster",
                "instanceName": "Cluster"
            },
            {
                "stringValue": "regressor",
                "instanceName": "Regressor"
            },
            {
                "stringValue": "classifier",
                "instanceName": "Classifier"
            },
            {
                "stringValue": "transformer",
                "instanceName": "Transformer"
            }
        ]
    },
    "sklearn/sklearn.utils/axis0_safe_slice/X": {
        "target": "sklearn/sklearn.utils/axis0_safe_slice/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils.class_weight/compute_sample_weight/class_weight": {
        "target": "sklearn/sklearn.utils.class_weight/compute_sample_weight/class_weight",
        "enumName": "ClassWeight",
        "pairs": []
    },
    "sklearn/sklearn.utils.extmath/_randomized_eigsh/power_iteration_normalizer": {
        "target": "sklearn/sklearn.utils.extmath/_randomized_eigsh/power_iteration_normalizer",
        "enumName": "PowerIterationNormalizer",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "none",
                "instanceName": "None"
            },
            {
                "stringValue": "QR",
                "instanceName": "Qr"
            },
            {
                "stringValue": "LU",
                "instanceName": "Lu"
            }
        ]
    },
    "sklearn/sklearn.utils.extmath/_randomized_eigsh/selection": {
        "target": "sklearn/sklearn.utils.extmath/_randomized_eigsh/selection",
        "enumName": "Selection",
        "pairs": [
            {
                "stringValue": "module",
                "instanceName": "Module"
            },
            {
                "stringValue": "value",
                "instanceName": "Value"
            }
        ]
    },
    "sklearn/sklearn.utils.extmath/randomized_range_finder/power_iteration_normalizer": {
        "target": "sklearn/sklearn.utils.extmath/randomized_range_finder/power_iteration_normalizer",
        "enumName": "PowerIterationNormalizer",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "none",
                "instanceName": "None"
            },
            {
                "stringValue": "QR",
                "instanceName": "Qr"
            },
            {
                "stringValue": "LU",
                "instanceName": "Lu"
            }
        ]
    },
    "sklearn/sklearn.utils.extmath/randomized_svd/M": {
        "target": "sklearn/sklearn.utils.extmath/randomized_svd/M",
        "enumName": "M",
        "pairs": []
    },
    "sklearn/sklearn.utils.extmath/randomized_svd/power_iteration_normalizer": {
        "target": "sklearn/sklearn.utils.extmath/randomized_svd/power_iteration_normalizer",
        "enumName": "PowerIterationNormalizer",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "none",
                "instanceName": "None"
            },
            {
                "stringValue": "QR",
                "instanceName": "Qr"
            },
            {
                "stringValue": "LU",
                "instanceName": "Lu"
            }
        ]
    },
    "sklearn/sklearn.utils.extmath/safe_sparse_dot/a": {
        "target": "sklearn/sklearn.utils.extmath/safe_sparse_dot/a",
        "enumName": "A",
        "pairs": []
    },
    "sklearn/sklearn.utils.extmath/safe_sparse_dot/b": {
        "target": "sklearn/sklearn.utils.extmath/safe_sparse_dot/b",
        "enumName": "B",
        "pairs": []
    },
    "sklearn/sklearn.utils.graph/_fix_connected_components/mode": {
        "target": "sklearn/sklearn.utils.graph/_fix_connected_components/mode",
        "enumName": "Mode",
        "pairs": [
            {
                "stringValue": "connectivity",
                "instanceName": "Connectivity"
            },
            {
                "stringValue": "distance",
                "instanceName": "Distance"
            }
        ]
    },
    "sklearn/sklearn.utils.graph/graph_shortest_path/method": {
        "target": "sklearn/sklearn.utils.graph/graph_shortest_path/method",
        "enumName": "Method",
        "pairs": [
            {
                "stringValue": "auto",
                "instanceName": "Auto"
            },
            {
                "stringValue": "D",
                "instanceName": "D"
            },
            {
                "stringValue": "FW",
                "instanceName": "Fw"
            }
        ]
    },
    "sklearn/sklearn.utils.graph/single_source_shortest_path_length/graph": {
        "target": "sklearn/sklearn.utils.graph/single_source_shortest_path_length/graph",
        "enumName": "Graph",
        "pairs": []
    },
    "sklearn/sklearn.utils.multiclass/class_distribution/y": {
        "target": "sklearn/sklearn.utils.multiclass/class_distribution/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.utils.optimize/_newton_cg/tol": {
        "target": "sklearn/sklearn.utils.optimize/_newton_cg/tol",
        "enumName": "Tol",
        "pairs": []
    },
    "sklearn/sklearn.utils/safe_mask/X": {
        "target": "sklearn/sklearn.utils/safe_mask/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils/safe_sqr/X": {
        "target": "sklearn/sklearn.utils/safe_sqr/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils.sparsefuncs/count_nonzero/axis": {
        "target": "sklearn/sklearn.utils.sparsefuncs/count_nonzero/axis",
        "enumName": "Axis",
        "pairs": []
    },
    "sklearn/sklearn.utils.sparsefuncs/incr_mean_variance_axis/axis": {
        "target": "sklearn/sklearn.utils.sparsefuncs/incr_mean_variance_axis/axis",
        "enumName": "Axis",
        "pairs": []
    },
    "sklearn/sklearn.utils.sparsefuncs/inplace_column_scale/scale": {
        "target": "sklearn/sklearn.utils.sparsefuncs/inplace_column_scale/scale",
        "enumName": "Scale",
        "pairs": []
    },
    "sklearn/sklearn.utils.sparsefuncs/inplace_csr_column_scale/scale": {
        "target": "sklearn/sklearn.utils.sparsefuncs/inplace_csr_column_scale/scale",
        "enumName": "Scale",
        "pairs": []
    },
    "sklearn/sklearn.utils.sparsefuncs/inplace_row_scale/scale": {
        "target": "sklearn/sklearn.utils.sparsefuncs/inplace_row_scale/scale",
        "enumName": "Scale",
        "pairs": []
    },
    "sklearn/sklearn.utils.sparsefuncs/mean_variance_axis/axis": {
        "target": "sklearn/sklearn.utils.sparsefuncs/mean_variance_axis/axis",
        "enumName": "Axis",
        "pairs": []
    },
    "sklearn/sklearn.utils.sparsefuncs/min_max_axis/axis": {
        "target": "sklearn/sklearn.utils.sparsefuncs/min_max_axis/axis",
        "enumName": "Axis",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/_allclose_dense_sparse/x": {
        "target": "sklearn/sklearn.utils.validation/_allclose_dense_sparse/x",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/_allclose_dense_sparse/y": {
        "target": "sklearn/sklearn.utils.validation/_allclose_dense_sparse/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/_check_sample_weight/sample_weight": {
        "target": "sklearn/sklearn.utils.validation/_check_sample_weight/sample_weight",
        "enumName": "SampleWeight",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/_check_sample_weight/X": {
        "target": "sklearn/sklearn.utils.validation/_check_sample_weight/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/_get_feature_names/X": {
        "target": "sklearn/sklearn.utils.validation/_get_feature_names/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/_make_indexable/iterable": {
        "target": "sklearn/sklearn.utils.validation/_make_indexable/iterable",
        "enumName": "Iterable",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/as_float_array/X": {
        "target": "sklearn/sklearn.utils.validation/as_float_array/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/assert_all_finite/X": {
        "target": "sklearn/sklearn.utils.validation/assert_all_finite/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/check_X_y/X": {
        "target": "sklearn/sklearn.utils.validation/check_X_y/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/check_X_y/y": {
        "target": "sklearn/sklearn.utils.validation/check_X_y/y",
        "enumName": "Y",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/check_X_y/order": {
        "target": "sklearn/sklearn.utils.validation/check_X_y/order",
        "enumName": "Order",
        "pairs": [
            {
                "stringValue": "F",
                "instanceName": "F"
            },
            {
                "stringValue": "C",
                "instanceName": "C"
            }
        ]
    },
    "sklearn/sklearn.utils.validation/check_array/order": {
        "target": "sklearn/sklearn.utils.validation/check_array/order",
        "enumName": "Order",
        "pairs": [
            {
                "stringValue": "F",
                "instanceName": "F"
            },
            {
                "stringValue": "C",
                "instanceName": "C"
            }
        ]
    },
    "sklearn/sklearn.utils.validation/check_is_fitted/all_or_any": {
        "target": "sklearn/sklearn.utils.validation/check_is_fitted/all_or_any",
        "enumName": "AllOrAny",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/check_non_negative/X": {
        "target": "sklearn/sklearn.utils.validation/check_non_negative/X",
        "enumName": "X",
        "pairs": []
    },
    "sklearn/sklearn.utils.validation/check_scalar/include_boundaries": {
        "target": "sklearn/sklearn.utils.validation/check_scalar/include_boundaries",
        "enumName": "IncludeBoundaries",
        "pairs": [
            {
                "stringValue": "neither",
                "instanceName": "Neither"
            },
            {
                "stringValue": "left",
                "instanceName": "Left"
            },
            {
                "stringValue": "both",
                "instanceName": "Both"
            },
            {
                "stringValue": "right",
                "instanceName": "Right"
            }
        ]
    },
    "sklearn/sklearn.utils.validation/check_symmetric/array": {
        "target": "sklearn/sklearn.utils.validation/check_symmetric/array",
        "enumName": "Array",
        "pairs": []
    }
}
