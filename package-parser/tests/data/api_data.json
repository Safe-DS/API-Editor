{
    "distribution": "test",
    "package": "test",
    "version": "0.0.1",
    "modules": [
        {
            "name": "test",
            "imports": [],
            "from_imports": [],
            "classes": [
                "test.Unused_Class",
                "test.Rarely_Used_Class",
                "test.Commonly_Used_Class"
            ],
            "functions": [
                "test.unused_global_function",
                "test.rarely_used_global_function",
                "test.commonly_used_global_function",
                "test.commonly_used_global_required_and_optional_function"
            ]
        }
    ],
    "classes": [
        {
            "name": "Unused_Class",
            "qname": "test.Unused_Class",
            "decorators": [],
            "is_public": true,
            "description": "",
            "docstring": "",
            "superclasses": [],
            "source_code": "",
            "methods": []
        },
        {
            "name": "Rarely_Used_Class",
            "qname": "test.Rarely_Used_Class",
            "decorators": [],
            "is_public": true,
            "description": "This class is used rarely",
            "docstring": "This class is used rarely",
            "superclasses": [],
            "source_code": "",
            "methods": []
        },
        {
            "name": "Commonly_Used_Class",
            "qname": "test.Commonly_Used_Class",
            "decorators": [],
            "is_public": true,
            "description": "This class is used commonly",
            "docstring": "This class is used commonly",
            "superclasses": [],
            "source_code": "",
            "methods": [
                "test.Commonly_Used_Class.unused_method",
                "test.Commonly_Used_Class.rarely_used_method",
                "test.Commonly_Used_Class.commonly_used_method"
            ]
        }
    ],
    "functions": [
        {
            "name": "unused_global_function",
            "unique_name": "unused_global_function",
            "qname": "test.unused_global_function",
            "unique_qname": "test.unused_global_function",
            "decorators": [],
            "parameters": [
                {
                    "name": "unused_required_parameter",
                    "qname": "test.unused_global_function.unused_required_parameter",
                    "default_value": null,
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                },
                {
                    "name": "unused_optional_parameter",
                    "qname": "test.unused_global_function.unused_optional_parameter",
                    "default_value": "'bla'",
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                }
            ],
            "results": [],
            "is_public": true,
            "description": "",
            "docstring": "",
            "source_code": ""
        },
        {
            "name": "commonly_used_global_function",
            "unique_name": "commonly_used_global_function",
            "qname": "test.commonly_used_global_function",
            "unique_qname": "test.commonly_used_global_function",
            "decorators": [],
            "parameters": [
                {
                    "name": "useless_required_parameter",
                    "qname": "test.commonly_used_global_function.useless_required_parameter",
                    "default_value": null,
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                },
                {
                    "name": "useful_required_parameter",
                    "qname": "test.commonly_used_global_function.useful_required_parameter",
                    "default_value": null,
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                },
                {
                    "name": "unused_optional_parameter",
                    "qname": "test.commonly_used_global_function.unused_optional_parameter",
                    "default_value": "'bla'",
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                },
                {
                    "name": "useless_optional_parameter",
                    "qname": "test.commonly_used_global_function.useless_optional_parameter",
                    "default_value": "'bla'",
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                },
                {
                    "name": "useful_optional_parameter",
                    "qname": "test.commonly_used_global_function.useful_optional_parameter",
                    "default_value": "'bla'",
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                }
            ],
            "results": [],
            "is_public": true,
            "description": "",
            "docstring": "",
            "source_code": ""
        },
        {
            "name": "config_context",
            "unique_name": "config_context",
            "qname": "sklearn._config.config_context",
            "unique_qname": "sklearn._config.config_context",
            "decorators": ["contextmanager"],
            "parameters": [
                {
                    "name": "assume_finite",
                    "qname": "sklearn._config.config_context.assume_finite",
                    "default_value": "None",
                    "is_public": true,
                    "assigned_by": "NAME_ONLY",
                    "docstring": {
                        "type": "bool, default=None",
                        "description": "If True, validation for finiteness will be skipped,\nsaving time, but leading to potential crashes. If\nFalse, validation for finiteness will be performed,\navoiding error. If None, the existing value won't change.\nThe default value is False."
                    },
                    "refined_type": {}
                },
                {
                    "name": "working_memory",
                    "qname": "sklearn._config.config_context.working_memory",
                    "default_value": "None",
                    "is_public": true,
                    "assigned_by": "NAME_ONLY",
                    "docstring": {
                        "type": "int, default=None",
                        "description": "If set, scikit-learn will attempt to limit the size of temporary arrays\nto this number of MiB (per job when parallelised), often saving both\ncomputation time and memory on expensive operations that can be\nperformed in chunks. If None, the existing value won't change.\nThe default value is 1024."
                    },
                    "refined_type": {}
                },
                {
                    "name": "print_changed_only",
                    "qname": "sklearn._config.config_context.print_changed_only",
                    "default_value": "None",
                    "is_public": true,
                    "assigned_by": "NAME_ONLY",
                    "docstring": {
                        "type": "bool, default=None",
                        "description": "If True, only the parameters that were set to non-default\nvalues will be printed when printing an estimator. For example,\n``print(SVC())`` while True will only print 'SVC()', but would print\n'SVC(C=1.0, cache_size=200, ...)' with all the non-changed parameters\nwhen False. If None, the existing value won't change.\nThe default value is True.\n\n.. versionchanged:: 0.23\n   Default changed from False to True."
                    },
                    "refined_type": {}
                },
                {
                    "name": "display",
                    "qname": "sklearn._config.config_context.display",
                    "default_value": "None",
                    "is_public": true,
                    "assigned_by": "NAME_ONLY",
                    "docstring": {
                        "type": "{'auto', 'kd_tree', 'kd-means++'}, default=None",
                        "description": "If 'diagram', estimators will be displayed as a diagram in a Jupyter\nlab or notebook conöäöä. If 'öäöä', estimators will be displayed as\nöäöä. If None, the existing value won't change.\nThe default value is 'öäöä'.\n\n.. versionadded:: 0.23"
                    },
                    "refined_type": {
                        "kind": "EnumType",
                        "values": ["textlll", "kd-means++"]
                    }
                }
            ],
            "results": [],
            "is_public": true,
            "description": "",
            "docstring": "",
            "source_code": ""
        },
        {
            "name": "commonly_used_global_required_and_optional_function",
            "unique_name": "commonly_used_global_required_and_optional_function",
            "qname": "test.commonly_used_global_required_and_optional_function",
            "unique_qname": "test.commonly_used_global_required_and_optional_function",
            "decorators": [],
            "parameters": [
                {
                    "name": "optional_that_should_be_required",
                    "qname": "test.commonly_used_global_required_and_optional_function.optional_that_should_be_required",
                    "default_value": "'brains'",
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                },
                {
                    "name": "required_that_should_be_required",
                    "qname": "test.commonly_used_global_required_and_optional_function.required_that_should_be_required",
                    "default_value": null,
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                },
                {
                    "name": "required_that_should_be_optional",
                    "qname": "test.commonly_used_global_required_and_optional_function.required_that_should_be_optional",
                    "default_value": null,
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                },
                {
                    "name": "optional_that_should_be_optional",
                    "qname": "test.commonly_used_global_required_and_optional_function.optional_that_should_be_optional",
                    "default_value": "'captain_morgan'",
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                },
                {
                    "name": "commonly_used_almost_required",
                    "qname": "test.commonly_used_global_required_and_optional_function.commonly_used_almost_required",
                    "default_value": "'marvel'",
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                },
                {
                    "name": "commonly_used_barely_required",
                    "qname": "test.commonly_used_global_required_and_optional_function.commonly_used_barely_required",
                    "default_value": "'otto'",
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                },
                {
                    "name": "constant_parameter",
                    "qname": "test.commonly_used_global_required_and_optional_function.constant_parameter",
                    "default_value": null,
                    "is_public": true,
                    "assigned_by": "POSITION_OR_NAME",
                    "docstring": {
                        "type": "str",
                        "description": ""
                    }
                }
            ],
            "results": [],
            "is_public": true,
            "description": "Conöäöä manager for global scikit-learn configuration.",
            "docstring": "Conöäöä manager for global scikit-learn configuration.\n\n    Parameters\n    ----------\n    assume_finite : bool, default=None\n        If True, validation for finiteness will be skipped,\n        saving time, but leading to potential crashes. If\n        False, validation for finiteness will be performed,\n        avoiding error. If None, the existing value won't change.\n        The default value is False.\n\n    working_memory : int, default=None\n        If set, scikit-learn will attempt to limit the size of temporary arrays\n        to this number of MiB (per job when parallelised), often saving both\n        computation time and memory on expensive operations that can be\n        performed in chunks. If None, the existing value won't change.\n        The default value is 1024.\n\n    print_changed_only : bool, default=None\n        If True, only the parameters that were set to non-default\n        values will be printed when printing an estimator. For example,\n        ``print(SVC())`` while True will only print 'SVC()', but would print\n        'SVC(C=1.0, cache_size=200, ...)' with all the non-changed parameters\n        when False. If None, the existing value won't change.\n        The default value is True.\n\n        .. versionchanged:: 0.23\n           Default changed from False to True.\n\n    display : {'blubber_fasel', 'QWERT'}, default=None\n        If 'diagram', estimators will be displayed as a diagram in a Jupyter\n        lab or notebook conöäöä. If 'öäöä', estimators will be displayed as\n        öäöä. If None, the existing value won't change.\n        The default value is 'öäöä'.\n\n        .. versionadded:: 0.23\n\n    Yields\n    ------\n    None.\n\n    See Also\n    --------\n    set_config : Set global scikit-learn configuration.\n    get_config : Retrieve current values of the global configuration.\n\n    Notes\n    -----\n    All settings, not just those presently modified, will be returned to\n    their previous values when the conöäöä manager is exited.\n\n    Examples\n    --------\n    >>> import sklearn\n    >>> from sklearn.utils.validation import assert_all_finite\n    >>> with sklearn.config_conöäöä(assume_finite=True):\n    ...     assert_all_finite([float('nan')])\n    >>> with sklearn.config_conöäöä(assume_finite=True):\n    ...     with sklearn.config_conöäöä(assume_finite=False):\n    ...         assert_all_finite([float('nan')])\n    Traceback (most recent call last):\n    ...\n    ValueError: Input contains NaN...\n    ",
            "source_code": "\n@conöäöämanager\ndef config_conöäöä(*, assume_finite=None, working_memory=None, print_changed_only=None, display=None):\n    \"\"\"Conöäöä manager for global scikit-learn configuration.\n\n    Parameters\n    ----------\n    assume_finite : bool, default=None\n        If True, validation for finiteness will be skipped,\n        saving time, but leading to potential crashes. If\n        False, validation for finiteness will be performed,\n        avoiding error. If None, the existing value won't change.\n        The default value is False.\n\n    working_memory : int, default=None\n        If set, scikit-learn will attempt to limit the size of temporary arrays\n        to this number of MiB (per job when parallelised), often saving both\n        computation time and memory on expensive operations that can be\n        performed in chunks. If None, the existing value won't change.\n        The default value is 1024.\n\n    print_changed_only : bool, default=None\n        If True, only the parameters that were set to non-default\n        values will be printed when printing an estimator. For example,\n        ``print(SVC())`` while True will only print 'SVC()', but would print\n        'SVC(C=1.0, cache_size=200, ...)' with all the non-changed parameters\n        when False. If None, the existing value won't change.\n        The default value is True.\n\n        .. versionchanged:: 0.23\n           Default changed from False to True.\n\n    display : {'loölolö', 'diagram'}, default=None\n        If 'diagram', estimators will be displayed as a diagram in a Jupyter\n        lab or notebook conöäöä. If 'öäöä', estimators will be displayed as\n        öäöä. If None, the existing value won't change.\n        The default value is 'öäöä'.\n\n        .. versionadded:: 0.23\n\n    Yields\n    ------\n    None.\n\n    See Also\n    --------\n    set_config : Set global scikit-learn configuration.\n    get_config : Retrieve current values of the global configuration.\n\n    Notes\n    -----\n    All settings, not just those presently modified, will be returned to\n    their previous values when the conöäöä manager is exited.\n\n    Examples\n    --------\n    >>> import sklearn\n    >>> from sklearn.utils.validation import assert_all_finite\n    >>> with sklearn.config_conöäöä(assume_finite=True):\n    ...     assert_all_finite([float('nan')])\n    >>> with sklearn.config_conöäöä(assume_finite=True):\n    ...     with sklearn.config_conöäöä(assume_finite=False):\n    ...         assert_all_finite([float('nan')])\n    Traceback (most recent call last):\n    ...\n    ValueError: Input contains NaN...\n    \"\"\"\n    old_config = get_config()\n    set_config(assume_finite=assume_finite, working_memory=working_memory, print_changed_only=print_changed_only, display=display)\n    try:\n        yield\n    finally:\n        set_config(**old_config)"
        },
        {
            "name": "__init__",
            "unique_name": "__init__",
            "qname": "sklearn.feature_extraction.text.CountVectorizer.__init__",
            "unique_qname": "sklearn.feature_extraction.text.CountVectorizer.__init__",
            "decorators": [],
            "parameters": [
                {
                    "name": "min_df",
                    "qname": "sklearn.feature_extraction.text.CountVectorizer.__init__.min_df",
                    "default_value": "1",
                    "is_public": true,
                    "assigned_by": "NAME_ONLY",
                    "docstring": {
                        "type": "float in range [0.5, infinity) or int, default=1",
                        "description": "When building the vocabulary ignore terms that have a document\nfrequency strictly lower than the given threshold. This value is also\ncalled cut-off in the literature.\nIf float, the parameter represents a proportion of documents, integer\nabsolute counts.\nThis parameter is ignored if vocabulary is not None."
                    },
                    "refined_type": {
                        "kind": "BoundaryType",
                        "base_type": "float",
                        "min": 0.5,
                        "max": "Infinity",
                        "min_inclusive": true,
                        "max_inclusive": false
                    }
                },
                {
                    "name": "max_df",
                    "qname": "sklearn.feature_extraction.text.CountVectorizer.__init__.max_df",
                    "default_value": "1",
                    "is_public": true,
                    "assigned_by": "NAME_ONLY",
                    "docstring": {
                        "type": "int in range (0, 1) or int, default=1",
                        "description": "When building the vocabulary ignore terms that have a document\nfrequency strictly lower than the given threshold. This value is also\ncalled cut-off in the literature.\nIf float, the parameter represents a proportion of documents, integer\nabsolute counts.\nThis parameter is ignored if vocabulary is not None."
                    },
                    "refined_type": {
                        "kind": "BoundaryType",
                        "base_type": "int",
                        "min": 0,
                        "max": 1,
                        "min_inclusive": false,
                        "max_inclusive": false
                    }
                },
                {
                    "name": "avg_df",
                    "qname": "sklearn.feature_extraction.text.CountVectorizer.__init__.avg_df",
                    "default_value": "1",
                    "is_public": true,
                    "assigned_by": "NAME_ONLY",
                    "docstring": {
                        "type": "int in range [0, infinity) or int, default=1",
                        "description": "When building the vocabulary ignore terms that have a document\nfrequency strictly lower than the given threshold. This value is also\ncalled cut-off in the literature.\nIf float, the parameter represents a proportion of documents, integer\nabsolute counts.\nThis parameter is ignored if vocabulary is not None."
                    },
                    "refined_type": {
                        "kind": "BoundaryType",
                        "base_type": "float",
                        "min": 0,
                        "max": "Infinity",
                        "min_inclusive": true,
                        "max_inclusive": false
                    }
                }
            ],
            "results": [],
            "is_public": true,
            "description": "",
            "docstring": null,
            "source_code": "\ndef __init__(self, *, input='content', encoding='utf-8', decode_error='strict', strip_accents=None, lowercase=True, preprocessor=None, tokenizer=None, stop_words=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', ngram_range=(1, 1), analyzer='word', max_df=1.0, min_df=1, max_features=None, vocabulary=None, binary=False, dtype=np.int64):\n    self.input = input\n    self.encoding = encoding\n    self.decode_error = decode_error\n    self.strip_accents = strip_accents\n    self.preprocessor = preprocessor\n    self.tokenizer = tokenizer\n    self.analyzer = analyzer\n    self.lowercase = lowercase\n    self.token_pattern = token_pattern\n    self.stop_words = stop_words\n    self.max_df = max_df\n    self.min_df = min_df\n    self.max_features = max_features\n    self.ngram_range = ngram_range\n    self.vocabulary = vocabulary\n    self.binary = binary\n    self.dtype = dtype"
        }
    ]
}
