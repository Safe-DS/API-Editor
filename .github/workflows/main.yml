name: Main

on:
  push:
    branches: [main]

jobs:
  build-api-editor:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        java-version: [17]

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v2.5.0
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}
          cache: gradle

      # See https://docs.github.com/en/actions/guides/building-and-testing-java-with-gradle
      - name: Setup Gradle
        uses: gradle/wrapper-validation-action@v1

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload distribution
        uses: actions/upload-artifact@v2
        with:
          name: API-Editor
          path: server/build/libs/*-all.jar
          if-no-files-found: error

  build-package-parser:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./package_parser
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.0
        with:
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install library
        run: poetry install --no-interaction

      - name: Smoke test
        run: poetry run parse-package api -p sklearn -o out

      # Requires installation of pytest and pytest-cov
      - name: Test with pytest
        run: poetry run pytest --doctest-modules --cov=package_parser --cov-report=html

      - name: Upload test coverage
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: actions/upload-artifact@v2
        with:
          name: Test coverage
          path: package_parser/htmlcov
