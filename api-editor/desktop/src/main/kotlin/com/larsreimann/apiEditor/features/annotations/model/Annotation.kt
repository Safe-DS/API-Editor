package com.larsreimann.apiEditor.features.annotations.model

import com.larsreimann.apiEditor.features.api.ApiElementId
import com.larsreimann.apiEditor.features.users.model.Bots
import com.larsreimann.apiEditor.features.users.model.Username

sealed interface Annotation {
    val target: ApiElementId
    val author: Username?
    val editors: List<Username>
    val review: Review?
    val comment: String

    /**
     * Returns whether this annotation is autogenerated. If the author is not known, we assume the annotation was
     * created manually.
     */
    fun isAutogenerated() = author == Bots.Autogen

    /**
     * Returns whether someone has reviewed this annotation.
     */
    fun isReviewed() = review != null
}

// TODO
data class BoundaryAnnotation(
    override val target: ApiElementId,
    override val author: Username? = null,
    override val editors: List<Username> = emptyList(),
    override val review: Review? = null,
    override val comment: String = "",
) : Annotation

// TODO
data class CalledAfterAnnotation(
    override val target: ApiElementId,
    override val author: Username? = null,
    override val editors: List<Username> = emptyList(),
    override val review: Review? = null,
    override val comment: String = "",
) : Annotation

data class CompleteAnnotation(
    override val target: ApiElementId,
    override val author: Username? = null,
) : Annotation {
    override val editors: List<Username> = emptyList()
    override val review: Review? = null
    override val comment: String = ""
}

data class DescriptionAnnotation(
    override val target: ApiElementId,
    val newDescription: String,
    override val author: Username? = null,
    override val editors: List<Username> = emptyList(),
    override val review: Review? = null,
    override val comment: String = "",
) : Annotation

// TODO
data class EnumAnnotation(
    override val target: ApiElementId,
    override val author: Username? = null,
    override val editors: List<Username> = emptyList(),
    override val review: Review? = null,
    override val comment: String = "",
) : Annotation

// TODO
data class GroupAnnotation(
    override val target: ApiElementId,
    override val author: Username? = null,
    override val editors: List<Username> = emptyList(),
    override val review: Review? = null,
    override val comment: String = "",
) : Annotation

// TODO
data class MoveAnnotation(
    override val target: ApiElementId,
    override val author: Username? = null,
    override val editors: List<Username> = emptyList(),
    override val review: Review? = null,
    override val comment: String = "",
) : Annotation

data class PureAnnotation(
    override val target: ApiElementId,
    override val author: Username? = null,
    override val editors: List<Username> = emptyList(),
    override val review: Review? = null,
    override val comment: String = "",
) : Annotation

data class RemoveAnnotation(
    override val target: ApiElementId,
    override val author: Username? = null,
    override val editors: List<Username> = emptyList(),
    override val review: Review? = null,
    override val comment: String = "",
) : Annotation

data class RenameAnnotation(
    override val target: ApiElementId,
    val newName: String,
    override val author: Username? = null,
    override val editors: List<Username> = emptyList(),
    override val review: Review? = null,
    override val comment: String = "",
) : Annotation

data class TodoAnnotation(
    override val target: ApiElementId,
    val todo: String,
    override val author: Username? = null,
    override val editors: List<Username> = emptyList(),
    override val review: Review? = null,
    override val comment: String = "",
) : Annotation


// TODO
data class ValueAnnotation(
    override val target: ApiElementId,
    override val author: Username? = null,
    override val editors: List<Username> = emptyList(),
    override val review: Review? = null,
    override val comment: String = "",
) : Annotation
