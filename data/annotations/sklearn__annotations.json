{
    "constants": {
        "sklearn/sklearn._config/set_config/assume_finite": {
            "target": "sklearn/sklearn._config/set_config/assume_finite",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn._config/set_config/working_memory": {
            "target": "sklearn/sklearn._config/set_config/working_memory",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn._config/set_config/pairwise_dist_chunk_size": {
            "target": "sklearn/sklearn._config/set_config/pairwise_dist_chunk_size",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn._config/set_config/enable_cython_pairwise_dist": {
            "target": "sklearn/sklearn._config/set_config/enable_cython_pairwise_dist",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.base/ClassifierMixin/score/sample_weight": {
            "target": "sklearn/sklearn.base/ClassifierMixin/score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.base/ClusterMixin/fit_predict/y": {
            "target": "sklearn/sklearn.base/ClusterMixin/fit_predict/y",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.base/OutlierMixin/fit_predict/y": {
            "target": "sklearn/sklearn.base/OutlierMixin/fit_predict/y",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.base/clone/safe": {
            "target": "sklearn/sklearn.base/clone/safe",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.calibration/CalibratedClassifierCV/__init__/n_jobs": {
            "target": "sklearn/sklearn.calibration/CalibratedClassifierCV/__init__/n_jobs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.calibration/CalibratedClassifierCV/fit/sample_weight": {
            "target": "sklearn/sklearn.calibration/CalibratedClassifierCV/fit/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.calibration/calibration_curve/pos_label": {
            "target": "sklearn/sklearn.calibration/calibration_curve/pos_label",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.calibration/calibration_curve/strategy": {
            "target": "sklearn/sklearn.calibration/calibration_curve/strategy",
            "defaultType": "string",
            "defaultValue": "uniform"
        },
        "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/preference": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/preference",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/convergence_iter": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/convergence_iter",
            "defaultType": "number",
            "defaultValue": 15.0
        },
        "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/max_iter": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/max_iter",
            "defaultType": "number",
            "defaultValue": 200.0
        },
        "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/damping": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/damping",
            "defaultType": "number",
            "defaultValue": 0.5
        },
        "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/copy": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/copy",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/verbose": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/verbose",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/return_n_iter": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/return_n_iter",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/random_state": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/affinity_propagation/random_state",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.cluster._dbscan/dbscan/eps": {
            "target": "sklearn/sklearn.cluster._dbscan/dbscan/eps",
            "defaultType": "number",
            "defaultValue": 0.5
        },
        "sklearn/sklearn.cluster._dbscan/dbscan/min_samples": {
            "target": "sklearn/sklearn.cluster._dbscan/dbscan/min_samples",
            "defaultType": "number",
            "defaultValue": 5.0
        },
        "sklearn/sklearn.cluster._dbscan/dbscan/metric": {
            "target": "sklearn/sklearn.cluster._dbscan/dbscan/metric",
            "defaultType": "string",
            "defaultValue": "minkowski"
        },
        "sklearn/sklearn.cluster._dbscan/dbscan/metric_params": {
            "target": "sklearn/sklearn.cluster._dbscan/dbscan/metric_params",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.cluster._dbscan/dbscan/algorithm": {
            "target": "sklearn/sklearn.cluster._dbscan/dbscan/algorithm",
            "defaultType": "string",
            "defaultValue": "auto"
        },
        "sklearn/sklearn.cluster._dbscan/dbscan/leaf_size": {
            "target": "sklearn/sklearn.cluster._dbscan/dbscan/leaf_size",
            "defaultType": "number",
            "defaultValue": 30.0
        },
        "sklearn/sklearn.cluster._dbscan/dbscan/p": {
            "target": "sklearn/sklearn.cluster._dbscan/dbscan/p",
            "defaultType": "number",
            "defaultValue": 2.0
        },
        "sklearn/sklearn.cluster._dbscan/dbscan/sample_weight": {
            "target": "sklearn/sklearn.cluster._dbscan/dbscan/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.cluster._dbscan/dbscan/n_jobs": {
            "target": "sklearn/sklearn.cluster._dbscan/dbscan/n_jobs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.cluster._kmeans/k_means/sample_weight": {
            "target": "sklearn/sklearn.cluster._kmeans/k_means/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.cluster._kmeans/k_means/init": {
            "target": "sklearn/sklearn.cluster._kmeans/k_means/init",
            "defaultType": "string",
            "defaultValue": "k-means++"
        },
        "sklearn/sklearn.cluster._kmeans/k_means/n_init": {
            "target": "sklearn/sklearn.cluster._kmeans/k_means/n_init",
            "defaultType": "string",
            "defaultValue": "warn"
        },
        "sklearn/sklearn.cluster._kmeans/k_means/verbose": {
            "target": "sklearn/sklearn.cluster._kmeans/k_means/verbose",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.cluster._kmeans/k_means/tol": {
            "target": "sklearn/sklearn.cluster._kmeans/k_means/tol",
            "defaultType": "number",
            "defaultValue": 0.0001
        },
        "sklearn/sklearn.cluster._kmeans/k_means/copy_x": {
            "target": "sklearn/sklearn.cluster._kmeans/k_means/copy_x",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.cluster._kmeans/k_means/algorithm": {
            "target": "sklearn/sklearn.cluster._kmeans/k_means/algorithm",
            "defaultType": "string",
            "defaultValue": "lloyd"
        },
        "sklearn/sklearn.cluster._kmeans/k_means/return_n_iter": {
            "target": "sklearn/sklearn.cluster._kmeans/k_means/return_n_iter",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.cluster._mean_shift/estimate_bandwidth/random_state": {
            "target": "sklearn/sklearn.cluster._mean_shift/estimate_bandwidth/random_state",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.cluster._mean_shift/estimate_bandwidth/n_jobs": {
            "target": "sklearn/sklearn.cluster._mean_shift/estimate_bandwidth/n_jobs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.compose._column_transformer/make_column_transformer/sparse_threshold": {
            "target": "sklearn/sklearn.compose._column_transformer/make_column_transformer/sparse_threshold",
            "defaultType": "number",
            "defaultValue": 0.3
        },
        "sklearn/sklearn.compose._column_transformer/make_column_transformer/n_jobs": {
            "target": "sklearn/sklearn.compose._column_transformer/make_column_transformer/n_jobs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.compose._column_transformer/make_column_transformer/verbose": {
            "target": "sklearn/sklearn.compose._column_transformer/make_column_transformer/verbose",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.compose._column_transformer/make_column_transformer/verbose_feature_names_out": {
            "target": "sklearn/sklearn.compose._column_transformer/make_column_transformer/verbose_feature_names_out",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.covariance._shrunk_covariance/ledoit_wolf/assume_centered": {
            "target": "sklearn/sklearn.covariance._shrunk_covariance/ledoit_wolf/assume_centered",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.covariance._shrunk_covariance/ledoit_wolf/block_size": {
            "target": "sklearn/sklearn.covariance._shrunk_covariance/ledoit_wolf/block_size",
            "defaultType": "number",
            "defaultValue": 1000.0
        },
        "sklearn/sklearn.datasets._base/load_breast_cancer/as_frame": {
            "target": "sklearn/sklearn.datasets._base/load_breast_cancer/as_frame",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._base/load_diabetes/return_X_y": {
            "target": "sklearn/sklearn.datasets._base/load_diabetes/return_X_y",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._base/load_diabetes/as_frame": {
            "target": "sklearn/sklearn.datasets._base/load_diabetes/as_frame",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._base/load_diabetes/scaled": {
            "target": "sklearn/sklearn.datasets._base/load_diabetes/scaled",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._base/load_digits/n_class": {
            "target": "sklearn/sklearn.datasets._base/load_digits/n_class",
            "defaultType": "number",
            "defaultValue": 10.0
        },
        "sklearn/sklearn.datasets._base/load_digits/as_frame": {
            "target": "sklearn/sklearn.datasets._base/load_digits/as_frame",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._base/load_files/description": {
            "target": "sklearn/sklearn.datasets._base/load_files/description",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.datasets._base/load_files/categories": {
            "target": "sklearn/sklearn.datasets._base/load_files/categories",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.datasets._base/load_files/load_content": {
            "target": "sklearn/sklearn.datasets._base/load_files/load_content",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._base/load_files/shuffle": {
            "target": "sklearn/sklearn.datasets._base/load_files/shuffle",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._base/load_files/decode_error": {
            "target": "sklearn/sklearn.datasets._base/load_files/decode_error",
            "defaultType": "string",
            "defaultValue": "strict"
        },
        "sklearn/sklearn.datasets._base/load_files/random_state": {
            "target": "sklearn/sklearn.datasets._base/load_files/random_state",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.datasets._base/load_files/allowed_extensions": {
            "target": "sklearn/sklearn.datasets._base/load_files/allowed_extensions",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.datasets._base/load_iris/as_frame": {
            "target": "sklearn/sklearn.datasets._base/load_iris/as_frame",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._base/load_sample_image/image_name": {
            "target": "sklearn/sklearn.datasets._base/load_sample_image/image_name",
            "defaultType": "string",
            "defaultValue": "flower.jpg"
        },
        "sklearn/sklearn.datasets._base/load_wine/return_X_y": {
            "target": "sklearn/sklearn.datasets._base/load_wine/return_X_y",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._base/load_wine/as_frame": {
            "target": "sklearn/sklearn.datasets._base/load_wine/as_frame",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._openml/fetch_openml/name": {
            "target": "sklearn/sklearn.datasets._openml/fetch_openml/name",
            "defaultType": "string",
            "defaultValue": "mnist_784"
        },
        "sklearn/sklearn.datasets._openml/fetch_openml/data_id": {
            "target": "sklearn/sklearn.datasets._openml/fetch_openml/data_id",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.datasets._openml/fetch_openml/data_home": {
            "target": "sklearn/sklearn.datasets._openml/fetch_openml/data_home",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.datasets._openml/fetch_openml/target_column": {
            "target": "sklearn/sklearn.datasets._openml/fetch_openml/target_column",
            "defaultType": "string",
            "defaultValue": "default-target"
        },
        "sklearn/sklearn.datasets._openml/fetch_openml/cache": {
            "target": "sklearn/sklearn.datasets._openml/fetch_openml/cache",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._openml/fetch_openml/return_X_y": {
            "target": "sklearn/sklearn.datasets._openml/fetch_openml/return_X_y",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._openml/fetch_openml/n_retries": {
            "target": "sklearn/sklearn.datasets._openml/fetch_openml/n_retries",
            "defaultType": "number",
            "defaultValue": 3.0
        },
        "sklearn/sklearn.datasets._openml/fetch_openml/delay": {
            "target": "sklearn/sklearn.datasets._openml/fetch_openml/delay",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.datasets._openml/fetch_openml/parser": {
            "target": "sklearn/sklearn.datasets._openml/fetch_openml/parser",
            "defaultType": "string",
            "defaultValue": "warn"
        },
        "sklearn/sklearn.datasets._samples_generator/make_blobs/shuffle": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_blobs/shuffle",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._samples_generator/make_blobs/return_centers": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_blobs/return_centers",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._samples_generator/make_circles/shuffle": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_circles/shuffle",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._samples_generator/make_classification/hypercube": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_classification/hypercube",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._samples_generator/make_classification/shift": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_classification/shift",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.datasets._samples_generator/make_classification/scale": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_classification/scale",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.datasets._samples_generator/make_moons/shuffle": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_moons/shuffle",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/n_samples": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/n_samples",
            "defaultType": "number",
            "defaultValue": 10000.0
        },
        "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/n_features": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/n_features",
            "defaultType": "number",
            "defaultValue": 20.0
        },
        "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/n_classes": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/n_classes",
            "defaultType": "number",
            "defaultValue": 5.0
        },
        "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/n_labels": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/n_labels",
            "defaultType": "number",
            "defaultValue": 2.0
        },
        "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/length": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/length",
            "defaultType": "number",
            "defaultValue": 50.0
        },
        "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/allow_unlabeled": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/allow_unlabeled",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/sparse": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/sparse",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/return_indicator": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/return_indicator",
            "defaultType": "string",
            "defaultValue": "dense"
        },
        "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/return_distributions": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/return_distributions",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/random_state": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_multilabel_classification/random_state",
            "defaultType": "number",
            "defaultValue": 88.0
        },
        "sklearn/sklearn.datasets._samples_generator/make_regression/n_informative": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_regression/n_informative",
            "defaultType": "number",
            "defaultValue": 10.0
        },
        "sklearn/sklearn.datasets._samples_generator/make_regression/n_targets": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_regression/n_targets",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.datasets._samples_generator/make_regression/effective_rank": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_regression/effective_rank",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.datasets._samples_generator/make_regression/tail_strength": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_regression/tail_strength",
            "defaultType": "number",
            "defaultValue": 0.5
        },
        "sklearn/sklearn.datasets._samples_generator/make_regression/shuffle": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_regression/shuffle",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._samples_generator/make_regression/coef": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_regression/coef",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/comment": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/comment",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/query_id": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/query_id",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/multilabel": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/multilabel",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/n_features": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/n_features",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/multilabel": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/multilabel",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/zero_based": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/zero_based",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/query_id": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/query_id",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/offset": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/offset",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/length": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_file/length",
            "defaultType": "number",
            "defaultValue": -1.0
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/data_home": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/data_home",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/categories": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/categories",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/shuffle": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/shuffle",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/random_state": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/random_state",
            "defaultType": "number",
            "defaultValue": 42.0
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/download_if_missing": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/download_if_missing",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/return_X_y": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/return_X_y",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/__init__/priors": {
            "target": "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/__init__/priors",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/__init__/store_covariance": {
            "target": "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/__init__/store_covariance",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/__init__/covariance_estimator": {
            "target": "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/__init__/covariance_estimator",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.dummy/DummyClassifier/fit/sample_weight": {
            "target": "sklearn/sklearn.dummy/DummyClassifier/fit/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.dummy/DummyClassifier/score/sample_weight": {
            "target": "sklearn/sklearn.dummy/DummyClassifier/score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.dummy/DummyRegressor/__init__/quantile": {
            "target": "sklearn/sklearn.dummy/DummyRegressor/__init__/quantile",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.dummy/DummyRegressor/fit/sample_weight": {
            "target": "sklearn/sklearn.dummy/DummyRegressor/fit/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.dummy/DummyRegressor/predict/return_std": {
            "target": "sklearn/sklearn.dummy/DummyRegressor/predict/return_std",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.dummy/DummyRegressor/score/sample_weight": {
            "target": "sklearn/sklearn.dummy/DummyRegressor/score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.feature_extraction.image/PatchExtractor/__init__/random_state": {
            "target": "sklearn/sklearn.feature_extraction.image/PatchExtractor/__init__/random_state",
            "defaultType": "number",
            "defaultValue": 2016.0
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/input": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/input",
            "defaultType": "string",
            "defaultValue": "content"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/encoding": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/encoding",
            "defaultType": "string",
            "defaultValue": "utf-8"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/fit/y": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/fit/y",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/fit_transform/y": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/fit_transform/y",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.feature_extraction.text/TfidfTransformer/fit/y": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfTransformer/fit/y",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/input": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/input",
            "defaultType": "string",
            "defaultValue": "content"
        },
        "sklearn/sklearn.feature_selection._mutual_info/mutual_info_classif/n_neighbors": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/mutual_info_classif/n_neighbors",
            "defaultType": "number",
            "defaultValue": 3.0
        },
        "sklearn/sklearn.feature_selection._mutual_info/mutual_info_classif/copy": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/mutual_info_classif/copy",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.feature_selection._mutual_info/mutual_info_regression/copy": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/mutual_info_regression/copy",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.feature_selection._univariate_selection/f_regression/center": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/f_regression/center",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.feature_selection._univariate_selection/f_regression/force_finite": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/f_regression/force_finite",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.gaussian_process.kernels/ConstantKernel/__init__/constant_value": {
            "target": "sklearn/sklearn.gaussian_process.kernels/ConstantKernel/__init__/constant_value",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.gaussian_process.kernels/DotProduct/__init__/sigma_0": {
            "target": "sklearn/sklearn.gaussian_process.kernels/DotProduct/__init__/sigma_0",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.gaussian_process.kernels/Matern/__init__/length_scale": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Matern/__init__/length_scale",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.gaussian_process.kernels/Matern/__init__/nu": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Matern/__init__/nu",
            "defaultType": "number",
            "defaultValue": 1.5
        },
        "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/__init__/length_scale": {
            "target": "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/__init__/length_scale",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/__init__/alpha": {
            "target": "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/__init__/alpha",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.inspection._partial_dependence/partial_dependence/response_method": {
            "target": "sklearn/sklearn.inspection._partial_dependence/partial_dependence/response_method",
            "defaultType": "string",
            "defaultValue": "auto"
        },
        "sklearn/sklearn.inspection._partial_dependence/partial_dependence/grid_resolution": {
            "target": "sklearn/sklearn.inspection._partial_dependence/partial_dependence/grid_resolution",
            "defaultType": "number",
            "defaultValue": 50.0
        },
        "sklearn/sklearn.inspection._partial_dependence/partial_dependence/method": {
            "target": "sklearn/sklearn.inspection._partial_dependence/partial_dependence/method",
            "defaultType": "string",
            "defaultValue": "auto"
        },
        "sklearn/sklearn.inspection._partial_dependence/partial_dependence/kind": {
            "target": "sklearn/sklearn.inspection._partial_dependence/partial_dependence/kind",
            "defaultType": "string",
            "defaultValue": "average"
        },
        "sklearn/sklearn.inspection._permutation_importance/permutation_importance/sample_weight": {
            "target": "sklearn/sklearn.inspection._permutation_importance/permutation_importance/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.inspection._permutation_importance/permutation_importance/max_samples": {
            "target": "sklearn/sklearn.inspection._permutation_importance/permutation_importance/max_samples",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/feature_names": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/feature_names",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/response_method": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/response_method",
            "defaultType": "string",
            "defaultValue": "auto"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/n_cols": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/n_cols",
            "defaultType": "number",
            "defaultValue": 3.0
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/method": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/method",
            "defaultType": "string",
            "defaultValue": "auto"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/n_jobs": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/n_jobs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/verbose": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/verbose",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/line_kw": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/line_kw",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/ice_lines_kw": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/ice_lines_kw",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/pd_line_kw": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/pd_line_kw",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/contour_kw": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/contour_kw",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/kind": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/kind",
            "defaultType": "string",
            "defaultValue": "average"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/subsample": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/subsample",
            "defaultType": "number",
            "defaultValue": 1000.0
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/random_state": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/random_state",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/centered": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/centered",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.isotonic/IsotonicRegression/__init__/increasing": {
            "target": "sklearn/sklearn.isotonic/IsotonicRegression/__init__/increasing",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.isotonic/IsotonicRegression/fit/sample_weight": {
            "target": "sklearn/sklearn.isotonic/IsotonicRegression/fit/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.kernel_approximation/Nystroem/__init__/kernel": {
            "target": "sklearn/sklearn.kernel_approximation/Nystroem/__init__/kernel",
            "defaultType": "string",
            "defaultValue": "rbf"
        },
        "sklearn/sklearn.kernel_approximation/Nystroem/__init__/gamma": {
            "target": "sklearn/sklearn.kernel_approximation/Nystroem/__init__/gamma",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.kernel_approximation/Nystroem/__init__/coef0": {
            "target": "sklearn/sklearn.kernel_approximation/Nystroem/__init__/coef0",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.kernel_approximation/Nystroem/__init__/degree": {
            "target": "sklearn/sklearn.kernel_approximation/Nystroem/__init__/degree",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.kernel_approximation/Nystroem/__init__/kernel_params": {
            "target": "sklearn/sklearn.kernel_approximation/Nystroem/__init__/kernel_params",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.kernel_approximation/Nystroem/__init__/n_components": {
            "target": "sklearn/sklearn.kernel_approximation/Nystroem/__init__/n_components",
            "defaultType": "number",
            "defaultValue": 100.0
        },
        "sklearn/sklearn.kernel_approximation/Nystroem/__init__/n_jobs": {
            "target": "sklearn/sklearn.kernel_approximation/Nystroem/__init__/n_jobs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.kernel_approximation/RBFSampler/__init__/n_components": {
            "target": "sklearn/sklearn.kernel_approximation/RBFSampler/__init__/n_components",
            "defaultType": "number",
            "defaultValue": 100.0
        },
        "sklearn/sklearn.kernel_ridge/KernelRidge/__init__/kernel_params": {
            "target": "sklearn/sklearn.kernel_ridge/KernelRidge/__init__/kernel_params",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.kernel_ridge/KernelRidge/fit/sample_weight": {
            "target": "sklearn/sklearn.kernel_ridge/KernelRidge/fit/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.manifold._mds/smacof/metric": {
            "target": "sklearn/sklearn.manifold._mds/smacof/metric",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.manifold._mds/smacof/n_components": {
            "target": "sklearn/sklearn.manifold._mds/smacof/n_components",
            "defaultType": "number",
            "defaultValue": 2.0
        },
        "sklearn/sklearn.manifold._mds/smacof/init": {
            "target": "sklearn/sklearn.manifold._mds/smacof/init",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.manifold._mds/smacof/n_init": {
            "target": "sklearn/sklearn.manifold._mds/smacof/n_init",
            "defaultType": "number",
            "defaultValue": 8.0
        },
        "sklearn/sklearn.manifold._mds/smacof/n_jobs": {
            "target": "sklearn/sklearn.manifold._mds/smacof/n_jobs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.manifold._mds/smacof/max_iter": {
            "target": "sklearn/sklearn.manifold._mds/smacof/max_iter",
            "defaultType": "number",
            "defaultValue": 300.0
        },
        "sklearn/sklearn.manifold._mds/smacof/verbose": {
            "target": "sklearn/sklearn.manifold._mds/smacof/verbose",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.manifold._mds/smacof/eps": {
            "target": "sklearn/sklearn.manifold._mds/smacof/eps",
            "defaultType": "number",
            "defaultValue": 0.001
        },
        "sklearn/sklearn.manifold._mds/smacof/random_state": {
            "target": "sklearn/sklearn.manifold._mds/smacof/random_state",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.manifold._mds/smacof/return_n_iter": {
            "target": "sklearn/sklearn.manifold._mds/smacof/return_n_iter",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.metrics._classification/balanced_accuracy_score/adjusted": {
            "target": "sklearn/sklearn.metrics._classification/balanced_accuracy_score/adjusted",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.metrics._classification/brier_score_loss/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/brier_score_loss/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/classification_report/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/classification_report/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/f1_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/f1_score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/fbeta_score/labels": {
            "target": "sklearn/sklearn.metrics._classification/fbeta_score/labels",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/fbeta_score/pos_label": {
            "target": "sklearn/sklearn.metrics._classification/fbeta_score/pos_label",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.metrics._classification/fbeta_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/fbeta_score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/fbeta_score/zero_division": {
            "target": "sklearn/sklearn.metrics._classification/fbeta_score/zero_division",
            "defaultType": "string",
            "defaultValue": "warn"
        },
        "sklearn/sklearn.metrics._classification/hamming_loss/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/hamming_loss/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/hinge_loss/labels": {
            "target": "sklearn/sklearn.metrics._classification/hinge_loss/labels",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/hinge_loss/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/hinge_loss/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/jaccard_score/labels": {
            "target": "sklearn/sklearn.metrics._classification/jaccard_score/labels",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/jaccard_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/jaccard_score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/jaccard_score/zero_division": {
            "target": "sklearn/sklearn.metrics._classification/jaccard_score/zero_division",
            "defaultType": "string",
            "defaultValue": "warn"
        },
        "sklearn/sklearn.metrics._classification/matthews_corrcoef/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/matthews_corrcoef/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/multilabel_confusion_matrix/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/multilabel_confusion_matrix/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/multilabel_confusion_matrix/samplewise": {
            "target": "sklearn/sklearn.metrics._classification/multilabel_confusion_matrix/samplewise",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/pos_label": {
            "target": "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/pos_label",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/zero_division": {
            "target": "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/zero_division",
            "defaultType": "string",
            "defaultValue": "warn"
        },
        "sklearn/sklearn.metrics._classification/precision_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/precision_score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/recall_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/recall_score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._classification/zero_one_loss/normalize": {
            "target": "sklearn/sklearn.metrics._classification/zero_one_loss/normalize",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.metrics._classification/zero_one_loss/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/zero_one_loss/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/sample_weight": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/include_values": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/include_values",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/colorbar": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/colorbar",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/sample_weight": {
            "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/response_method": {
            "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/response_method",
            "defaultType": "string",
            "defaultValue": "auto"
        },
        "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/name": {
            "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/name",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/pos_label": {
            "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/pos_label",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/sample_weight": {
            "target": "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/response_method": {
            "target": "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/response_method",
            "defaultType": "string",
            "defaultValue": "auto"
        },
        "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/pos_label": {
            "target": "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/pos_label",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._ranking/average_precision_score/pos_label": {
            "target": "sklearn/sklearn.metrics._ranking/average_precision_score/pos_label",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.metrics._ranking/average_precision_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._ranking/average_precision_score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._ranking/ndcg_score/k": {
            "target": "sklearn/sklearn.metrics._ranking/ndcg_score/k",
            "defaultType": "number",
            "defaultValue": 5.0
        },
        "sklearn/sklearn.metrics._ranking/ndcg_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._ranking/ndcg_score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._ranking/ndcg_score/ignore_ties": {
            "target": "sklearn/sklearn.metrics._ranking/ndcg_score/ignore_ties",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.metrics._ranking/precision_recall_curve/sample_weight": {
            "target": "sklearn/sklearn.metrics._ranking/precision_recall_curve/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._ranking/roc_auc_score/max_fpr": {
            "target": "sklearn/sklearn.metrics._ranking/roc_auc_score/max_fpr",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._regression/explained_variance_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._regression/explained_variance_score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._regression/explained_variance_score/multioutput": {
            "target": "sklearn/sklearn.metrics._regression/explained_variance_score/multioutput",
            "defaultType": "string",
            "defaultValue": "uniform_average"
        },
        "sklearn/sklearn.metrics._regression/explained_variance_score/force_finite": {
            "target": "sklearn/sklearn.metrics._regression/explained_variance_score/force_finite",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.metrics._regression/mean_absolute_percentage_error/sample_weight": {
            "target": "sklearn/sklearn.metrics._regression/mean_absolute_percentage_error/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._regression/mean_absolute_percentage_error/multioutput": {
            "target": "sklearn/sklearn.metrics._regression/mean_absolute_percentage_error/multioutput",
            "defaultType": "string",
            "defaultValue": "uniform_average"
        },
        "sklearn/sklearn.metrics._regression/mean_squared_log_error/sample_weight": {
            "target": "sklearn/sklearn.metrics._regression/mean_squared_log_error/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._regression/mean_squared_log_error/multioutput": {
            "target": "sklearn/sklearn.metrics._regression/mean_squared_log_error/multioutput",
            "defaultType": "string",
            "defaultValue": "uniform_average"
        },
        "sklearn/sklearn.metrics._regression/mean_squared_log_error/squared": {
            "target": "sklearn/sklearn.metrics._regression/mean_squared_log_error/squared",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.metrics._regression/mean_tweedie_deviance/sample_weight": {
            "target": "sklearn/sklearn.metrics._regression/mean_tweedie_deviance/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._regression/median_absolute_error/multioutput": {
            "target": "sklearn/sklearn.metrics._regression/median_absolute_error/multioutput",
            "defaultType": "string",
            "defaultValue": "uniform_average"
        },
        "sklearn/sklearn.metrics._regression/median_absolute_error/sample_weight": {
            "target": "sklearn/sklearn.metrics._regression/median_absolute_error/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics._regression/r2_score/force_finite": {
            "target": "sklearn/sklearn.metrics._regression/r2_score/force_finite",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.metrics.cluster._supervised/adjusted_mutual_info_score/average_method": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/adjusted_mutual_info_score/average_method",
            "defaultType": "string",
            "defaultValue": "arithmetic"
        },
        "sklearn/sklearn.metrics.cluster._supervised/normalized_mutual_info_score/average_method": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/normalized_mutual_info_score/average_method",
            "defaultType": "string",
            "defaultValue": "arithmetic"
        },
        "sklearn/sklearn.metrics.cluster._supervised/v_measure_score/beta": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/v_measure_score/beta",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.metrics.cluster._unsupervised/silhouette_samples/metric": {
            "target": "sklearn/sklearn.metrics.cluster._unsupervised/silhouette_samples/metric",
            "defaultType": "string",
            "defaultValue": "euclidean"
        },
        "sklearn/sklearn.metrics.pairwise/cosine_distances/Y": {
            "target": "sklearn/sklearn.metrics.pairwise/cosine_distances/Y",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/cosine_similarity/dense_output": {
            "target": "sklearn/sklearn.metrics.pairwise/cosine_similarity/dense_output",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.metrics.pairwise/euclidean_distances/Y_norm_squared": {
            "target": "sklearn/sklearn.metrics.pairwise/euclidean_distances/Y_norm_squared",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/euclidean_distances/squared": {
            "target": "sklearn/sklearn.metrics.pairwise/euclidean_distances/squared",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.metrics.pairwise/euclidean_distances/X_norm_squared": {
            "target": "sklearn/sklearn.metrics.pairwise/euclidean_distances/X_norm_squared",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/linear_kernel/dense_output": {
            "target": "sklearn/sklearn.metrics.pairwise/linear_kernel/dense_output",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.metrics.pairwise/manhattan_distances/sum_over_features": {
            "target": "sklearn/sklearn.metrics.pairwise/manhattan_distances/sum_over_features",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.metrics.pairwise/paired_distances/metric": {
            "target": "sklearn/sklearn.metrics.pairwise/paired_distances/metric",
            "defaultType": "string",
            "defaultValue": "euclidean"
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances/force_all_finite": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances/force_all_finite",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin/axis": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin/axis",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin/metric": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin/metric",
            "defaultType": "string",
            "defaultValue": "euclidean"
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin/metric_kwargs": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin/metric_kwargs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin_min/axis": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin_min/axis",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin_min/metric": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin_min/metric",
            "defaultType": "string",
            "defaultValue": "euclidean"
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin_min/metric_kwargs": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_argmin_min/metric_kwargs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances_chunked/Y": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_chunked/Y",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances_chunked/metric": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_chunked/metric",
            "defaultType": "string",
            "defaultValue": "cosine"
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances_chunked/n_jobs": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_chunked/n_jobs",
            "defaultType": "number",
            "defaultValue": -1.0
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances_chunked/working_memory": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances_chunked/working_memory",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_kernels/Y": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_kernels/Y",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_kernels/metric": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_kernels/metric",
            "defaultType": "string",
            "defaultValue": "rbf"
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_kernels/filter_params": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_kernels/filter_params",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_kernels/n_jobs": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_kernels/n_jobs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/polynomial_kernel/degree": {
            "target": "sklearn/sklearn.metrics.pairwise/polynomial_kernel/degree",
            "defaultType": "number",
            "defaultValue": 3.0
        },
        "sklearn/sklearn.metrics.pairwise/polynomial_kernel/gamma": {
            "target": "sklearn/sklearn.metrics.pairwise/polynomial_kernel/gamma",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/polynomial_kernel/coef0": {
            "target": "sklearn/sklearn.metrics.pairwise/polynomial_kernel/coef0",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.metrics.pairwise/rbf_kernel/gamma": {
            "target": "sklearn/sklearn.metrics.pairwise/rbf_kernel/gamma",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/sigmoid_kernel/gamma": {
            "target": "sklearn/sklearn.metrics.pairwise/sigmoid_kernel/gamma",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.metrics.pairwise/sigmoid_kernel/coef0": {
            "target": "sklearn/sklearn.metrics.pairwise/sigmoid_kernel/coef0",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.model_selection._validation/cross_val_predict/pre_dispatch": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_predict/pre_dispatch",
            "defaultType": "string",
            "defaultValue": "2*n_jobs"
        },
        "sklearn/sklearn.model_selection._validation/cross_val_score/pre_dispatch": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_score/pre_dispatch",
            "defaultType": "string",
            "defaultValue": "2*n_jobs"
        },
        "sklearn/sklearn.model_selection._validation/cross_validate/pre_dispatch": {
            "target": "sklearn/sklearn.model_selection._validation/cross_validate/pre_dispatch",
            "defaultType": "string",
            "defaultValue": "2*n_jobs"
        },
        "sklearn/sklearn.model_selection._validation/learning_curve/groups": {
            "target": "sklearn/sklearn.model_selection._validation/learning_curve/groups",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.model_selection._validation/learning_curve/exploit_incremental_learning": {
            "target": "sklearn/sklearn.model_selection._validation/learning_curve/exploit_incremental_learning",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.model_selection._validation/learning_curve/pre_dispatch": {
            "target": "sklearn/sklearn.model_selection._validation/learning_curve/pre_dispatch",
            "defaultType": "string",
            "defaultValue": "all"
        },
        "sklearn/sklearn.model_selection._validation/validation_curve/groups": {
            "target": "sklearn/sklearn.model_selection._validation/validation_curve/groups",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.model_selection._validation/validation_curve/pre_dispatch": {
            "target": "sklearn/sklearn.model_selection._validation/validation_curve/pre_dispatch",
            "defaultType": "string",
            "defaultValue": "all"
        },
        "sklearn/sklearn.model_selection._validation/validation_curve/fit_params": {
            "target": "sklearn/sklearn.model_selection._validation/validation_curve/fit_params",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.multiclass/OneVsOneClassifier/__init__/n_jobs": {
            "target": "sklearn/sklearn.multiclass/OneVsOneClassifier/__init__/n_jobs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.multiclass/OneVsRestClassifier/__init__/verbose": {
            "target": "sklearn/sklearn.multiclass/OneVsRestClassifier/__init__/verbose",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.multioutput/MultiOutputClassifier/fit/sample_weight": {
            "target": "sklearn/sklearn.multioutput/MultiOutputClassifier/fit/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/__init__/fit_prior": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/__init__/fit_prior",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/__init__/class_prior": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/__init__/class_prior",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/__init__/min_categories": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/__init__/min_categories",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/fit/sample_weight": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/fit/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.naive_bayes/ComplementNB/__init__/fit_prior": {
            "target": "sklearn/sklearn.naive_bayes/ComplementNB/__init__/fit_prior",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.naive_bayes/ComplementNB/__init__/class_prior": {
            "target": "sklearn/sklearn.naive_bayes/ComplementNB/__init__/class_prior",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.naive_bayes/ComplementNB/__init__/norm": {
            "target": "sklearn/sklearn.naive_bayes/ComplementNB/__init__/norm",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.naive_bayes/GaussianNB/partial_fit/sample_weight": {
            "target": "sklearn/sklearn.naive_bayes/GaussianNB/partial_fit/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.neighbors._graph/kneighbors_graph/mode": {
            "target": "sklearn/sklearn.neighbors._graph/kneighbors_graph/mode",
            "defaultType": "string",
            "defaultValue": "connectivity"
        },
        "sklearn/sklearn.neighbors._graph/kneighbors_graph/metric": {
            "target": "sklearn/sklearn.neighbors._graph/kneighbors_graph/metric",
            "defaultType": "string",
            "defaultValue": "minkowski"
        },
        "sklearn/sklearn.neighbors._graph/kneighbors_graph/p": {
            "target": "sklearn/sklearn.neighbors._graph/kneighbors_graph/p",
            "defaultType": "number",
            "defaultValue": 2.0
        },
        "sklearn/sklearn.neighbors._graph/kneighbors_graph/metric_params": {
            "target": "sklearn/sklearn.neighbors._graph/kneighbors_graph/metric_params",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.neighbors._graph/kneighbors_graph/include_self": {
            "target": "sklearn/sklearn.neighbors._graph/kneighbors_graph/include_self",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.neighbors._graph/kneighbors_graph/n_jobs": {
            "target": "sklearn/sklearn.neighbors._graph/kneighbors_graph/n_jobs",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.pipeline/Pipeline/get_params/deep": {
            "target": "sklearn/sklearn.pipeline/Pipeline/get_params/deep",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.pipeline/Pipeline/score/sample_weight": {
            "target": "sklearn/sklearn.pipeline/Pipeline/score/sample_weight",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.pipeline/make_pipeline/memory": {
            "target": "sklearn/sklearn.pipeline/make_pipeline/memory",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.pipeline/make_union/verbose": {
            "target": "sklearn/sklearn.pipeline/make_union/verbose",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.preprocessing._data/binarize/copy": {
            "target": "sklearn/sklearn.preprocessing._data/binarize/copy",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.preprocessing._data/maxabs_scale/axis": {
            "target": "sklearn/sklearn.preprocessing._data/maxabs_scale/axis",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.preprocessing._data/maxabs_scale/copy": {
            "target": "sklearn/sklearn.preprocessing._data/maxabs_scale/copy",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.preprocessing._data/power_transform/method": {
            "target": "sklearn/sklearn.preprocessing._data/power_transform/method",
            "defaultType": "string",
            "defaultValue": "yeo-johnson"
        },
        "sklearn/sklearn.preprocessing._data/power_transform/standardize": {
            "target": "sklearn/sklearn.preprocessing._data/power_transform/standardize",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.preprocessing._data/power_transform/copy": {
            "target": "sklearn/sklearn.preprocessing._data/power_transform/copy",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.preprocessing._data/quantile_transform/axis": {
            "target": "sklearn/sklearn.preprocessing._data/quantile_transform/axis",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.preprocessing._data/quantile_transform/ignore_implicit_zeros": {
            "target": "sklearn/sklearn.preprocessing._data/quantile_transform/ignore_implicit_zeros",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.preprocessing._data/quantile_transform/copy": {
            "target": "sklearn/sklearn.preprocessing._data/quantile_transform/copy",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.preprocessing._data/robust_scale/axis": {
            "target": "sklearn/sklearn.preprocessing._data/robust_scale/axis",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.preprocessing._data/robust_scale/with_centering": {
            "target": "sklearn/sklearn.preprocessing._data/robust_scale/with_centering",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.preprocessing._data/robust_scale/with_scaling": {
            "target": "sklearn/sklearn.preprocessing._data/robust_scale/with_scaling",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.preprocessing._data/robust_scale/copy": {
            "target": "sklearn/sklearn.preprocessing._data/robust_scale/copy",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.preprocessing._data/robust_scale/unit_variance": {
            "target": "sklearn/sklearn.preprocessing._data/robust_scale/unit_variance",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.preprocessing._data/scale/copy": {
            "target": "sklearn/sklearn.preprocessing._data/scale/copy",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.preprocessing._label/label_binarize/neg_label": {
            "target": "sklearn/sklearn.preprocessing._label/label_binarize/neg_label",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.preprocessing._label/label_binarize/pos_label": {
            "target": "sklearn/sklearn.preprocessing._label/label_binarize/pos_label",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.preprocessing._label/label_binarize/sparse_output": {
            "target": "sklearn/sklearn.preprocessing._label/label_binarize/sparse_output",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.random_projection/BaseRandomProjection/fit/y": {
            "target": "sklearn/sklearn.random_projection/BaseRandomProjection/fit/y",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.random_projection/GaussianRandomProjection/__init__/compute_inverse_components": {
            "target": "sklearn/sklearn.random_projection/GaussianRandomProjection/__init__/compute_inverse_components",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.random_projection/SparseRandomProjection/__init__/density": {
            "target": "sklearn/sklearn.random_projection/SparseRandomProjection/__init__/density",
            "defaultType": "string",
            "defaultValue": "auto"
        },
        "sklearn/sklearn.random_projection/SparseRandomProjection/__init__/compute_inverse_components": {
            "target": "sklearn/sklearn.random_projection/SparseRandomProjection/__init__/compute_inverse_components",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.tree._export/export_graphviz/label": {
            "target": "sklearn/sklearn.tree._export/export_graphviz/label",
            "defaultType": "string",
            "defaultValue": "all"
        },
        "sklearn/sklearn.tree._export/export_graphviz/leaves_parallel": {
            "target": "sklearn/sklearn.tree._export/export_graphviz/leaves_parallel",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.tree._export/export_graphviz/fontname": {
            "target": "sklearn/sklearn.tree._export/export_graphviz/fontname",
            "defaultType": "string",
            "defaultValue": "helvetica"
        },
        "sklearn/sklearn.tree._export/export_text/max_depth": {
            "target": "sklearn/sklearn.tree._export/export_text/max_depth",
            "defaultType": "number",
            "defaultValue": 10.0
        },
        "sklearn/sklearn.tree._export/export_text/spacing": {
            "target": "sklearn/sklearn.tree._export/export_text/spacing",
            "defaultType": "number",
            "defaultValue": 3.0
        },
        "sklearn/sklearn.tree._export/export_text/decimals": {
            "target": "sklearn/sklearn.tree._export/export_text/decimals",
            "defaultType": "number",
            "defaultValue": 2.0
        },
        "sklearn/sklearn.tree._export/export_text/show_weights": {
            "target": "sklearn/sklearn.tree._export/export_text/show_weights",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.tree._export/plot_tree/impurity": {
            "target": "sklearn/sklearn.tree._export/plot_tree/impurity",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.tree._export/plot_tree/node_ids": {
            "target": "sklearn/sklearn.tree._export/plot_tree/node_ids",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.tree._export/plot_tree/precision": {
            "target": "sklearn/sklearn.tree._export/plot_tree/precision",
            "defaultType": "number",
            "defaultValue": 3.0
        },
        "sklearn/sklearn.utils.class_weight/compute_class_weight/class_weight": {
            "target": "sklearn/sklearn.utils.class_weight/compute_class_weight/class_weight",
            "defaultType": "string",
            "defaultValue": "balanced"
        },
        "sklearn/sklearn.utils.class_weight/compute_sample_weight/class_weight": {
            "target": "sklearn/sklearn.utils.class_weight/compute_sample_weight/class_weight",
            "defaultType": "string",
            "defaultValue": "balanced"
        },
        "sklearn/sklearn.utils.class_weight/compute_sample_weight/indices": {
            "target": "sklearn/sklearn.utils.class_weight/compute_sample_weight/indices",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimator/generate_only": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimator/generate_only",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimator/Estimator": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimator/Estimator",
            "defaultType": "string",
            "defaultValue": "deprecated"
        },
        "sklearn/sklearn.utils.extmath/cartesian/out": {
            "target": "sklearn/sklearn.utils.extmath/cartesian/out",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.utils.extmath/safe_sparse_dot/dense_output": {
            "target": "sklearn/sklearn.utils.extmath/safe_sparse_dot/dense_output",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.utils.extmath/weighted_mode/axis": {
            "target": "sklearn/sklearn.utils.extmath/weighted_mode/axis",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.utils.metaestimators/if_delegate_has_method/delegate": {
            "target": "sklearn/sklearn.utils.metaestimators/if_delegate_has_method/delegate",
            "defaultType": "string",
            "defaultValue": "estimator"
        },
        "sklearn/sklearn.utils.multiclass/type_of_target/input_name": {
            "target": "sklearn/sklearn.utils.multiclass/type_of_target/input_name",
            "defaultType": "string",
            "defaultValue": ""
        },
        "sklearn/sklearn.utils.validation/check_X_y/accept_large_sparse": {
            "target": "sklearn/sklearn.utils.validation/check_X_y/accept_large_sparse",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.utils.validation/check_X_y/dtype": {
            "target": "sklearn/sklearn.utils.validation/check_X_y/dtype",
            "defaultType": "string",
            "defaultValue": "numeric"
        },
        "sklearn/sklearn.utils.validation/check_X_y/order": {
            "target": "sklearn/sklearn.utils.validation/check_X_y/order",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.utils.validation/check_X_y/copy": {
            "target": "sklearn/sklearn.utils.validation/check_X_y/copy",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.utils.validation/check_X_y/ensure_2d": {
            "target": "sklearn/sklearn.utils.validation/check_X_y/ensure_2d",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.utils.validation/check_X_y/allow_nd": {
            "target": "sklearn/sklearn.utils.validation/check_X_y/allow_nd",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.utils.validation/check_X_y/multi_output": {
            "target": "sklearn/sklearn.utils.validation/check_X_y/multi_output",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.utils.validation/check_X_y/ensure_min_samples": {
            "target": "sklearn/sklearn.utils.validation/check_X_y/ensure_min_samples",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.utils.validation/check_X_y/ensure_min_features": {
            "target": "sklearn/sklearn.utils.validation/check_X_y/ensure_min_features",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.utils.validation/check_X_y/estimator": {
            "target": "sklearn/sklearn.utils.validation/check_X_y/estimator",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.utils.validation/check_array/accept_large_sparse": {
            "target": "sklearn/sklearn.utils.validation/check_array/accept_large_sparse",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.utils.validation/check_array/order": {
            "target": "sklearn/sklearn.utils.validation/check_array/order",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.utils.validation/check_array/allow_nd": {
            "target": "sklearn/sklearn.utils.validation/check_array/allow_nd",
            "defaultType": "boolean",
            "defaultValue": false
        },
        "sklearn/sklearn.utils.validation/check_array/ensure_min_samples": {
            "target": "sklearn/sklearn.utils.validation/check_array/ensure_min_samples",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.utils.validation/check_array/ensure_min_features": {
            "target": "sklearn/sklearn.utils.validation/check_array/ensure_min_features",
            "defaultType": "number",
            "defaultValue": 1.0
        },
        "sklearn/sklearn.utils.validation/check_array/input_name": {
            "target": "sklearn/sklearn.utils.validation/check_array/input_name",
            "defaultType": "string",
            "defaultValue": ""
        },
        "sklearn/sklearn.utils.validation/check_is_fitted/msg": {
            "target": "sklearn/sklearn.utils.validation/check_is_fitted/msg",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.utils/all_estimators/type_filter": {
            "target": "sklearn/sklearn.utils/all_estimators/type_filter",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.utils/resample/stratify": {
            "target": "sklearn/sklearn.utils/resample/stratify",
            "defaultType": "none",
            "defaultValue": null
        },
        "sklearn/sklearn.utils/safe_sqr/copy": {
            "target": "sklearn/sklearn.utils/safe_sqr/copy",
            "defaultType": "boolean",
            "defaultValue": true
        }
    },
    "removes": {
        "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel": {
            "target": "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel"
        },
        "sklearn/sklearn._loss.glm_distribution/GammaDistribution": {
            "target": "sklearn/sklearn._loss.glm_distribution/GammaDistribution"
        },
        "sklearn/sklearn._loss.glm_distribution/InverseGaussianDistribution": {
            "target": "sklearn/sklearn._loss.glm_distribution/InverseGaussianDistribution"
        },
        "sklearn/sklearn._loss.glm_distribution/NormalDistribution": {
            "target": "sklearn/sklearn._loss.glm_distribution/NormalDistribution"
        },
        "sklearn/sklearn._loss.glm_distribution/PoissonDistribution": {
            "target": "sklearn/sklearn._loss.glm_distribution/PoissonDistribution"
        },
        "sklearn/sklearn._loss.glm_distribution/TweedieDistribution": {
            "target": "sklearn/sklearn._loss.glm_distribution/TweedieDistribution"
        },
        "sklearn/sklearn._loss.link/BaseLink": {
            "target": "sklearn/sklearn._loss.link/BaseLink"
        },
        "sklearn/sklearn._loss.link/IdentityLink": {
            "target": "sklearn/sklearn._loss.link/IdentityLink"
        },
        "sklearn/sklearn._loss.link/Interval": {
            "target": "sklearn/sklearn._loss.link/Interval"
        },
        "sklearn/sklearn._loss.link/LogLink": {
            "target": "sklearn/sklearn._loss.link/LogLink"
        },
        "sklearn/sklearn._loss.link/LogitLink": {
            "target": "sklearn/sklearn._loss.link/LogitLink"
        },
        "sklearn/sklearn._loss.link/MultinomialLogit": {
            "target": "sklearn/sklearn._loss.link/MultinomialLogit"
        },
        "sklearn/sklearn._loss.loss/AbsoluteError": {
            "target": "sklearn/sklearn._loss.loss/AbsoluteError"
        },
        "sklearn/sklearn._loss.loss/BaseLoss": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss"
        },
        "sklearn/sklearn._loss.loss/HalfBinomialLoss": {
            "target": "sklearn/sklearn._loss.loss/HalfBinomialLoss"
        },
        "sklearn/sklearn._loss.loss/HalfGammaLoss": {
            "target": "sklearn/sklearn._loss.loss/HalfGammaLoss"
        },
        "sklearn/sklearn._loss.loss/HalfMultinomialLoss": {
            "target": "sklearn/sklearn._loss.loss/HalfMultinomialLoss"
        },
        "sklearn/sklearn._loss.loss/HalfPoissonLoss": {
            "target": "sklearn/sklearn._loss.loss/HalfPoissonLoss"
        },
        "sklearn/sklearn._loss.loss/HalfSquaredError": {
            "target": "sklearn/sklearn._loss.loss/HalfSquaredError"
        },
        "sklearn/sklearn._loss.loss/HalfTweedieLoss": {
            "target": "sklearn/sklearn._loss.loss/HalfTweedieLoss"
        },
        "sklearn/sklearn._loss.loss/HalfTweedieLossIdentity": {
            "target": "sklearn/sklearn._loss.loss/HalfTweedieLossIdentity"
        },
        "sklearn/sklearn._loss.loss/PinballLoss": {
            "target": "sklearn/sklearn._loss.loss/PinballLoss"
        },
        "sklearn/sklearn.base/BiclusterMixin": {
            "target": "sklearn/sklearn.base/BiclusterMixin"
        },
        "sklearn/sklearn.base/DensityMixin": {
            "target": "sklearn/sklearn.base/DensityMixin"
        },
        "sklearn/sklearn.base/MetaEstimatorMixin": {
            "target": "sklearn/sklearn.base/MetaEstimatorMixin"
        },
        "sklearn/sklearn.base/MultiOutputMixin": {
            "target": "sklearn/sklearn.base/MultiOutputMixin"
        },
        "sklearn/sklearn.base/_ClassNamePrefixFeaturesOutMixin": {
            "target": "sklearn/sklearn.base/_ClassNamePrefixFeaturesOutMixin"
        },
        "sklearn/sklearn.base/_OneToOneFeatureMixin": {
            "target": "sklearn/sklearn.base/_OneToOneFeatureMixin"
        },
        "sklearn/sklearn.base/_UnstableArchMixin": {
            "target": "sklearn/sklearn.base/_UnstableArchMixin"
        },
        "sklearn/sklearn.calibration/CalibrationDisplay": {
            "target": "sklearn/sklearn.calibration/CalibrationDisplay"
        },
        "sklearn/sklearn.calibration/_CalibratedClassifier": {
            "target": "sklearn/sklearn.calibration/_CalibratedClassifier"
        },
        "sklearn/sklearn.calibration/_SigmoidCalibration": {
            "target": "sklearn/sklearn.calibration/_SigmoidCalibration"
        },
        "sklearn/sklearn.cluster._bicluster/BaseSpectral": {
            "target": "sklearn/sklearn.cluster._bicluster/BaseSpectral"
        },
        "sklearn/sklearn.cluster._bicluster/SpectralBiclustering": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering"
        },
        "sklearn/sklearn.cluster._bicluster/SpectralCoclustering": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralCoclustering"
        },
        "sklearn/sklearn.cluster._birch/_CFNode": {
            "target": "sklearn/sklearn.cluster._birch/_CFNode"
        },
        "sklearn/sklearn.cluster._birch/_CFSubcluster": {
            "target": "sklearn/sklearn.cluster._birch/_CFSubcluster"
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans"
        },
        "sklearn/sklearn.cluster._bisect_k_means/_BisectingTree": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/_BisectingTree"
        },
        "sklearn/sklearn.cluster._feature_agglomeration/AgglomerationTransform": {
            "target": "sklearn/sklearn.cluster._feature_agglomeration/AgglomerationTransform"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans"
        },
        "sklearn/sklearn.covariance._graph_lasso/_DictWithDeprecatedKeys": {
            "target": "sklearn/sklearn.covariance._graph_lasso/_DictWithDeprecatedKeys"
        },
        "sklearn/sklearn.cross_decomposition._pls/PLSCanonical": {
            "target": "sklearn/sklearn.cross_decomposition._pls/PLSCanonical"
        },
        "sklearn/sklearn.cross_decomposition._pls/_PLS": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_PLS"
        },
        "sklearn/sklearn.datasets._openml/OpenMLError": {
            "target": "sklearn/sklearn.datasets._openml/OpenMLError"
        },
        "sklearn/sklearn.decomposition._base/_BasePCA": {
            "target": "sklearn/sklearn.decomposition._base/_BasePCA"
        },
        "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning": {
            "target": "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning"
        },
        "sklearn/sklearn.decomposition._dict_learning/SparseCoder": {
            "target": "sklearn/sklearn.decomposition._dict_learning/SparseCoder"
        },
        "sklearn/sklearn.decomposition._dict_learning/_BaseSparseCoding": {
            "target": "sklearn/sklearn.decomposition._dict_learning/_BaseSparseCoding"
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF"
        },
        "sklearn/sklearn.decomposition._sparse_pca/MiniBatchSparsePCA": {
            "target": "sklearn/sklearn.decomposition._sparse_pca/MiniBatchSparsePCA"
        },
        "sklearn/sklearn.ensemble._bagging/BaseBagging": {
            "target": "sklearn/sklearn.ensemble._bagging/BaseBagging"
        },
        "sklearn/sklearn.ensemble._base/BaseEnsemble": {
            "target": "sklearn/sklearn.ensemble._base/BaseEnsemble"
        },
        "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble": {
            "target": "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble"
        },
        "sklearn/sklearn.ensemble._forest/BaseForest": {
            "target": "sklearn/sklearn.ensemble._forest/BaseForest"
        },
        "sklearn/sklearn.ensemble._forest/ForestClassifier": {
            "target": "sklearn/sklearn.ensemble._forest/ForestClassifier"
        },
        "sklearn/sklearn.ensemble._forest/ForestRegressor": {
            "target": "sklearn/sklearn.ensemble._forest/ForestRegressor"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting"
        },
        "sklearn/sklearn.ensemble._gb/VerboseReporter": {
            "target": "sklearn/sklearn.ensemble._gb/VerboseReporter"
        },
        "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance": {
            "target": "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance"
        },
        "sklearn/sklearn.ensemble._gb_losses/ClassificationLossFunction": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ClassificationLossFunction"
        },
        "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss"
        },
        "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction": {
            "target": "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction"
        },
        "sklearn/sklearn.ensemble._gb_losses/LeastAbsoluteError": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LeastAbsoluteError"
        },
        "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError"
        },
        "sklearn/sklearn.ensemble._gb_losses/LossFunction": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LossFunction"
        },
        "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance": {
            "target": "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance"
        },
        "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction": {
            "target": "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction"
        },
        "sklearn/sklearn.ensemble._gb_losses/RegressionLossFunction": {
            "target": "sklearn/sklearn.ensemble._gb_losses/RegressionLossFunction"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeNode": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeNode"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor"
        },
        "sklearn/sklearn.ensemble._stacking/_BaseStacking": {
            "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking"
        },
        "sklearn/sklearn.ensemble._voting/_BaseVoting": {
            "target": "sklearn/sklearn.ensemble._voting/_BaseVoting"
        },
        "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting"
        },
        "sklearn/sklearn.exceptions/ConvergenceWarning": {
            "target": "sklearn/sklearn.exceptions/ConvergenceWarning"
        },
        "sklearn/sklearn.exceptions/DataConversionWarning": {
            "target": "sklearn/sklearn.exceptions/DataConversionWarning"
        },
        "sklearn/sklearn.exceptions/DataDimensionalityWarning": {
            "target": "sklearn/sklearn.exceptions/DataDimensionalityWarning"
        },
        "sklearn/sklearn.exceptions/EfficiencyWarning": {
            "target": "sklearn/sklearn.exceptions/EfficiencyWarning"
        },
        "sklearn/sklearn.exceptions/FitFailedWarning": {
            "target": "sklearn/sklearn.exceptions/FitFailedWarning"
        },
        "sklearn/sklearn.exceptions/NotFittedError": {
            "target": "sklearn/sklearn.exceptions/NotFittedError"
        },
        "sklearn/sklearn.exceptions/PositiveSpectrumWarning": {
            "target": "sklearn/sklearn.exceptions/PositiveSpectrumWarning"
        },
        "sklearn/sklearn.exceptions/SkipTestWarning": {
            "target": "sklearn/sklearn.exceptions/SkipTestWarning"
        },
        "sklearn/sklearn.exceptions/UndefinedMetricWarning": {
            "target": "sklearn/sklearn.exceptions/UndefinedMetricWarning"
        },
        "sklearn/sklearn.externals._arff/ArffContainerType": {
            "target": "sklearn/sklearn.externals._arff/ArffContainerType"
        },
        "sklearn/sklearn.externals._arff/ArffDecoder": {
            "target": "sklearn/sklearn.externals._arff/ArffDecoder"
        },
        "sklearn/sklearn.externals._arff/ArffEncoder": {
            "target": "sklearn/sklearn.externals._arff/ArffEncoder"
        },
        "sklearn/sklearn.externals._arff/ArffException": {
            "target": "sklearn/sklearn.externals._arff/ArffException"
        },
        "sklearn/sklearn.externals._arff/BadAttributeFormat": {
            "target": "sklearn/sklearn.externals._arff/BadAttributeFormat"
        },
        "sklearn/sklearn.externals._arff/BadAttributeName": {
            "target": "sklearn/sklearn.externals._arff/BadAttributeName"
        },
        "sklearn/sklearn.externals._arff/BadAttributeType": {
            "target": "sklearn/sklearn.externals._arff/BadAttributeType"
        },
        "sklearn/sklearn.externals._arff/BadDataFormat": {
            "target": "sklearn/sklearn.externals._arff/BadDataFormat"
        },
        "sklearn/sklearn.externals._arff/BadLayout": {
            "target": "sklearn/sklearn.externals._arff/BadLayout"
        },
        "sklearn/sklearn.externals._arff/BadNominalFormatting": {
            "target": "sklearn/sklearn.externals._arff/BadNominalFormatting"
        },
        "sklearn/sklearn.externals._arff/BadNominalValue": {
            "target": "sklearn/sklearn.externals._arff/BadNominalValue"
        },
        "sklearn/sklearn.externals._arff/BadNumericalValue": {
            "target": "sklearn/sklearn.externals._arff/BadNumericalValue"
        },
        "sklearn/sklearn.externals._arff/BadObject": {
            "target": "sklearn/sklearn.externals._arff/BadObject"
        },
        "sklearn/sklearn.externals._arff/BadRelationFormat": {
            "target": "sklearn/sklearn.externals._arff/BadRelationFormat"
        },
        "sklearn/sklearn.externals._arff/BadStringValue": {
            "target": "sklearn/sklearn.externals._arff/BadStringValue"
        },
        "sklearn/sklearn.externals._arff/COOData": {
            "target": "sklearn/sklearn.externals._arff/COOData"
        },
        "sklearn/sklearn.externals._arff/Data": {
            "target": "sklearn/sklearn.externals._arff/Data"
        },
        "sklearn/sklearn.externals._arff/DenseGeneratorData": {
            "target": "sklearn/sklearn.externals._arff/DenseGeneratorData"
        },
        "sklearn/sklearn.externals._arff/EncodedNominalConversor": {
            "target": "sklearn/sklearn.externals._arff/EncodedNominalConversor"
        },
        "sklearn/sklearn.externals._arff/LODData": {
            "target": "sklearn/sklearn.externals._arff/LODData"
        },
        "sklearn/sklearn.externals._arff/LODGeneratorData": {
            "target": "sklearn/sklearn.externals._arff/LODGeneratorData"
        },
        "sklearn/sklearn.externals._arff/NominalConversor": {
            "target": "sklearn/sklearn.externals._arff/NominalConversor"
        },
        "sklearn/sklearn.externals._arff/_DataListMixin": {
            "target": "sklearn/sklearn.externals._arff/_DataListMixin"
        },
        "sklearn/sklearn.externals._packaging._structures/InfinityType": {
            "target": "sklearn/sklearn.externals._packaging._structures/InfinityType"
        },
        "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType": {
            "target": "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType"
        },
        "sklearn/sklearn.externals._packaging.version/InvalidVersion": {
            "target": "sklearn/sklearn.externals._packaging.version/InvalidVersion"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion"
        },
        "sklearn/sklearn.externals._packaging.version/Version": {
            "target": "sklearn/sklearn.externals._packaging.version/Version"
        },
        "sklearn/sklearn.externals._packaging.version/_BaseVersion": {
            "target": "sklearn/sklearn.externals._packaging.version/_BaseVersion"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/_BaseFilter": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/_BaseFilter"
        },
        "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace": {
            "target": "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace"
        },
        "sklearn/sklearn.gaussian_process.kernels/CompoundKernel": {
            "target": "sklearn/sklearn.gaussian_process.kernels/CompoundKernel"
        },
        "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared": {
            "target": "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation"
        },
        "sklearn/sklearn.gaussian_process.kernels/GenericKernelMixin": {
            "target": "sklearn/sklearn.gaussian_process.kernels/GenericKernelMixin"
        },
        "sklearn/sklearn.gaussian_process.kernels/Hyperparameter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Hyperparameter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel"
        },
        "sklearn/sklearn.gaussian_process.kernels/KernelOperator": {
            "target": "sklearn/sklearn.gaussian_process.kernels/KernelOperator"
        },
        "sklearn/sklearn.gaussian_process.kernels/NormalizedKernelMixin": {
            "target": "sklearn/sklearn.gaussian_process.kernels/NormalizedKernelMixin"
        },
        "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel": {
            "target": "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel"
        },
        "sklearn/sklearn.gaussian_process.kernels/Product": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Product"
        },
        "sklearn/sklearn.gaussian_process.kernels/StationaryKernelMixin": {
            "target": "sklearn/sklearn.gaussian_process.kernels/StationaryKernelMixin"
        },
        "sklearn/sklearn.gaussian_process.kernels/Sum": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Sum"
        },
        "sklearn/sklearn.impute._base/_BaseImputer": {
            "target": "sklearn/sklearn.impute._base/_BaseImputer"
        },
        "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay": {
            "target": "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay"
        },
        "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler": {
            "target": "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler"
        },
        "sklearn/sklearn.kernel_approximation/PolynomialCountSketch": {
            "target": "sklearn/sklearn.kernel_approximation/PolynomialCountSketch"
        },
        "sklearn/sklearn.kernel_approximation/SkewedChi2Sampler": {
            "target": "sklearn/sklearn.kernel_approximation/SkewedChi2Sampler"
        },
        "sklearn/sklearn.linear_model._base/LinearClassifierMixin": {
            "target": "sklearn/sklearn.linear_model._base/LinearClassifierMixin"
        },
        "sklearn/sklearn.linear_model._base/LinearModel": {
            "target": "sklearn/sklearn.linear_model._base/LinearModel"
        },
        "sklearn/sklearn.linear_model._base/SparseCoefMixin": {
            "target": "sklearn/sklearn.linear_model._base/SparseCoefMixin"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLasso": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLasso"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV"
        },
        "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor": {
            "target": "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor"
        },
        "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss": {
            "target": "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss"
        },
        "sklearn/sklearn.linear_model._quantile/QuantileRegressor": {
            "target": "sklearn/sklearn.linear_model._quantile/QuantileRegressor"
        },
        "sklearn/sklearn.linear_model._ridge/RidgeCV": {
            "target": "sklearn/sklearn.linear_model._ridge/RidgeCV"
        },
        "sklearn/sklearn.linear_model._ridge/_BaseRidge": {
            "target": "sklearn/sklearn.linear_model._ridge/_BaseRidge"
        },
        "sklearn/sklearn.linear_model._ridge/_BaseRidgeCV": {
            "target": "sklearn/sklearn.linear_model._ridge/_BaseRidgeCV"
        },
        "sklearn/sklearn.linear_model._ridge/_IdentityClassifier": {
            "target": "sklearn/sklearn.linear_model._ridge/_IdentityClassifier"
        },
        "sklearn/sklearn.linear_model._ridge/_IdentityRegressor": {
            "target": "sklearn/sklearn.linear_model._ridge/_IdentityRegressor"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV"
        },
        "sklearn/sklearn.linear_model._ridge/_XT_CenterStackOp": {
            "target": "sklearn/sklearn.linear_model._ridge/_XT_CenterStackOp"
        },
        "sklearn/sklearn.linear_model._ridge/_X_CenterStackOp": {
            "target": "sklearn/sklearn.linear_model._ridge/_X_CenterStackOp"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/_ValidationScoreCallback": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/_ValidationScoreCallback"
        },
        "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay": {
            "target": "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay"
        },
        "sklearn/sklearn.metrics._scorer/_BaseScorer": {
            "target": "sklearn/sklearn.metrics._scorer/_BaseScorer"
        },
        "sklearn/sklearn.metrics._scorer/_DeprecatedScorers": {
            "target": "sklearn/sklearn.metrics._scorer/_DeprecatedScorers"
        },
        "sklearn/sklearn.metrics._scorer/_MultimetricScorer": {
            "target": "sklearn/sklearn.metrics._scorer/_MultimetricScorer"
        },
        "sklearn/sklearn.metrics._scorer/_PredictScorer": {
            "target": "sklearn/sklearn.metrics._scorer/_PredictScorer"
        },
        "sklearn/sklearn.metrics._scorer/_ProbaScorer": {
            "target": "sklearn/sklearn.metrics._scorer/_ProbaScorer"
        },
        "sklearn/sklearn.metrics._scorer/_ThresholdScorer": {
            "target": "sklearn/sklearn.metrics._scorer/_ThresholdScorer"
        },
        "sklearn/sklearn.mixture._base/BaseMixture": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV"
        },
        "sklearn/sklearn.model_selection._search/ParameterSampler": {
            "target": "sklearn/sklearn.model_selection._search/ParameterSampler"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/HalvingGridSearchCV": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/HalvingGridSearchCV"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/_SubsampleMetaSplitter": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/_SubsampleMetaSplitter"
        },
        "sklearn/sklearn.model_selection._split/LeavePGroupsOut": {
            "target": "sklearn/sklearn.model_selection._split/LeavePGroupsOut"
        },
        "sklearn/sklearn.model_selection._split/LeavePOut": {
            "target": "sklearn/sklearn.model_selection._split/LeavePOut"
        },
        "sklearn/sklearn.model_selection._split/StratifiedGroupKFold": {
            "target": "sklearn/sklearn.model_selection._split/StratifiedGroupKFold"
        },
        "sklearn/sklearn.model_selection._split/_BaseKFold": {
            "target": "sklearn/sklearn.model_selection._split/_BaseKFold"
        },
        "sklearn/sklearn.model_selection._split/_CVIterableWrapper": {
            "target": "sklearn/sklearn.model_selection._split/_CVIterableWrapper"
        },
        "sklearn/sklearn.model_selection._split/_RepeatedSplits": {
            "target": "sklearn/sklearn.model_selection._split/_RepeatedSplits"
        },
        "sklearn/sklearn.multiclass/OutputCodeClassifier": {
            "target": "sklearn/sklearn.multiclass/OutputCodeClassifier"
        },
        "sklearn/sklearn.multiclass/_ConstantPredictor": {
            "target": "sklearn/sklearn.multiclass/_ConstantPredictor"
        },
        "sklearn/sklearn.multioutput/ClassifierChain": {
            "target": "sklearn/sklearn.multioutput/ClassifierChain"
        },
        "sklearn/sklearn.multioutput/_BaseChain": {
            "target": "sklearn/sklearn.multioutput/_BaseChain"
        },
        "sklearn/sklearn.multioutput/_MultiOutputEstimator": {
            "target": "sklearn/sklearn.multioutput/_MultiOutputEstimator"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB"
        },
        "sklearn/sklearn.naive_bayes/_BaseNB": {
            "target": "sklearn/sklearn.naive_bayes/_BaseNB"
        },
        "sklearn/sklearn.neighbors._base/KNeighborsMixin": {
            "target": "sklearn/sklearn.neighbors._base/KNeighborsMixin"
        },
        "sklearn/sklearn.neighbors._base/NeighborsBase": {
            "target": "sklearn/sklearn.neighbors._base/NeighborsBase"
        },
        "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin": {
            "target": "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin"
        },
        "sklearn/sklearn.neighbors._graph/KNeighborsTransformer": {
            "target": "sklearn/sklearn.neighbors._graph/KNeighborsTransformer"
        },
        "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer": {
            "target": "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/AdamOptimizer": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/AdamOptimizer"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/BaseOptimizer": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/BaseOptimizer"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer"
        },
        "sklearn/sklearn.preprocessing._encoders/_BaseEncoder": {
            "target": "sklearn/sklearn.preprocessing._encoders/_BaseEncoder"
        },
        "sklearn/sklearn.preprocessing._polynomial/SplineTransformer": {
            "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation"
        },
        "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier": {
            "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM"
        },
        "sklearn/sklearn.svm._base/BaseSVC": {
            "target": "sklearn/sklearn.svm._base/BaseSVC"
        },
        "sklearn/sklearn.tree._export/Sentinel": {
            "target": "sklearn/sklearn.tree._export/Sentinel"
        },
        "sklearn/sklearn.tree._export/_BaseTreeExporter": {
            "target": "sklearn/sklearn.tree._export/_BaseTreeExporter"
        },
        "sklearn/sklearn.tree._export/_DOTTreeExporter": {
            "target": "sklearn/sklearn.tree._export/_DOTTreeExporter"
        },
        "sklearn/sklearn.tree._export/_MPLTreeExporter": {
            "target": "sklearn/sklearn.tree._export/_MPLTreeExporter"
        },
        "sklearn/sklearn.tree._reingold_tilford/DrawTree": {
            "target": "sklearn/sklearn.tree._reingold_tilford/DrawTree"
        },
        "sklearn/sklearn.tree._reingold_tilford/Tree": {
            "target": "sklearn/sklearn.tree._reingold_tilford/Tree"
        },
        "sklearn/sklearn.utils._bunch/Bunch": {
            "target": "sklearn/sklearn.utils._bunch/Bunch"
        },
        "sklearn/sklearn.utils._encode/MissingValues": {
            "target": "sklearn/sklearn.utils._encode/MissingValues"
        },
        "sklearn/sklearn.utils._encode/_NaNCounter": {
            "target": "sklearn/sklearn.utils._encode/_NaNCounter"
        },
        "sklearn/sklearn.utils._encode/_nandict": {
            "target": "sklearn/sklearn.utils._encode/_nandict"
        },
        "sklearn/sklearn.utils._estimator_html_repr/_IDCounter": {
            "target": "sklearn/sklearn.utils._estimator_html_repr/_IDCounter"
        },
        "sklearn/sklearn.utils._estimator_html_repr/_VisualBlock": {
            "target": "sklearn/sklearn.utils._estimator_html_repr/_VisualBlock"
        },
        "sklearn/sklearn.utils._mocking/ArraySlicingWrapper": {
            "target": "sklearn/sklearn.utils._mocking/ArraySlicingWrapper"
        },
        "sklearn/sklearn.utils._mocking/CheckingClassifier": {
            "target": "sklearn/sklearn.utils._mocking/CheckingClassifier"
        },
        "sklearn/sklearn.utils._mocking/MockDataFrame": {
            "target": "sklearn/sklearn.utils._mocking/MockDataFrame"
        },
        "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper": {
            "target": "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper"
        },
        "sklearn/sklearn.utils._param_validation/Interval": {
            "target": "sklearn/sklearn.utils._param_validation/Interval"
        },
        "sklearn/sklearn.utils._param_validation/StrOptions": {
            "target": "sklearn/sklearn.utils._param_validation/StrOptions"
        },
        "sklearn/sklearn.utils._param_validation/_ArrayLikes": {
            "target": "sklearn/sklearn.utils._param_validation/_ArrayLikes"
        },
        "sklearn/sklearn.utils._param_validation/_Callables": {
            "target": "sklearn/sklearn.utils._param_validation/_Callables"
        },
        "sklearn/sklearn.utils._param_validation/_Constraint": {
            "target": "sklearn/sklearn.utils._param_validation/_Constraint"
        },
        "sklearn/sklearn.utils._param_validation/_InstancesOf": {
            "target": "sklearn/sklearn.utils._param_validation/_InstancesOf"
        },
        "sklearn/sklearn.utils._param_validation/_NoneConstraint": {
            "target": "sklearn/sklearn.utils._param_validation/_NoneConstraint"
        },
        "sklearn/sklearn.utils._param_validation/_RandomStates": {
            "target": "sklearn/sklearn.utils._param_validation/_RandomStates"
        },
        "sklearn/sklearn.utils._param_validation/_SparseMatrices": {
            "target": "sklearn/sklearn.utils._param_validation/_SparseMatrices"
        },
        "sklearn/sklearn.utils._pprint/KeyValTuple": {
            "target": "sklearn/sklearn.utils._pprint/KeyValTuple"
        },
        "sklearn/sklearn.utils._pprint/KeyValTupleParam": {
            "target": "sklearn/sklearn.utils._pprint/KeyValTupleParam"
        },
        "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter": {
            "target": "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter"
        },
        "sklearn/sklearn.utils._testing/MinimalClassifier": {
            "target": "sklearn/sklearn.utils._testing/MinimalClassifier"
        },
        "sklearn/sklearn.utils._testing/MinimalRegressor": {
            "target": "sklearn/sklearn.utils._testing/MinimalRegressor"
        },
        "sklearn/sklearn.utils._testing/MinimalTransformer": {
            "target": "sklearn/sklearn.utils._testing/MinimalTransformer"
        },
        "sklearn/sklearn.utils._testing/TempMemmap": {
            "target": "sklearn/sklearn.utils._testing/TempMemmap"
        },
        "sklearn/sklearn.utils._testing/_IgnoreWarnings": {
            "target": "sklearn/sklearn.utils._testing/_IgnoreWarnings"
        },
        "sklearn/sklearn.utils._testing/_Raises": {
            "target": "sklearn/sklearn.utils._testing/_Raises"
        },
        "sklearn/sklearn.utils.deprecation/deprecated": {
            "target": "sklearn/sklearn.utils.deprecation/deprecated"
        },
        "sklearn/sklearn.utils.estimator_checks/_NotAnArray": {
            "target": "sklearn/sklearn.utils.estimator_checks/_NotAnArray"
        },
        "sklearn/sklearn.utils.fixes/_FuncWrapper": {
            "target": "sklearn/sklearn.utils.fixes/_FuncWrapper"
        },
        "sklearn/sklearn.utils.fixes/loguniform": {
            "target": "sklearn/sklearn.utils.fixes/loguniform"
        },
        "sklearn/sklearn.utils.metaestimators/_AvailableIfDescriptor": {
            "target": "sklearn/sklearn.utils.metaestimators/_AvailableIfDescriptor"
        },
        "sklearn/sklearn.utils.metaestimators/_BaseComposition": {
            "target": "sklearn/sklearn.utils.metaestimators/_BaseComposition"
        },
        "sklearn/sklearn.utils.metaestimators/_IffHasAttrDescriptor": {
            "target": "sklearn/sklearn.utils.metaestimators/_IffHasAttrDescriptor"
        },
        "sklearn/sklearn.utils.optimize/_LineSearchError": {
            "target": "sklearn/sklearn.utils.optimize/_LineSearchError"
        },
        "sklearn/sklearn.__check_build.setup/configuration": {
            "target": "sklearn/sklearn.__check_build.setup/configuration"
        },
        "sklearn/sklearn.__check_build/raise_build_error": {
            "target": "sklearn/sklearn.__check_build/raise_build_error"
        },
        "sklearn/sklearn._build_utils.openmp_helpers/check_openmp_support": {
            "target": "sklearn/sklearn._build_utils.openmp_helpers/check_openmp_support"
        },
        "sklearn/sklearn._build_utils.openmp_helpers/get_openmp_flag": {
            "target": "sklearn/sklearn._build_utils.openmp_helpers/get_openmp_flag"
        },
        "sklearn/sklearn._build_utils.pre_build_helpers/_get_compiler": {
            "target": "sklearn/sklearn._build_utils.pre_build_helpers/_get_compiler"
        },
        "sklearn/sklearn._build_utils.pre_build_helpers/basic_check_build": {
            "target": "sklearn/sklearn._build_utils.pre_build_helpers/basic_check_build"
        },
        "sklearn/sklearn._build_utils.pre_build_helpers/compile_test_program": {
            "target": "sklearn/sklearn._build_utils.pre_build_helpers/compile_test_program"
        },
        "sklearn/sklearn._build_utils/_check_cython_version": {
            "target": "sklearn/sklearn._build_utils/_check_cython_version"
        },
        "sklearn/sklearn._build_utils/cythonize_extensions": {
            "target": "sklearn/sklearn._build_utils/cythonize_extensions"
        },
        "sklearn/sklearn._build_utils/gen_from_templates": {
            "target": "sklearn/sklearn._build_utils/gen_from_templates"
        },
        "sklearn/sklearn._config/_get_threadlocal_config": {
            "target": "sklearn/sklearn._config/_get_threadlocal_config"
        },
        "sklearn/sklearn._config/config_context": {
            "target": "sklearn/sklearn._config/config_context"
        },
        "sklearn/sklearn._config/get_config": {
            "target": "sklearn/sklearn._config/get_config"
        },
        "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/deviance": {
            "target": "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/deviance"
        },
        "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/deviance_derivative": {
            "target": "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/deviance_derivative"
        },
        "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/in_y_range": {
            "target": "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/in_y_range"
        },
        "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/unit_deviance": {
            "target": "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/unit_deviance"
        },
        "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/unit_deviance_derivative": {
            "target": "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/unit_deviance_derivative"
        },
        "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/unit_variance": {
            "target": "sklearn/sklearn._loss.glm_distribution/ExponentialDispersionModel/unit_variance"
        },
        "sklearn/sklearn._loss.glm_distribution/GammaDistribution/__init__": {
            "target": "sklearn/sklearn._loss.glm_distribution/GammaDistribution/__init__"
        },
        "sklearn/sklearn._loss.glm_distribution/InverseGaussianDistribution/__init__": {
            "target": "sklearn/sklearn._loss.glm_distribution/InverseGaussianDistribution/__init__"
        },
        "sklearn/sklearn._loss.glm_distribution/NormalDistribution/__init__": {
            "target": "sklearn/sklearn._loss.glm_distribution/NormalDistribution/__init__"
        },
        "sklearn/sklearn._loss.glm_distribution/PoissonDistribution/__init__": {
            "target": "sklearn/sklearn._loss.glm_distribution/PoissonDistribution/__init__"
        },
        "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/__init__": {
            "target": "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/__init__"
        },
        "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/power@getter": {
            "target": "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/power@getter"
        },
        "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/power@setter": {
            "target": "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/power@setter"
        },
        "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/unit_deviance": {
            "target": "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/unit_deviance"
        },
        "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/unit_variance": {
            "target": "sklearn/sklearn._loss.glm_distribution/TweedieDistribution/unit_variance"
        },
        "sklearn/sklearn._loss.link/BaseLink/inverse": {
            "target": "sklearn/sklearn._loss.link/BaseLink/inverse"
        },
        "sklearn/sklearn._loss.link/BaseLink/link": {
            "target": "sklearn/sklearn._loss.link/BaseLink/link"
        },
        "sklearn/sklearn._loss.link/IdentityLink/link": {
            "target": "sklearn/sklearn._loss.link/IdentityLink/link"
        },
        "sklearn/sklearn._loss.link/Interval/__post_init__": {
            "target": "sklearn/sklearn._loss.link/Interval/__post_init__"
        },
        "sklearn/sklearn._loss.link/Interval/includes": {
            "target": "sklearn/sklearn._loss.link/Interval/includes"
        },
        "sklearn/sklearn._loss.link/LogLink/inverse": {
            "target": "sklearn/sklearn._loss.link/LogLink/inverse"
        },
        "sklearn/sklearn._loss.link/LogLink/link": {
            "target": "sklearn/sklearn._loss.link/LogLink/link"
        },
        "sklearn/sklearn._loss.link/LogitLink/inverse": {
            "target": "sklearn/sklearn._loss.link/LogitLink/inverse"
        },
        "sklearn/sklearn._loss.link/LogitLink/link": {
            "target": "sklearn/sklearn._loss.link/LogitLink/link"
        },
        "sklearn/sklearn._loss.link/MultinomialLogit/inverse": {
            "target": "sklearn/sklearn._loss.link/MultinomialLogit/inverse"
        },
        "sklearn/sklearn._loss.link/MultinomialLogit/link": {
            "target": "sklearn/sklearn._loss.link/MultinomialLogit/link"
        },
        "sklearn/sklearn._loss.link/MultinomialLogit/symmetrize_raw_prediction": {
            "target": "sklearn/sklearn._loss.link/MultinomialLogit/symmetrize_raw_prediction"
        },
        "sklearn/sklearn._loss.link/_inclusive_low_high": {
            "target": "sklearn/sklearn._loss.link/_inclusive_low_high"
        },
        "sklearn/sklearn._loss.loss/AbsoluteError/__init__": {
            "target": "sklearn/sklearn._loss.loss/AbsoluteError/__init__"
        },
        "sklearn/sklearn._loss.loss/AbsoluteError/fit_intercept_only": {
            "target": "sklearn/sklearn._loss.loss/AbsoluteError/fit_intercept_only"
        },
        "sklearn/sklearn._loss.loss/BaseLoss/__call__": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/__call__"
        },
        "sklearn/sklearn._loss.loss/BaseLoss/__init__": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/__init__"
        },
        "sklearn/sklearn._loss.loss/BaseLoss/constant_to_optimal_zero": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/constant_to_optimal_zero"
        },
        "sklearn/sklearn._loss.loss/BaseLoss/fit_intercept_only": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/fit_intercept_only"
        },
        "sklearn/sklearn._loss.loss/BaseLoss/gradient": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/gradient"
        },
        "sklearn/sklearn._loss.loss/BaseLoss/gradient_hessian": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/gradient_hessian"
        },
        "sklearn/sklearn._loss.loss/BaseLoss/in_y_pred_range": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/in_y_pred_range"
        },
        "sklearn/sklearn._loss.loss/BaseLoss/in_y_true_range": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/in_y_true_range"
        },
        "sklearn/sklearn._loss.loss/BaseLoss/init_gradient_and_hessian": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/init_gradient_and_hessian"
        },
        "sklearn/sklearn._loss.loss/BaseLoss/loss": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/loss"
        },
        "sklearn/sklearn._loss.loss/BaseLoss/loss_gradient": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/loss_gradient"
        },
        "sklearn/sklearn._loss.loss/HalfBinomialLoss/__init__": {
            "target": "sklearn/sklearn._loss.loss/HalfBinomialLoss/__init__"
        },
        "sklearn/sklearn._loss.loss/HalfBinomialLoss/constant_to_optimal_zero": {
            "target": "sklearn/sklearn._loss.loss/HalfBinomialLoss/constant_to_optimal_zero"
        },
        "sklearn/sklearn._loss.loss/HalfBinomialLoss/predict_proba": {
            "target": "sklearn/sklearn._loss.loss/HalfBinomialLoss/predict_proba"
        },
        "sklearn/sklearn._loss.loss/HalfGammaLoss/__init__": {
            "target": "sklearn/sklearn._loss.loss/HalfGammaLoss/__init__"
        },
        "sklearn/sklearn._loss.loss/HalfGammaLoss/constant_to_optimal_zero": {
            "target": "sklearn/sklearn._loss.loss/HalfGammaLoss/constant_to_optimal_zero"
        },
        "sklearn/sklearn._loss.loss/HalfMultinomialLoss/__init__": {
            "target": "sklearn/sklearn._loss.loss/HalfMultinomialLoss/__init__"
        },
        "sklearn/sklearn._loss.loss/HalfMultinomialLoss/fit_intercept_only": {
            "target": "sklearn/sklearn._loss.loss/HalfMultinomialLoss/fit_intercept_only"
        },
        "sklearn/sklearn._loss.loss/HalfMultinomialLoss/gradient_proba": {
            "target": "sklearn/sklearn._loss.loss/HalfMultinomialLoss/gradient_proba"
        },
        "sklearn/sklearn._loss.loss/HalfMultinomialLoss/in_y_true_range": {
            "target": "sklearn/sklearn._loss.loss/HalfMultinomialLoss/in_y_true_range"
        },
        "sklearn/sklearn._loss.loss/HalfMultinomialLoss/predict_proba": {
            "target": "sklearn/sklearn._loss.loss/HalfMultinomialLoss/predict_proba"
        },
        "sklearn/sklearn._loss.loss/HalfPoissonLoss/__init__": {
            "target": "sklearn/sklearn._loss.loss/HalfPoissonLoss/__init__"
        },
        "sklearn/sklearn._loss.loss/HalfPoissonLoss/constant_to_optimal_zero": {
            "target": "sklearn/sklearn._loss.loss/HalfPoissonLoss/constant_to_optimal_zero"
        },
        "sklearn/sklearn._loss.loss/HalfSquaredError/__init__": {
            "target": "sklearn/sklearn._loss.loss/HalfSquaredError/__init__"
        },
        "sklearn/sklearn._loss.loss/HalfTweedieLoss/__init__": {
            "target": "sklearn/sklearn._loss.loss/HalfTweedieLoss/__init__"
        },
        "sklearn/sklearn._loss.loss/HalfTweedieLoss/constant_to_optimal_zero": {
            "target": "sklearn/sklearn._loss.loss/HalfTweedieLoss/constant_to_optimal_zero"
        },
        "sklearn/sklearn._loss.loss/HalfTweedieLossIdentity/__init__": {
            "target": "sklearn/sklearn._loss.loss/HalfTweedieLossIdentity/__init__"
        },
        "sklearn/sklearn._loss.loss/PinballLoss/__init__": {
            "target": "sklearn/sklearn._loss.loss/PinballLoss/__init__"
        },
        "sklearn/sklearn._loss.loss/PinballLoss/fit_intercept_only": {
            "target": "sklearn/sklearn._loss.loss/PinballLoss/fit_intercept_only"
        },
        "sklearn/sklearn._loss.setup/configuration": {
            "target": "sklearn/sklearn._loss.setup/configuration"
        },
        "sklearn/sklearn.base/BaseEstimator/__getstate__": {
            "target": "sklearn/sklearn.base/BaseEstimator/__getstate__"
        },
        "sklearn/sklearn.base/BaseEstimator/__repr__": {
            "target": "sklearn/sklearn.base/BaseEstimator/__repr__"
        },
        "sklearn/sklearn.base/BaseEstimator/__setstate__": {
            "target": "sklearn/sklearn.base/BaseEstimator/__setstate__"
        },
        "sklearn/sklearn.base/BaseEstimator/_check_feature_names": {
            "target": "sklearn/sklearn.base/BaseEstimator/_check_feature_names"
        },
        "sklearn/sklearn.base/BaseEstimator/_check_n_features": {
            "target": "sklearn/sklearn.base/BaseEstimator/_check_n_features"
        },
        "sklearn/sklearn.base/BaseEstimator/_get_param_names": {
            "target": "sklearn/sklearn.base/BaseEstimator/_get_param_names"
        },
        "sklearn/sklearn.base/BaseEstimator/_get_tags": {
            "target": "sklearn/sklearn.base/BaseEstimator/_get_tags"
        },
        "sklearn/sklearn.base/BaseEstimator/_more_tags": {
            "target": "sklearn/sklearn.base/BaseEstimator/_more_tags"
        },
        "sklearn/sklearn.base/BaseEstimator/_repr_html_@getter": {
            "target": "sklearn/sklearn.base/BaseEstimator/_repr_html_@getter"
        },
        "sklearn/sklearn.base/BaseEstimator/_repr_html_inner": {
            "target": "sklearn/sklearn.base/BaseEstimator/_repr_html_inner"
        },
        "sklearn/sklearn.base/BaseEstimator/_repr_mimebundle_": {
            "target": "sklearn/sklearn.base/BaseEstimator/_repr_mimebundle_"
        },
        "sklearn/sklearn.base/BaseEstimator/_validate_data": {
            "target": "sklearn/sklearn.base/BaseEstimator/_validate_data"
        },
        "sklearn/sklearn.base/BaseEstimator/_validate_params": {
            "target": "sklearn/sklearn.base/BaseEstimator/_validate_params"
        },
        "sklearn/sklearn.base/BiclusterMixin/biclusters_@getter": {
            "target": "sklearn/sklearn.base/BiclusterMixin/biclusters_@getter"
        },
        "sklearn/sklearn.base/BiclusterMixin/get_indices": {
            "target": "sklearn/sklearn.base/BiclusterMixin/get_indices"
        },
        "sklearn/sklearn.base/BiclusterMixin/get_shape": {
            "target": "sklearn/sklearn.base/BiclusterMixin/get_shape"
        },
        "sklearn/sklearn.base/BiclusterMixin/get_submatrix": {
            "target": "sklearn/sklearn.base/BiclusterMixin/get_submatrix"
        },
        "sklearn/sklearn.base/ClassifierMixin/_more_tags": {
            "target": "sklearn/sklearn.base/ClassifierMixin/_more_tags"
        },
        "sklearn/sklearn.base/ClusterMixin/_more_tags": {
            "target": "sklearn/sklearn.base/ClusterMixin/_more_tags"
        },
        "sklearn/sklearn.base/DensityMixin/score": {
            "target": "sklearn/sklearn.base/DensityMixin/score"
        },
        "sklearn/sklearn.base/MultiOutputMixin/_more_tags": {
            "target": "sklearn/sklearn.base/MultiOutputMixin/_more_tags"
        },
        "sklearn/sklearn.base/RegressorMixin/_more_tags": {
            "target": "sklearn/sklearn.base/RegressorMixin/_more_tags"
        },
        "sklearn/sklearn.base/_ClassNamePrefixFeaturesOutMixin/get_feature_names_out": {
            "target": "sklearn/sklearn.base/_ClassNamePrefixFeaturesOutMixin/get_feature_names_out"
        },
        "sklearn/sklearn.base/_OneToOneFeatureMixin/get_feature_names_out": {
            "target": "sklearn/sklearn.base/_OneToOneFeatureMixin/get_feature_names_out"
        },
        "sklearn/sklearn.base/_UnstableArchMixin/_more_tags": {
            "target": "sklearn/sklearn.base/_UnstableArchMixin/_more_tags"
        },
        "sklearn/sklearn.base/_pprint": {
            "target": "sklearn/sklearn.base/_pprint"
        },
        "sklearn/sklearn.base/is_outlier_detector": {
            "target": "sklearn/sklearn.base/is_outlier_detector"
        },
        "sklearn/sklearn.base/is_regressor": {
            "target": "sklearn/sklearn.base/is_regressor"
        },
        "sklearn/sklearn.calibration/CalibratedClassifierCV/_more_tags": {
            "target": "sklearn/sklearn.calibration/CalibratedClassifierCV/_more_tags"
        },
        "sklearn/sklearn.calibration/CalibrationDisplay/__init__": {
            "target": "sklearn/sklearn.calibration/CalibrationDisplay/__init__"
        },
        "sklearn/sklearn.calibration/CalibrationDisplay/from_estimator": {
            "target": "sklearn/sklearn.calibration/CalibrationDisplay/from_estimator"
        },
        "sklearn/sklearn.calibration/CalibrationDisplay/from_predictions": {
            "target": "sklearn/sklearn.calibration/CalibrationDisplay/from_predictions"
        },
        "sklearn/sklearn.calibration/CalibrationDisplay/plot": {
            "target": "sklearn/sklearn.calibration/CalibrationDisplay/plot"
        },
        "sklearn/sklearn.calibration/_CalibratedClassifier/__init__": {
            "target": "sklearn/sklearn.calibration/_CalibratedClassifier/__init__"
        },
        "sklearn/sklearn.calibration/_CalibratedClassifier/predict_proba": {
            "target": "sklearn/sklearn.calibration/_CalibratedClassifier/predict_proba"
        },
        "sklearn/sklearn.calibration/_SigmoidCalibration/fit": {
            "target": "sklearn/sklearn.calibration/_SigmoidCalibration/fit"
        },
        "sklearn/sklearn.calibration/_SigmoidCalibration/predict": {
            "target": "sklearn/sklearn.calibration/_SigmoidCalibration/predict"
        },
        "sklearn/sklearn.calibration/_compute_predictions": {
            "target": "sklearn/sklearn.calibration/_compute_predictions"
        },
        "sklearn/sklearn.calibration/_fit_calibrator": {
            "target": "sklearn/sklearn.calibration/_fit_calibrator"
        },
        "sklearn/sklearn.calibration/_fit_classifier_calibrator_pair": {
            "target": "sklearn/sklearn.calibration/_fit_classifier_calibrator_pair"
        },
        "sklearn/sklearn.calibration/_get_prediction_method": {
            "target": "sklearn/sklearn.calibration/_get_prediction_method"
        },
        "sklearn/sklearn.calibration/_sigmoid_calibration": {
            "target": "sklearn/sklearn.calibration/_sigmoid_calibration"
        },
        "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/__init__": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/__init__"
        },
        "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/_more_tags": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/_more_tags"
        },
        "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/fit": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/fit"
        },
        "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/fit_predict": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/fit_predict"
        },
        "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/predict": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/predict"
        },
        "sklearn/sklearn.cluster._affinity_propagation/_equal_similarities_and_preferences": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/_equal_similarities_and_preferences"
        },
        "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/__init__": {
            "target": "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/__init__"
        },
        "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/_fit": {
            "target": "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/_fit"
        },
        "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/fit": {
            "target": "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/fit"
        },
        "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/fit_predict": {
            "target": "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/fit_predict"
        },
        "sklearn/sklearn.cluster._agglomerative/FeatureAgglomeration/__init__": {
            "target": "sklearn/sklearn.cluster._agglomerative/FeatureAgglomeration/__init__"
        },
        "sklearn/sklearn.cluster._agglomerative/FeatureAgglomeration/fit": {
            "target": "sklearn/sklearn.cluster._agglomerative/FeatureAgglomeration/fit"
        },
        "sklearn/sklearn.cluster._agglomerative/FeatureAgglomeration/fit_predict@getter": {
            "target": "sklearn/sklearn.cluster._agglomerative/FeatureAgglomeration/fit_predict@getter"
        },
        "sklearn/sklearn.cluster._agglomerative/_average_linkage": {
            "target": "sklearn/sklearn.cluster._agglomerative/_average_linkage"
        },
        "sklearn/sklearn.cluster._agglomerative/_complete_linkage": {
            "target": "sklearn/sklearn.cluster._agglomerative/_complete_linkage"
        },
        "sklearn/sklearn.cluster._agglomerative/_fix_connectivity": {
            "target": "sklearn/sklearn.cluster._agglomerative/_fix_connectivity"
        },
        "sklearn/sklearn.cluster._agglomerative/_hc_cut": {
            "target": "sklearn/sklearn.cluster._agglomerative/_hc_cut"
        },
        "sklearn/sklearn.cluster._agglomerative/_single_linkage": {
            "target": "sklearn/sklearn.cluster._agglomerative/_single_linkage"
        },
        "sklearn/sklearn.cluster._agglomerative/_single_linkage_tree": {
            "target": "sklearn/sklearn.cluster._agglomerative/_single_linkage_tree"
        },
        "sklearn/sklearn.cluster._agglomerative/linkage_tree": {
            "target": "sklearn/sklearn.cluster._agglomerative/linkage_tree"
        },
        "sklearn/sklearn.cluster._agglomerative/ward_tree": {
            "target": "sklearn/sklearn.cluster._agglomerative/ward_tree"
        },
        "sklearn/sklearn.cluster._bicluster/BaseSpectral/__init__": {
            "target": "sklearn/sklearn.cluster._bicluster/BaseSpectral/__init__"
        },
        "sklearn/sklearn.cluster._bicluster/BaseSpectral/_check_parameters": {
            "target": "sklearn/sklearn.cluster._bicluster/BaseSpectral/_check_parameters"
        },
        "sklearn/sklearn.cluster._bicluster/BaseSpectral/_k_means": {
            "target": "sklearn/sklearn.cluster._bicluster/BaseSpectral/_k_means"
        },
        "sklearn/sklearn.cluster._bicluster/BaseSpectral/_more_tags": {
            "target": "sklearn/sklearn.cluster._bicluster/BaseSpectral/_more_tags"
        },
        "sklearn/sklearn.cluster._bicluster/BaseSpectral/_svd": {
            "target": "sklearn/sklearn.cluster._bicluster/BaseSpectral/_svd"
        },
        "sklearn/sklearn.cluster._bicluster/BaseSpectral/fit": {
            "target": "sklearn/sklearn.cluster._bicluster/BaseSpectral/fit"
        },
        "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__"
        },
        "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/_check_parameters": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/_check_parameters"
        },
        "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/_fit": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/_fit"
        },
        "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/_fit_best_piecewise": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/_fit_best_piecewise"
        },
        "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/_project_and_cluster": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/_project_and_cluster"
        },
        "sklearn/sklearn.cluster._bicluster/SpectralCoclustering/__init__": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralCoclustering/__init__"
        },
        "sklearn/sklearn.cluster._bicluster/SpectralCoclustering/_check_parameters": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralCoclustering/_check_parameters"
        },
        "sklearn/sklearn.cluster._bicluster/SpectralCoclustering/_fit": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralCoclustering/_fit"
        },
        "sklearn/sklearn.cluster._bicluster/_bistochastic_normalize": {
            "target": "sklearn/sklearn.cluster._bicluster/_bistochastic_normalize"
        },
        "sklearn/sklearn.cluster._bicluster/_log_normalize": {
            "target": "sklearn/sklearn.cluster._bicluster/_log_normalize"
        },
        "sklearn/sklearn.cluster._bicluster/_scale_normalize": {
            "target": "sklearn/sklearn.cluster._bicluster/_scale_normalize"
        },
        "sklearn/sklearn.cluster._birch/Birch/__init__": {
            "target": "sklearn/sklearn.cluster._birch/Birch/__init__"
        },
        "sklearn/sklearn.cluster._birch/Birch/_check_fit": {
            "target": "sklearn/sklearn.cluster._birch/Birch/_check_fit"
        },
        "sklearn/sklearn.cluster._birch/Birch/_fit": {
            "target": "sklearn/sklearn.cluster._birch/Birch/_fit"
        },
        "sklearn/sklearn.cluster._birch/Birch/_get_leaves": {
            "target": "sklearn/sklearn.cluster._birch/Birch/_get_leaves"
        },
        "sklearn/sklearn.cluster._birch/Birch/_global_clustering": {
            "target": "sklearn/sklearn.cluster._birch/Birch/_global_clustering"
        },
        "sklearn/sklearn.cluster._birch/Birch/_more_tags": {
            "target": "sklearn/sklearn.cluster._birch/Birch/_more_tags"
        },
        "sklearn/sklearn.cluster._birch/Birch/_predict": {
            "target": "sklearn/sklearn.cluster._birch/Birch/_predict"
        },
        "sklearn/sklearn.cluster._birch/Birch/fit": {
            "target": "sklearn/sklearn.cluster._birch/Birch/fit"
        },
        "sklearn/sklearn.cluster._birch/Birch/fit_@getter": {
            "target": "sklearn/sklearn.cluster._birch/Birch/fit_@getter"
        },
        "sklearn/sklearn.cluster._birch/Birch/partial_fit": {
            "target": "sklearn/sklearn.cluster._birch/Birch/partial_fit"
        },
        "sklearn/sklearn.cluster._birch/Birch/partial_fit_@getter": {
            "target": "sklearn/sklearn.cluster._birch/Birch/partial_fit_@getter"
        },
        "sklearn/sklearn.cluster._birch/Birch/predict": {
            "target": "sklearn/sklearn.cluster._birch/Birch/predict"
        },
        "sklearn/sklearn.cluster._birch/Birch/transform": {
            "target": "sklearn/sklearn.cluster._birch/Birch/transform"
        },
        "sklearn/sklearn.cluster._birch/_CFNode/__init__": {
            "target": "sklearn/sklearn.cluster._birch/_CFNode/__init__"
        },
        "sklearn/sklearn.cluster._birch/_CFNode/append_subcluster": {
            "target": "sklearn/sklearn.cluster._birch/_CFNode/append_subcluster"
        },
        "sklearn/sklearn.cluster._birch/_CFNode/insert_cf_subcluster": {
            "target": "sklearn/sklearn.cluster._birch/_CFNode/insert_cf_subcluster"
        },
        "sklearn/sklearn.cluster._birch/_CFNode/update_split_subclusters": {
            "target": "sklearn/sklearn.cluster._birch/_CFNode/update_split_subclusters"
        },
        "sklearn/sklearn.cluster._birch/_CFSubcluster/__init__": {
            "target": "sklearn/sklearn.cluster._birch/_CFSubcluster/__init__"
        },
        "sklearn/sklearn.cluster._birch/_CFSubcluster/merge_subcluster": {
            "target": "sklearn/sklearn.cluster._birch/_CFSubcluster/merge_subcluster"
        },
        "sklearn/sklearn.cluster._birch/_CFSubcluster/radius@getter": {
            "target": "sklearn/sklearn.cluster._birch/_CFSubcluster/radius@getter"
        },
        "sklearn/sklearn.cluster._birch/_CFSubcluster/update": {
            "target": "sklearn/sklearn.cluster._birch/_CFSubcluster/update"
        },
        "sklearn/sklearn.cluster._birch/_iterate_sparse_X": {
            "target": "sklearn/sklearn.cluster._birch/_iterate_sparse_X"
        },
        "sklearn/sklearn.cluster._birch/_split_node": {
            "target": "sklearn/sklearn.cluster._birch/_split_node"
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/__init__": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/__init__"
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/_bisect": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/_bisect"
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/_inertia_per_cluster": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/_inertia_per_cluster"
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/_more_tags": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/_more_tags"
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/_predict_recursive": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/_predict_recursive"
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/_warn_mkl_vcomp": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/_warn_mkl_vcomp"
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/fit": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/fit"
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/predict": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/predict"
        },
        "sklearn/sklearn.cluster._bisect_k_means/_BisectingTree/__init__": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/_BisectingTree/__init__"
        },
        "sklearn/sklearn.cluster._bisect_k_means/_BisectingTree/get_cluster_to_bisect": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/_BisectingTree/get_cluster_to_bisect"
        },
        "sklearn/sklearn.cluster._bisect_k_means/_BisectingTree/iter_leaves": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/_BisectingTree/iter_leaves"
        },
        "sklearn/sklearn.cluster._bisect_k_means/_BisectingTree/split": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/_BisectingTree/split"
        },
        "sklearn/sklearn.cluster._dbscan/DBSCAN/__init__": {
            "target": "sklearn/sklearn.cluster._dbscan/DBSCAN/__init__"
        },
        "sklearn/sklearn.cluster._dbscan/DBSCAN/_more_tags": {
            "target": "sklearn/sklearn.cluster._dbscan/DBSCAN/_more_tags"
        },
        "sklearn/sklearn.cluster._dbscan/DBSCAN/fit": {
            "target": "sklearn/sklearn.cluster._dbscan/DBSCAN/fit"
        },
        "sklearn/sklearn.cluster._dbscan/DBSCAN/fit_predict": {
            "target": "sklearn/sklearn.cluster._dbscan/DBSCAN/fit_predict"
        },
        "sklearn/sklearn.cluster._feature_agglomeration/AgglomerationTransform/inverse_transform": {
            "target": "sklearn/sklearn.cluster._feature_agglomeration/AgglomerationTransform/inverse_transform"
        },
        "sklearn/sklearn.cluster._feature_agglomeration/AgglomerationTransform/transform": {
            "target": "sklearn/sklearn.cluster._feature_agglomeration/AgglomerationTransform/transform"
        },
        "sklearn/sklearn.cluster._kmeans/KMeans/__init__": {
            "target": "sklearn/sklearn.cluster._kmeans/KMeans/__init__"
        },
        "sklearn/sklearn.cluster._kmeans/KMeans/_check_params_vs_input": {
            "target": "sklearn/sklearn.cluster._kmeans/KMeans/_check_params_vs_input"
        },
        "sklearn/sklearn.cluster._kmeans/KMeans/_warn_mkl_vcomp": {
            "target": "sklearn/sklearn.cluster._kmeans/KMeans/_warn_mkl_vcomp"
        },
        "sklearn/sklearn.cluster._kmeans/KMeans/fit": {
            "target": "sklearn/sklearn.cluster._kmeans/KMeans/fit"
        },
        "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/__init__": {
            "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/__init__"
        },
        "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/_check_params_vs_input": {
            "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/_check_params_vs_input"
        },
        "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/_mini_batch_convergence": {
            "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/_mini_batch_convergence"
        },
        "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/_random_reassign": {
            "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/_random_reassign"
        },
        "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/_warn_mkl_vcomp": {
            "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/_warn_mkl_vcomp"
        },
        "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/fit": {
            "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/fit"
        },
        "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/partial_fit": {
            "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/partial_fit"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/__init__": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/__init__"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_check_mkl_vcomp": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_check_mkl_vcomp"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_check_params_vs_input": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_check_params_vs_input"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_check_test_data": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_check_test_data"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_init_centroids": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_init_centroids"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_more_tags": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_more_tags"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_transform": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_transform"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_validate_center_shape": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_validate_center_shape"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_warn_mkl_vcomp": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_warn_mkl_vcomp"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/fit_predict": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/fit_predict"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/fit_transform": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/fit_transform"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/predict": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/predict"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/score": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/score"
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/transform": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/transform"
        },
        "sklearn/sklearn.cluster._kmeans/_kmeans_plusplus": {
            "target": "sklearn/sklearn.cluster._kmeans/_kmeans_plusplus"
        },
        "sklearn/sklearn.cluster._kmeans/_kmeans_single_elkan": {
            "target": "sklearn/sklearn.cluster._kmeans/_kmeans_single_elkan"
        },
        "sklearn/sklearn.cluster._kmeans/_kmeans_single_lloyd": {
            "target": "sklearn/sklearn.cluster._kmeans/_kmeans_single_lloyd"
        },
        "sklearn/sklearn.cluster._kmeans/_labels_inertia": {
            "target": "sklearn/sklearn.cluster._kmeans/_labels_inertia"
        },
        "sklearn/sklearn.cluster._kmeans/_labels_inertia_threadpool_limit": {
            "target": "sklearn/sklearn.cluster._kmeans/_labels_inertia_threadpool_limit"
        },
        "sklearn/sklearn.cluster._kmeans/_mini_batch_step": {
            "target": "sklearn/sklearn.cluster._kmeans/_mini_batch_step"
        },
        "sklearn/sklearn.cluster._kmeans/_tolerance": {
            "target": "sklearn/sklearn.cluster._kmeans/_tolerance"
        },
        "sklearn/sklearn.cluster._kmeans/kmeans_plusplus": {
            "target": "sklearn/sklearn.cluster._kmeans/kmeans_plusplus"
        },
        "sklearn/sklearn.cluster._mean_shift/MeanShift/__init__": {
            "target": "sklearn/sklearn.cluster._mean_shift/MeanShift/__init__"
        },
        "sklearn/sklearn.cluster._mean_shift/MeanShift/fit": {
            "target": "sklearn/sklearn.cluster._mean_shift/MeanShift/fit"
        },
        "sklearn/sklearn.cluster._mean_shift/MeanShift/predict": {
            "target": "sklearn/sklearn.cluster._mean_shift/MeanShift/predict"
        },
        "sklearn/sklearn.cluster._mean_shift/_mean_shift_single_seed": {
            "target": "sklearn/sklearn.cluster._mean_shift/_mean_shift_single_seed"
        },
        "sklearn/sklearn.cluster._mean_shift/get_bin_seeds": {
            "target": "sklearn/sklearn.cluster._mean_shift/get_bin_seeds"
        },
        "sklearn/sklearn.cluster._mean_shift/mean_shift": {
            "target": "sklearn/sklearn.cluster._mean_shift/mean_shift"
        },
        "sklearn/sklearn.cluster._optics/OPTICS/__init__": {
            "target": "sklearn/sklearn.cluster._optics/OPTICS/__init__"
        },
        "sklearn/sklearn.cluster._optics/OPTICS/fit": {
            "target": "sklearn/sklearn.cluster._optics/OPTICS/fit"
        },
        "sklearn/sklearn.cluster._optics/_compute_core_distances_": {
            "target": "sklearn/sklearn.cluster._optics/_compute_core_distances_"
        },
        "sklearn/sklearn.cluster._optics/_correct_predecessor": {
            "target": "sklearn/sklearn.cluster._optics/_correct_predecessor"
        },
        "sklearn/sklearn.cluster._optics/_extend_region": {
            "target": "sklearn/sklearn.cluster._optics/_extend_region"
        },
        "sklearn/sklearn.cluster._optics/_extract_xi_labels": {
            "target": "sklearn/sklearn.cluster._optics/_extract_xi_labels"
        },
        "sklearn/sklearn.cluster._optics/_set_reach_dist": {
            "target": "sklearn/sklearn.cluster._optics/_set_reach_dist"
        },
        "sklearn/sklearn.cluster._optics/_update_filter_sdas": {
            "target": "sklearn/sklearn.cluster._optics/_update_filter_sdas"
        },
        "sklearn/sklearn.cluster._optics/_validate_size": {
            "target": "sklearn/sklearn.cluster._optics/_validate_size"
        },
        "sklearn/sklearn.cluster._optics/_xi_cluster": {
            "target": "sklearn/sklearn.cluster._optics/_xi_cluster"
        },
        "sklearn/sklearn.cluster._optics/cluster_optics_dbscan": {
            "target": "sklearn/sklearn.cluster._optics/cluster_optics_dbscan"
        },
        "sklearn/sklearn.cluster._optics/cluster_optics_xi": {
            "target": "sklearn/sklearn.cluster._optics/cluster_optics_xi"
        },
        "sklearn/sklearn.cluster._optics/compute_optics_graph": {
            "target": "sklearn/sklearn.cluster._optics/compute_optics_graph"
        },
        "sklearn/sklearn.cluster._spectral/SpectralClustering/__init__": {
            "target": "sklearn/sklearn.cluster._spectral/SpectralClustering/__init__"
        },
        "sklearn/sklearn.cluster._spectral/SpectralClustering/_more_tags": {
            "target": "sklearn/sklearn.cluster._spectral/SpectralClustering/_more_tags"
        },
        "sklearn/sklearn.cluster._spectral/SpectralClustering/fit": {
            "target": "sklearn/sklearn.cluster._spectral/SpectralClustering/fit"
        },
        "sklearn/sklearn.cluster._spectral/SpectralClustering/fit_predict": {
            "target": "sklearn/sklearn.cluster._spectral/SpectralClustering/fit_predict"
        },
        "sklearn/sklearn.cluster._spectral/cluster_qr": {
            "target": "sklearn/sklearn.cluster._spectral/cluster_qr"
        },
        "sklearn/sklearn.cluster._spectral/discretize": {
            "target": "sklearn/sklearn.cluster._spectral/discretize"
        },
        "sklearn/sklearn.cluster._spectral/spectral_clustering": {
            "target": "sklearn/sklearn.cluster._spectral/spectral_clustering"
        },
        "sklearn/sklearn.cluster.setup/configuration": {
            "target": "sklearn/sklearn.cluster.setup/configuration"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/__init__": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/__init__"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_fit_transform": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_fit_transform"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_get_feature_name_out_for_transformer": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_get_feature_name_out_for_transformer"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_hstack": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_hstack"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_iter": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_iter"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_log_message": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_log_message"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_record_output_indices": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_record_output_indices"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_sk_visual_block_": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_sk_visual_block_"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_transformers@getter": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_transformers@getter"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_transformers@setter": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_transformers@setter"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_update_fitted_transformers": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_update_fitted_transformers"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_validate_column_callables": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_validate_column_callables"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_validate_output": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_validate_output"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_validate_remainder": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_validate_remainder"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_validate_transformers": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/_validate_transformers"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/fit": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/fit"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/fit_transform": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/fit_transform"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/get_feature_names": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/get_feature_names"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/get_feature_names_out": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/get_feature_names_out"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/get_params": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/get_params"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/named_transformers_@getter": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/named_transformers_@getter"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/set_params": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/set_params"
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/transform": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/transform"
        },
        "sklearn/sklearn.compose._column_transformer/_check_X": {
            "target": "sklearn/sklearn.compose._column_transformer/_check_X"
        },
        "sklearn/sklearn.compose._column_transformer/_get_transformer_list": {
            "target": "sklearn/sklearn.compose._column_transformer/_get_transformer_list"
        },
        "sklearn/sklearn.compose._column_transformer/_is_empty_column_selection": {
            "target": "sklearn/sklearn.compose._column_transformer/_is_empty_column_selection"
        },
        "sklearn/sklearn.compose._column_transformer/make_column_selector/__call__": {
            "target": "sklearn/sklearn.compose._column_transformer/make_column_selector/__call__"
        },
        "sklearn/sklearn.compose._column_transformer/make_column_selector/__init__": {
            "target": "sklearn/sklearn.compose._column_transformer/make_column_selector/__init__"
        },
        "sklearn/sklearn.compose._target/TransformedTargetRegressor/__init__": {
            "target": "sklearn/sklearn.compose._target/TransformedTargetRegressor/__init__"
        },
        "sklearn/sklearn.compose._target/TransformedTargetRegressor/_fit_transformer": {
            "target": "sklearn/sklearn.compose._target/TransformedTargetRegressor/_fit_transformer"
        },
        "sklearn/sklearn.compose._target/TransformedTargetRegressor/_more_tags": {
            "target": "sklearn/sklearn.compose._target/TransformedTargetRegressor/_more_tags"
        },
        "sklearn/sklearn.compose._target/TransformedTargetRegressor/fit": {
            "target": "sklearn/sklearn.compose._target/TransformedTargetRegressor/fit"
        },
        "sklearn/sklearn.compose._target/TransformedTargetRegressor/n_features_in_@getter": {
            "target": "sklearn/sklearn.compose._target/TransformedTargetRegressor/n_features_in_@getter"
        },
        "sklearn/sklearn.compose._target/TransformedTargetRegressor/predict": {
            "target": "sklearn/sklearn.compose._target/TransformedTargetRegressor/predict"
        },
        "sklearn/sklearn.conftest/_fetch_fixture": {
            "target": "sklearn/sklearn.conftest/_fetch_fixture"
        },
        "sklearn/sklearn.conftest/global_dtype": {
            "target": "sklearn/sklearn.conftest/global_dtype"
        },
        "sklearn/sklearn.conftest/pyplot": {
            "target": "sklearn/sklearn.conftest/pyplot"
        },
        "sklearn/sklearn.conftest/pytest_collection_modifyitems": {
            "target": "sklearn/sklearn.conftest/pytest_collection_modifyitems"
        },
        "sklearn/sklearn.conftest/pytest_configure": {
            "target": "sklearn/sklearn.conftest/pytest_configure"
        },
        "sklearn/sklearn.conftest/pytest_runtest_setup": {
            "target": "sklearn/sklearn.conftest/pytest_runtest_setup"
        },
        "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/__init__": {
            "target": "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/__init__"
        },
        "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/decision_function": {
            "target": "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/decision_function"
        },
        "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/fit": {
            "target": "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/fit"
        },
        "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/predict": {
            "target": "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/predict"
        },
        "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/score": {
            "target": "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/score"
        },
        "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/score_samples": {
            "target": "sklearn/sklearn.covariance._elliptic_envelope/EllipticEnvelope/score_samples"
        },
        "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/__init__": {
            "target": "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/__init__"
        },
        "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/_set_covariance": {
            "target": "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/_set_covariance"
        },
        "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/error_norm": {
            "target": "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/error_norm"
        },
        "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/fit": {
            "target": "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/fit"
        },
        "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/get_precision": {
            "target": "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/get_precision"
        },
        "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/mahalanobis": {
            "target": "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/mahalanobis"
        },
        "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/score": {
            "target": "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/score"
        },
        "sklearn/sklearn.covariance._empirical_covariance/empirical_covariance": {
            "target": "sklearn/sklearn.covariance._empirical_covariance/empirical_covariance"
        },
        "sklearn/sklearn.covariance._empirical_covariance/log_likelihood": {
            "target": "sklearn/sklearn.covariance._empirical_covariance/log_likelihood"
        },
        "sklearn/sklearn.covariance._graph_lasso/GraphicalLasso/__init__": {
            "target": "sklearn/sklearn.covariance._graph_lasso/GraphicalLasso/__init__"
        },
        "sklearn/sklearn.covariance._graph_lasso/GraphicalLasso/fit": {
            "target": "sklearn/sklearn.covariance._graph_lasso/GraphicalLasso/fit"
        },
        "sklearn/sklearn.covariance._graph_lasso/GraphicalLassoCV/__init__": {
            "target": "sklearn/sklearn.covariance._graph_lasso/GraphicalLassoCV/__init__"
        },
        "sklearn/sklearn.covariance._graph_lasso/GraphicalLassoCV/fit": {
            "target": "sklearn/sklearn.covariance._graph_lasso/GraphicalLassoCV/fit"
        },
        "sklearn/sklearn.covariance._graph_lasso/_DictWithDeprecatedKeys/__getitem__": {
            "target": "sklearn/sklearn.covariance._graph_lasso/_DictWithDeprecatedKeys/__getitem__"
        },
        "sklearn/sklearn.covariance._graph_lasso/_DictWithDeprecatedKeys/__init__": {
            "target": "sklearn/sklearn.covariance._graph_lasso/_DictWithDeprecatedKeys/__init__"
        },
        "sklearn/sklearn.covariance._graph_lasso/_DictWithDeprecatedKeys/_set_deprecated": {
            "target": "sklearn/sklearn.covariance._graph_lasso/_DictWithDeprecatedKeys/_set_deprecated"
        },
        "sklearn/sklearn.covariance._graph_lasso/_dual_gap": {
            "target": "sklearn/sklearn.covariance._graph_lasso/_dual_gap"
        },
        "sklearn/sklearn.covariance._graph_lasso/_objective": {
            "target": "sklearn/sklearn.covariance._graph_lasso/_objective"
        },
        "sklearn/sklearn.covariance._graph_lasso/alpha_max": {
            "target": "sklearn/sklearn.covariance._graph_lasso/alpha_max"
        },
        "sklearn/sklearn.covariance._graph_lasso/graphical_lasso": {
            "target": "sklearn/sklearn.covariance._graph_lasso/graphical_lasso"
        },
        "sklearn/sklearn.covariance._graph_lasso/graphical_lasso_path": {
            "target": "sklearn/sklearn.covariance._graph_lasso/graphical_lasso_path"
        },
        "sklearn/sklearn.covariance._robust_covariance/MinCovDet/__init__": {
            "target": "sklearn/sklearn.covariance._robust_covariance/MinCovDet/__init__"
        },
        "sklearn/sklearn.covariance._robust_covariance/MinCovDet/correct_covariance": {
            "target": "sklearn/sklearn.covariance._robust_covariance/MinCovDet/correct_covariance"
        },
        "sklearn/sklearn.covariance._robust_covariance/MinCovDet/fit": {
            "target": "sklearn/sklearn.covariance._robust_covariance/MinCovDet/fit"
        },
        "sklearn/sklearn.covariance._robust_covariance/MinCovDet/reweight_covariance": {
            "target": "sklearn/sklearn.covariance._robust_covariance/MinCovDet/reweight_covariance"
        },
        "sklearn/sklearn.covariance._robust_covariance/_c_step": {
            "target": "sklearn/sklearn.covariance._robust_covariance/_c_step"
        },
        "sklearn/sklearn.covariance._robust_covariance/c_step": {
            "target": "sklearn/sklearn.covariance._robust_covariance/c_step"
        },
        "sklearn/sklearn.covariance._robust_covariance/fast_mcd": {
            "target": "sklearn/sklearn.covariance._robust_covariance/fast_mcd"
        },
        "sklearn/sklearn.covariance._robust_covariance/select_candidates": {
            "target": "sklearn/sklearn.covariance._robust_covariance/select_candidates"
        },
        "sklearn/sklearn.covariance._shrunk_covariance/LedoitWolf/__init__": {
            "target": "sklearn/sklearn.covariance._shrunk_covariance/LedoitWolf/__init__"
        },
        "sklearn/sklearn.covariance._shrunk_covariance/LedoitWolf/fit": {
            "target": "sklearn/sklearn.covariance._shrunk_covariance/LedoitWolf/fit"
        },
        "sklearn/sklearn.covariance._shrunk_covariance/OAS/fit": {
            "target": "sklearn/sklearn.covariance._shrunk_covariance/OAS/fit"
        },
        "sklearn/sklearn.covariance._shrunk_covariance/ShrunkCovariance/__init__": {
            "target": "sklearn/sklearn.covariance._shrunk_covariance/ShrunkCovariance/__init__"
        },
        "sklearn/sklearn.covariance._shrunk_covariance/ShrunkCovariance/fit": {
            "target": "sklearn/sklearn.covariance._shrunk_covariance/ShrunkCovariance/fit"
        },
        "sklearn/sklearn.covariance._shrunk_covariance/ledoit_wolf_shrinkage": {
            "target": "sklearn/sklearn.covariance._shrunk_covariance/ledoit_wolf_shrinkage"
        },
        "sklearn/sklearn.covariance._shrunk_covariance/oas": {
            "target": "sklearn/sklearn.covariance._shrunk_covariance/oas"
        },
        "sklearn/sklearn.covariance._shrunk_covariance/shrunk_covariance": {
            "target": "sklearn/sklearn.covariance._shrunk_covariance/shrunk_covariance"
        },
        "sklearn/sklearn.cross_decomposition._pls/CCA/__init__": {
            "target": "sklearn/sklearn.cross_decomposition._pls/CCA/__init__"
        },
        "sklearn/sklearn.cross_decomposition._pls/PLSCanonical/__init__": {
            "target": "sklearn/sklearn.cross_decomposition._pls/PLSCanonical/__init__"
        },
        "sklearn/sklearn.cross_decomposition._pls/PLSRegression/__init__": {
            "target": "sklearn/sklearn.cross_decomposition._pls/PLSRegression/__init__"
        },
        "sklearn/sklearn.cross_decomposition._pls/PLSRegression/fit": {
            "target": "sklearn/sklearn.cross_decomposition._pls/PLSRegression/fit"
        },
        "sklearn/sklearn.cross_decomposition._pls/PLSSVD/__init__": {
            "target": "sklearn/sklearn.cross_decomposition._pls/PLSSVD/__init__"
        },
        "sklearn/sklearn.cross_decomposition._pls/PLSSVD/fit": {
            "target": "sklearn/sklearn.cross_decomposition._pls/PLSSVD/fit"
        },
        "sklearn/sklearn.cross_decomposition._pls/PLSSVD/fit_transform": {
            "target": "sklearn/sklearn.cross_decomposition._pls/PLSSVD/fit_transform"
        },
        "sklearn/sklearn.cross_decomposition._pls/PLSSVD/transform": {
            "target": "sklearn/sklearn.cross_decomposition._pls/PLSSVD/transform"
        },
        "sklearn/sklearn.cross_decomposition._pls/_PLS/__init__": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_PLS/__init__"
        },
        "sklearn/sklearn.cross_decomposition._pls/_PLS/_more_tags": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_PLS/_more_tags"
        },
        "sklearn/sklearn.cross_decomposition._pls/_PLS/coef_@getter": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_PLS/coef_@getter"
        },
        "sklearn/sklearn.cross_decomposition._pls/_PLS/fit": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_PLS/fit"
        },
        "sklearn/sklearn.cross_decomposition._pls/_PLS/fit_transform": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_PLS/fit_transform"
        },
        "sklearn/sklearn.cross_decomposition._pls/_PLS/inverse_transform": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_PLS/inverse_transform"
        },
        "sklearn/sklearn.cross_decomposition._pls/_PLS/predict": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_PLS/predict"
        },
        "sklearn/sklearn.cross_decomposition._pls/_PLS/transform": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_PLS/transform"
        },
        "sklearn/sklearn.cross_decomposition._pls/_center_scale_xy": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_center_scale_xy"
        },
        "sklearn/sklearn.cross_decomposition._pls/_get_first_singular_vectors_power_method": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_get_first_singular_vectors_power_method"
        },
        "sklearn/sklearn.cross_decomposition._pls/_get_first_singular_vectors_svd": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_get_first_singular_vectors_svd"
        },
        "sklearn/sklearn.cross_decomposition._pls/_pinv2_old": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_pinv2_old"
        },
        "sklearn/sklearn.cross_decomposition._pls/_svd_flip_1d": {
            "target": "sklearn/sklearn.cross_decomposition._pls/_svd_flip_1d"
        },
        "sklearn/sklearn.datasets._arff_parser/_liac_arff_parser": {
            "target": "sklearn/sklearn.datasets._arff_parser/_liac_arff_parser"
        },
        "sklearn/sklearn.datasets._arff_parser/_pandas_arff_parser": {
            "target": "sklearn/sklearn.datasets._arff_parser/_pandas_arff_parser"
        },
        "sklearn/sklearn.datasets._arff_parser/_post_process_frame": {
            "target": "sklearn/sklearn.datasets._arff_parser/_post_process_frame"
        },
        "sklearn/sklearn.datasets._arff_parser/_sparse_data_to_array": {
            "target": "sklearn/sklearn.datasets._arff_parser/_sparse_data_to_array"
        },
        "sklearn/sklearn.datasets._arff_parser/_split_sparse_columns": {
            "target": "sklearn/sklearn.datasets._arff_parser/_split_sparse_columns"
        },
        "sklearn/sklearn.datasets._arff_parser/load_arff_from_gzip_file": {
            "target": "sklearn/sklearn.datasets._arff_parser/load_arff_from_gzip_file"
        },
        "sklearn/sklearn.datasets._base/_convert_data_dataframe": {
            "target": "sklearn/sklearn.datasets._base/_convert_data_dataframe"
        },
        "sklearn/sklearn.datasets._base/_fetch_remote": {
            "target": "sklearn/sklearn.datasets._base/_fetch_remote"
        },
        "sklearn/sklearn.datasets._base/_pkl_filepath": {
            "target": "sklearn/sklearn.datasets._base/_pkl_filepath"
        },
        "sklearn/sklearn.datasets._base/_sha256": {
            "target": "sklearn/sklearn.datasets._base/_sha256"
        },
        "sklearn/sklearn.datasets._base/clear_data_home": {
            "target": "sklearn/sklearn.datasets._base/clear_data_home"
        },
        "sklearn/sklearn.datasets._base/get_data_home": {
            "target": "sklearn/sklearn.datasets._base/get_data_home"
        },
        "sklearn/sklearn.datasets._base/load_csv_data": {
            "target": "sklearn/sklearn.datasets._base/load_csv_data"
        },
        "sklearn/sklearn.datasets._base/load_descr": {
            "target": "sklearn/sklearn.datasets._base/load_descr"
        },
        "sklearn/sklearn.datasets._base/load_gzip_compressed_csv_data": {
            "target": "sklearn/sklearn.datasets._base/load_gzip_compressed_csv_data"
        },
        "sklearn/sklearn.datasets._base/load_linnerud": {
            "target": "sklearn/sklearn.datasets._base/load_linnerud"
        },
        "sklearn/sklearn.datasets._base/load_sample_images": {
            "target": "sklearn/sklearn.datasets._base/load_sample_images"
        },
        "sklearn/sklearn.datasets._california_housing/fetch_california_housing": {
            "target": "sklearn/sklearn.datasets._california_housing/fetch_california_housing"
        },
        "sklearn/sklearn.datasets._covtype/fetch_covtype": {
            "target": "sklearn/sklearn.datasets._covtype/fetch_covtype"
        },
        "sklearn/sklearn.datasets._kddcup99/_fetch_brute_kddcup99": {
            "target": "sklearn/sklearn.datasets._kddcup99/_fetch_brute_kddcup99"
        },
        "sklearn/sklearn.datasets._kddcup99/_mkdirp": {
            "target": "sklearn/sklearn.datasets._kddcup99/_mkdirp"
        },
        "sklearn/sklearn.datasets._kddcup99/fetch_kddcup99": {
            "target": "sklearn/sklearn.datasets._kddcup99/fetch_kddcup99"
        },
        "sklearn/sklearn.datasets._lfw/_check_fetch_lfw": {
            "target": "sklearn/sklearn.datasets._lfw/_check_fetch_lfw"
        },
        "sklearn/sklearn.datasets._lfw/_fetch_lfw_pairs": {
            "target": "sklearn/sklearn.datasets._lfw/_fetch_lfw_pairs"
        },
        "sklearn/sklearn.datasets._lfw/_fetch_lfw_people": {
            "target": "sklearn/sklearn.datasets._lfw/_fetch_lfw_people"
        },
        "sklearn/sklearn.datasets._lfw/_load_imgs": {
            "target": "sklearn/sklearn.datasets._lfw/_load_imgs"
        },
        "sklearn/sklearn.datasets._lfw/fetch_lfw_pairs": {
            "target": "sklearn/sklearn.datasets._lfw/fetch_lfw_pairs"
        },
        "sklearn/sklearn.datasets._lfw/fetch_lfw_people": {
            "target": "sklearn/sklearn.datasets._lfw/fetch_lfw_people"
        },
        "sklearn/sklearn.datasets._olivetti_faces/fetch_olivetti_faces": {
            "target": "sklearn/sklearn.datasets._olivetti_faces/fetch_olivetti_faces"
        },
        "sklearn/sklearn.datasets._openml/_download_data_to_bunch": {
            "target": "sklearn/sklearn.datasets._openml/_download_data_to_bunch"
        },
        "sklearn/sklearn.datasets._openml/_get_data_description_by_id": {
            "target": "sklearn/sklearn.datasets._openml/_get_data_description_by_id"
        },
        "sklearn/sklearn.datasets._openml/_get_data_features": {
            "target": "sklearn/sklearn.datasets._openml/_get_data_features"
        },
        "sklearn/sklearn.datasets._openml/_get_data_info_by_name": {
            "target": "sklearn/sklearn.datasets._openml/_get_data_info_by_name"
        },
        "sklearn/sklearn.datasets._openml/_get_data_qualities": {
            "target": "sklearn/sklearn.datasets._openml/_get_data_qualities"
        },
        "sklearn/sklearn.datasets._openml/_get_json_content_from_openml_api": {
            "target": "sklearn/sklearn.datasets._openml/_get_json_content_from_openml_api"
        },
        "sklearn/sklearn.datasets._openml/_get_local_path": {
            "target": "sklearn/sklearn.datasets._openml/_get_local_path"
        },
        "sklearn/sklearn.datasets._openml/_get_num_samples": {
            "target": "sklearn/sklearn.datasets._openml/_get_num_samples"
        },
        "sklearn/sklearn.datasets._openml/_load_arff_response": {
            "target": "sklearn/sklearn.datasets._openml/_load_arff_response"
        },
        "sklearn/sklearn.datasets._openml/_open_openml_url": {
            "target": "sklearn/sklearn.datasets._openml/_open_openml_url"
        },
        "sklearn/sklearn.datasets._openml/_retry_on_network_error": {
            "target": "sklearn/sklearn.datasets._openml/_retry_on_network_error"
        },
        "sklearn/sklearn.datasets._openml/_retry_with_clean_cache": {
            "target": "sklearn/sklearn.datasets._openml/_retry_with_clean_cache"
        },
        "sklearn/sklearn.datasets._openml/_valid_data_column_names": {
            "target": "sklearn/sklearn.datasets._openml/_valid_data_column_names"
        },
        "sklearn/sklearn.datasets._openml/_verify_target_data_type": {
            "target": "sklearn/sklearn.datasets._openml/_verify_target_data_type"
        },
        "sklearn/sklearn.datasets._rcv1/_find_permutation": {
            "target": "sklearn/sklearn.datasets._rcv1/_find_permutation"
        },
        "sklearn/sklearn.datasets._rcv1/_inverse_permutation": {
            "target": "sklearn/sklearn.datasets._rcv1/_inverse_permutation"
        },
        "sklearn/sklearn.datasets._rcv1/fetch_rcv1": {
            "target": "sklearn/sklearn.datasets._rcv1/fetch_rcv1"
        },
        "sklearn/sklearn.datasets._samples_generator/_generate_hypercube": {
            "target": "sklearn/sklearn.datasets._samples_generator/_generate_hypercube"
        },
        "sklearn/sklearn.datasets._samples_generator/_shuffle": {
            "target": "sklearn/sklearn.datasets._samples_generator/_shuffle"
        },
        "sklearn/sklearn.datasets._samples_generator/make_biclusters": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_biclusters"
        },
        "sklearn/sklearn.datasets._samples_generator/make_checkerboard": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_checkerboard"
        },
        "sklearn/sklearn.datasets._samples_generator/make_friedman1": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_friedman1"
        },
        "sklearn/sklearn.datasets._samples_generator/make_friedman2": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_friedman2"
        },
        "sklearn/sklearn.datasets._samples_generator/make_friedman3": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_friedman3"
        },
        "sklearn/sklearn.datasets._samples_generator/make_gaussian_quantiles": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_gaussian_quantiles"
        },
        "sklearn/sklearn.datasets._samples_generator/make_hastie_10_2": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_hastie_10_2"
        },
        "sklearn/sklearn.datasets._samples_generator/make_low_rank_matrix": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_low_rank_matrix"
        },
        "sklearn/sklearn.datasets._samples_generator/make_s_curve": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_s_curve"
        },
        "sklearn/sklearn.datasets._samples_generator/make_sparse_coded_signal": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_sparse_coded_signal"
        },
        "sklearn/sklearn.datasets._samples_generator/make_sparse_spd_matrix": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_sparse_spd_matrix"
        },
        "sklearn/sklearn.datasets._samples_generator/make_sparse_uncorrelated": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_sparse_uncorrelated"
        },
        "sklearn/sklearn.datasets._samples_generator/make_spd_matrix": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_spd_matrix"
        },
        "sklearn/sklearn.datasets._samples_generator/make_swiss_roll": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_swiss_roll"
        },
        "sklearn/sklearn.datasets._species_distributions/_load_coverage": {
            "target": "sklearn/sklearn.datasets._species_distributions/_load_coverage"
        },
        "sklearn/sklearn.datasets._species_distributions/_load_csv": {
            "target": "sklearn/sklearn.datasets._species_distributions/_load_csv"
        },
        "sklearn/sklearn.datasets._species_distributions/construct_grids": {
            "target": "sklearn/sklearn.datasets._species_distributions/construct_grids"
        },
        "sklearn/sklearn.datasets._species_distributions/fetch_species_distributions": {
            "target": "sklearn/sklearn.datasets._species_distributions/fetch_species_distributions"
        },
        "sklearn/sklearn.datasets._svmlight_format_io/_dump_svmlight": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/_dump_svmlight"
        },
        "sklearn/sklearn.datasets._svmlight_format_io/_gen_open": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/_gen_open"
        },
        "sklearn/sklearn.datasets._svmlight_format_io/_load_svmlight_file": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/_load_svmlight_file"
        },
        "sklearn/sklearn.datasets._svmlight_format_io/_open_and_load": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/_open_and_load"
        },
        "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_files": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/load_svmlight_files"
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/_download_20newsgroups": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/_download_20newsgroups"
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups_vectorized": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups_vectorized"
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/strip_newsgroup_footer": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/strip_newsgroup_footer"
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/strip_newsgroup_header": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/strip_newsgroup_header"
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/strip_newsgroup_quoting": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/strip_newsgroup_quoting"
        },
        "sklearn/sklearn.datasets.setup/configuration": {
            "target": "sklearn/sklearn.datasets.setup/configuration"
        },
        "sklearn/sklearn.decomposition._base/_BasePCA/_n_features_out@getter": {
            "target": "sklearn/sklearn.decomposition._base/_BasePCA/_n_features_out@getter"
        },
        "sklearn/sklearn.decomposition._base/_BasePCA/fit": {
            "target": "sklearn/sklearn.decomposition._base/_BasePCA/fit"
        },
        "sklearn/sklearn.decomposition._base/_BasePCA/get_covariance": {
            "target": "sklearn/sklearn.decomposition._base/_BasePCA/get_covariance"
        },
        "sklearn/sklearn.decomposition._base/_BasePCA/get_precision": {
            "target": "sklearn/sklearn.decomposition._base/_BasePCA/get_precision"
        },
        "sklearn/sklearn.decomposition._base/_BasePCA/inverse_transform": {
            "target": "sklearn/sklearn.decomposition._base/_BasePCA/inverse_transform"
        },
        "sklearn/sklearn.decomposition._base/_BasePCA/transform": {
            "target": "sklearn/sklearn.decomposition._base/_BasePCA/transform"
        },
        "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/__init__": {
            "target": "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/__init__"
        },
        "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/_more_tags": {
            "target": "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/_more_tags"
        },
        "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/_n_features_out@getter": {
            "target": "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/_n_features_out@getter"
        },
        "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/fit": {
            "target": "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/fit"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/__init__": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/__init__"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_check_convergence": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_check_convergence"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_check_params": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_check_params"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_initialize_dict": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_initialize_dict"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_minibatch_step": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_minibatch_step"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_more_tags": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_more_tags"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_n_features_out@getter": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_n_features_out@getter"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_update_inner_stats": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/_update_inner_stats"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/fit": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/fit"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/inner_stats_@getter": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/inner_stats_@getter"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/iter_offset_@getter": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/iter_offset_@getter"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/partial_fit": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/partial_fit"
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/random_state_@getter": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/random_state_@getter"
        },
        "sklearn/sklearn.decomposition._dict_learning/SparseCoder/__init__": {
            "target": "sklearn/sklearn.decomposition._dict_learning/SparseCoder/__init__"
        },
        "sklearn/sklearn.decomposition._dict_learning/SparseCoder/_more_tags": {
            "target": "sklearn/sklearn.decomposition._dict_learning/SparseCoder/_more_tags"
        },
        "sklearn/sklearn.decomposition._dict_learning/SparseCoder/_n_features_out@getter": {
            "target": "sklearn/sklearn.decomposition._dict_learning/SparseCoder/_n_features_out@getter"
        },
        "sklearn/sklearn.decomposition._dict_learning/SparseCoder/fit": {
            "target": "sklearn/sklearn.decomposition._dict_learning/SparseCoder/fit"
        },
        "sklearn/sklearn.decomposition._dict_learning/SparseCoder/n_components_@getter": {
            "target": "sklearn/sklearn.decomposition._dict_learning/SparseCoder/n_components_@getter"
        },
        "sklearn/sklearn.decomposition._dict_learning/SparseCoder/n_features_in_@getter": {
            "target": "sklearn/sklearn.decomposition._dict_learning/SparseCoder/n_features_in_@getter"
        },
        "sklearn/sklearn.decomposition._dict_learning/SparseCoder/transform": {
            "target": "sklearn/sklearn.decomposition._dict_learning/SparseCoder/transform"
        },
        "sklearn/sklearn.decomposition._dict_learning/_BaseSparseCoding/__init__": {
            "target": "sklearn/sklearn.decomposition._dict_learning/_BaseSparseCoding/__init__"
        },
        "sklearn/sklearn.decomposition._dict_learning/_BaseSparseCoding/_transform": {
            "target": "sklearn/sklearn.decomposition._dict_learning/_BaseSparseCoding/_transform"
        },
        "sklearn/sklearn.decomposition._dict_learning/_BaseSparseCoding/transform": {
            "target": "sklearn/sklearn.decomposition._dict_learning/_BaseSparseCoding/transform"
        },
        "sklearn/sklearn.decomposition._dict_learning/_check_positive_coding": {
            "target": "sklearn/sklearn.decomposition._dict_learning/_check_positive_coding"
        },
        "sklearn/sklearn.decomposition._dict_learning/_check_warn_deprecated": {
            "target": "sklearn/sklearn.decomposition._dict_learning/_check_warn_deprecated"
        },
        "sklearn/sklearn.decomposition._dict_learning/_sparse_encode": {
            "target": "sklearn/sklearn.decomposition._dict_learning/_sparse_encode"
        },
        "sklearn/sklearn.decomposition._dict_learning/_update_dict": {
            "target": "sklearn/sklearn.decomposition._dict_learning/_update_dict"
        },
        "sklearn/sklearn.decomposition._dict_learning/dict_learning": {
            "target": "sklearn/sklearn.decomposition._dict_learning/dict_learning"
        },
        "sklearn/sklearn.decomposition._dict_learning/dict_learning_online": {
            "target": "sklearn/sklearn.decomposition._dict_learning/dict_learning_online"
        },
        "sklearn/sklearn.decomposition._dict_learning/sparse_encode": {
            "target": "sklearn/sklearn.decomposition._dict_learning/sparse_encode"
        },
        "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/__init__": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/__init__"
        },
        "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/_n_features_out@getter": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/_n_features_out@getter"
        },
        "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/_rotate": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/_rotate"
        },
        "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/fit": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/fit"
        },
        "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/get_covariance": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/get_covariance"
        },
        "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/get_precision": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/get_precision"
        },
        "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/score": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/score"
        },
        "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/score_samples": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/score_samples"
        },
        "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/transform": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/transform"
        },
        "sklearn/sklearn.decomposition._factor_analysis/_ortho_rotation": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/_ortho_rotation"
        },
        "sklearn/sklearn.decomposition._fastica/FastICA/__init__": {
            "target": "sklearn/sklearn.decomposition._fastica/FastICA/__init__"
        },
        "sklearn/sklearn.decomposition._fastica/FastICA/_fit": {
            "target": "sklearn/sklearn.decomposition._fastica/FastICA/_fit"
        },
        "sklearn/sklearn.decomposition._fastica/FastICA/_more_tags": {
            "target": "sklearn/sklearn.decomposition._fastica/FastICA/_more_tags"
        },
        "sklearn/sklearn.decomposition._fastica/FastICA/_n_features_out@getter": {
            "target": "sklearn/sklearn.decomposition._fastica/FastICA/_n_features_out@getter"
        },
        "sklearn/sklearn.decomposition._fastica/FastICA/fit": {
            "target": "sklearn/sklearn.decomposition._fastica/FastICA/fit"
        },
        "sklearn/sklearn.decomposition._fastica/FastICA/fit_transform": {
            "target": "sklearn/sklearn.decomposition._fastica/FastICA/fit_transform"
        },
        "sklearn/sklearn.decomposition._fastica/FastICA/inverse_transform": {
            "target": "sklearn/sklearn.decomposition._fastica/FastICA/inverse_transform"
        },
        "sklearn/sklearn.decomposition._fastica/FastICA/transform": {
            "target": "sklearn/sklearn.decomposition._fastica/FastICA/transform"
        },
        "sklearn/sklearn.decomposition._fastica/_cube": {
            "target": "sklearn/sklearn.decomposition._fastica/_cube"
        },
        "sklearn/sklearn.decomposition._fastica/_exp": {
            "target": "sklearn/sklearn.decomposition._fastica/_exp"
        },
        "sklearn/sklearn.decomposition._fastica/_gs_decorrelation": {
            "target": "sklearn/sklearn.decomposition._fastica/_gs_decorrelation"
        },
        "sklearn/sklearn.decomposition._fastica/_ica_def": {
            "target": "sklearn/sklearn.decomposition._fastica/_ica_def"
        },
        "sklearn/sklearn.decomposition._fastica/_ica_par": {
            "target": "sklearn/sklearn.decomposition._fastica/_ica_par"
        },
        "sklearn/sklearn.decomposition._fastica/_logcosh": {
            "target": "sklearn/sklearn.decomposition._fastica/_logcosh"
        },
        "sklearn/sklearn.decomposition._fastica/_sym_decorrelation": {
            "target": "sklearn/sklearn.decomposition._fastica/_sym_decorrelation"
        },
        "sklearn/sklearn.decomposition._fastica/fastica": {
            "target": "sklearn/sklearn.decomposition._fastica/fastica"
        },
        "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/__init__": {
            "target": "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/__init__"
        },
        "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/fit": {
            "target": "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/fit"
        },
        "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/partial_fit": {
            "target": "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/partial_fit"
        },
        "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/transform": {
            "target": "sklearn/sklearn.decomposition._incremental_pca/IncrementalPCA/transform"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/__init__": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/__init__"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/_fit_inverse_transform": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/_fit_inverse_transform"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/_fit_transform": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/_fit_transform"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/_get_kernel": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/_get_kernel"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/_more_tags": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/_more_tags"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/_n_features_out@getter": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/_n_features_out@getter"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/alphas_@getter": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/alphas_@getter"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/fit": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/fit"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/fit_transform": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/fit_transform"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/inverse_transform": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/inverse_transform"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/lambdas_@getter": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/lambdas_@getter"
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/transform": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/transform"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/__init__": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/__init__"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_approx_bound": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_approx_bound"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_check_non_neg_array": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_check_non_neg_array"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_check_params": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_check_params"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_e_step": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_e_step"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_em_step": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_em_step"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_init_latent_vars": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_init_latent_vars"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_more_tags": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_more_tags"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_n_features_out@getter": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_n_features_out@getter"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_perplexity_precomp_distr": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_perplexity_precomp_distr"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_unnormalized_transform": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/_unnormalized_transform"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/fit": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/fit"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/partial_fit": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/partial_fit"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/perplexity": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/perplexity"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/score": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/score"
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/transform": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/transform"
        },
        "sklearn/sklearn.decomposition._lda/_update_doc_distribution": {
            "target": "sklearn/sklearn.decomposition._lda/_update_doc_distribution"
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/__init__": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/__init__"
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/_check_params": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/_check_params"
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/_fit_transform": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/_fit_transform"
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/_minibatch_convergence": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/_minibatch_convergence"
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/_minibatch_step": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/_minibatch_step"
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/_solve_W": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/_solve_W"
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/fit_transform": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/fit_transform"
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/partial_fit": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/partial_fit"
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/transform": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/transform"
        },
        "sklearn/sklearn.decomposition._nmf/NMF/__init__": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/__init__"
        },
        "sklearn/sklearn.decomposition._nmf/NMF/_check_params": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/_check_params"
        },
        "sklearn/sklearn.decomposition._nmf/NMF/_check_w_h": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/_check_w_h"
        },
        "sklearn/sklearn.decomposition._nmf/NMF/_fit_transform": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/_fit_transform"
        },
        "sklearn/sklearn.decomposition._nmf/NMF/_more_tags": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/_more_tags"
        },
        "sklearn/sklearn.decomposition._nmf/NMF/_n_features_out@getter": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/_n_features_out@getter"
        },
        "sklearn/sklearn.decomposition._nmf/NMF/_scale_regularization": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/_scale_regularization"
        },
        "sklearn/sklearn.decomposition._nmf/NMF/fit": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/fit"
        },
        "sklearn/sklearn.decomposition._nmf/NMF/fit_transform": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/fit_transform"
        },
        "sklearn/sklearn.decomposition._nmf/NMF/inverse_transform": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/inverse_transform"
        },
        "sklearn/sklearn.decomposition._nmf/NMF/transform": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/transform"
        },
        "sklearn/sklearn.decomposition._nmf/_beta_divergence": {
            "target": "sklearn/sklearn.decomposition._nmf/_beta_divergence"
        },
        "sklearn/sklearn.decomposition._nmf/_beta_loss_to_float": {
            "target": "sklearn/sklearn.decomposition._nmf/_beta_loss_to_float"
        },
        "sklearn/sklearn.decomposition._nmf/_check_init": {
            "target": "sklearn/sklearn.decomposition._nmf/_check_init"
        },
        "sklearn/sklearn.decomposition._nmf/_compute_regularization": {
            "target": "sklearn/sklearn.decomposition._nmf/_compute_regularization"
        },
        "sklearn/sklearn.decomposition._nmf/_fit_coordinate_descent": {
            "target": "sklearn/sklearn.decomposition._nmf/_fit_coordinate_descent"
        },
        "sklearn/sklearn.decomposition._nmf/_fit_multiplicative_update": {
            "target": "sklearn/sklearn.decomposition._nmf/_fit_multiplicative_update"
        },
        "sklearn/sklearn.decomposition._nmf/_initialize_nmf": {
            "target": "sklearn/sklearn.decomposition._nmf/_initialize_nmf"
        },
        "sklearn/sklearn.decomposition._nmf/_multiplicative_update_h": {
            "target": "sklearn/sklearn.decomposition._nmf/_multiplicative_update_h"
        },
        "sklearn/sklearn.decomposition._nmf/_multiplicative_update_w": {
            "target": "sklearn/sklearn.decomposition._nmf/_multiplicative_update_w"
        },
        "sklearn/sklearn.decomposition._nmf/_special_sparse_dot": {
            "target": "sklearn/sklearn.decomposition._nmf/_special_sparse_dot"
        },
        "sklearn/sklearn.decomposition._nmf/_update_coordinate_descent": {
            "target": "sklearn/sklearn.decomposition._nmf/_update_coordinate_descent"
        },
        "sklearn/sklearn.decomposition._nmf/non_negative_factorization": {
            "target": "sklearn/sklearn.decomposition._nmf/non_negative_factorization"
        },
        "sklearn/sklearn.decomposition._nmf/norm": {
            "target": "sklearn/sklearn.decomposition._nmf/norm"
        },
        "sklearn/sklearn.decomposition._nmf/trace_dot": {
            "target": "sklearn/sklearn.decomposition._nmf/trace_dot"
        },
        "sklearn/sklearn.decomposition._pca/PCA/__init__": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/__init__"
        },
        "sklearn/sklearn.decomposition._pca/PCA/_fit": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/_fit"
        },
        "sklearn/sklearn.decomposition._pca/PCA/_fit_full": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/_fit_full"
        },
        "sklearn/sklearn.decomposition._pca/PCA/_fit_truncated": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/_fit_truncated"
        },
        "sklearn/sklearn.decomposition._pca/PCA/_more_tags": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/_more_tags"
        },
        "sklearn/sklearn.decomposition._pca/PCA/fit": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/fit"
        },
        "sklearn/sklearn.decomposition._pca/PCA/fit_transform": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/fit_transform"
        },
        "sklearn/sklearn.decomposition._pca/PCA/score": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/score"
        },
        "sklearn/sklearn.decomposition._pca/PCA/score_samples": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/score_samples"
        },
        "sklearn/sklearn.decomposition._pca/_assess_dimension": {
            "target": "sklearn/sklearn.decomposition._pca/_assess_dimension"
        },
        "sklearn/sklearn.decomposition._pca/_infer_dimension": {
            "target": "sklearn/sklearn.decomposition._pca/_infer_dimension"
        },
        "sklearn/sklearn.decomposition._sparse_pca/MiniBatchSparsePCA/__init__": {
            "target": "sklearn/sklearn.decomposition._sparse_pca/MiniBatchSparsePCA/__init__"
        },
        "sklearn/sklearn.decomposition._sparse_pca/MiniBatchSparsePCA/fit": {
            "target": "sklearn/sklearn.decomposition._sparse_pca/MiniBatchSparsePCA/fit"
        },
        "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/__init__": {
            "target": "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/__init__"
        },
        "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/_more_tags": {
            "target": "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/_more_tags"
        },
        "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/_n_features_out@getter": {
            "target": "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/_n_features_out@getter"
        },
        "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/fit": {
            "target": "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/fit"
        },
        "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/transform": {
            "target": "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/transform"
        },
        "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/__init__": {
            "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/__init__"
        },
        "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/_more_tags": {
            "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/_more_tags"
        },
        "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/_n_features_out@getter": {
            "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/_n_features_out@getter"
        },
        "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/fit": {
            "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/fit"
        },
        "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/fit_transform": {
            "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/fit_transform"
        },
        "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/inverse_transform": {
            "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/inverse_transform"
        },
        "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/transform": {
            "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/transform"
        },
        "sklearn/sklearn.decomposition.setup/configuration": {
            "target": "sklearn/sklearn.decomposition.setup/configuration"
        },
        "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/_solve_eigen": {
            "target": "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/_solve_eigen"
        },
        "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/_solve_lsqr": {
            "target": "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/_solve_lsqr"
        },
        "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/_solve_svd": {
            "target": "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/_solve_svd"
        },
        "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/decision_function": {
            "target": "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/decision_function"
        },
        "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/predict_log_proba": {
            "target": "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/predict_log_proba"
        },
        "sklearn/sklearn.discriminant_analysis/QuadraticDiscriminantAnalysis/_decision_function": {
            "target": "sklearn/sklearn.discriminant_analysis/QuadraticDiscriminantAnalysis/_decision_function"
        },
        "sklearn/sklearn.discriminant_analysis/QuadraticDiscriminantAnalysis/decision_function": {
            "target": "sklearn/sklearn.discriminant_analysis/QuadraticDiscriminantAnalysis/decision_function"
        },
        "sklearn/sklearn.discriminant_analysis/QuadraticDiscriminantAnalysis/predict_log_proba": {
            "target": "sklearn/sklearn.discriminant_analysis/QuadraticDiscriminantAnalysis/predict_log_proba"
        },
        "sklearn/sklearn.discriminant_analysis/_class_cov": {
            "target": "sklearn/sklearn.discriminant_analysis/_class_cov"
        },
        "sklearn/sklearn.discriminant_analysis/_class_means": {
            "target": "sklearn/sklearn.discriminant_analysis/_class_means"
        },
        "sklearn/sklearn.discriminant_analysis/_cov": {
            "target": "sklearn/sklearn.discriminant_analysis/_cov"
        },
        "sklearn/sklearn.dummy/DummyClassifier/_more_tags": {
            "target": "sklearn/sklearn.dummy/DummyClassifier/_more_tags"
        },
        "sklearn/sklearn.dummy/DummyClassifier/n_features_in_@getter": {
            "target": "sklearn/sklearn.dummy/DummyClassifier/n_features_in_@getter"
        },
        "sklearn/sklearn.dummy/DummyClassifier/predict_log_proba": {
            "target": "sklearn/sklearn.dummy/DummyClassifier/predict_log_proba"
        },
        "sklearn/sklearn.dummy/DummyRegressor/_more_tags": {
            "target": "sklearn/sklearn.dummy/DummyRegressor/_more_tags"
        },
        "sklearn/sklearn.dummy/DummyRegressor/n_features_in_@getter": {
            "target": "sklearn/sklearn.dummy/DummyRegressor/n_features_in_@getter"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingClassifier/__init__": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/__init__"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingClassifier/_set_oob_score": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/_set_oob_score"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingClassifier/_validate_estimator": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/_validate_estimator"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingClassifier/_validate_y": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/_validate_y"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingClassifier/decision_function": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/decision_function"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict_log_proba": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict_log_proba"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict_proba": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingClassifier/predict_proba"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingRegressor/__init__": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingRegressor/__init__"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingRegressor/_set_oob_score": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingRegressor/_set_oob_score"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingRegressor/_validate_estimator": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingRegressor/_validate_estimator"
        },
        "sklearn/sklearn.ensemble._bagging/BaggingRegressor/predict": {
            "target": "sklearn/sklearn.ensemble._bagging/BaggingRegressor/predict"
        },
        "sklearn/sklearn.ensemble._bagging/BaseBagging/__init__": {
            "target": "sklearn/sklearn.ensemble._bagging/BaseBagging/__init__"
        },
        "sklearn/sklearn.ensemble._bagging/BaseBagging/_fit": {
            "target": "sklearn/sklearn.ensemble._bagging/BaseBagging/_fit"
        },
        "sklearn/sklearn.ensemble._bagging/BaseBagging/_get_estimators_indices": {
            "target": "sklearn/sklearn.ensemble._bagging/BaseBagging/_get_estimators_indices"
        },
        "sklearn/sklearn.ensemble._bagging/BaseBagging/_parallel_args": {
            "target": "sklearn/sklearn.ensemble._bagging/BaseBagging/_parallel_args"
        },
        "sklearn/sklearn.ensemble._bagging/BaseBagging/_set_oob_score": {
            "target": "sklearn/sklearn.ensemble._bagging/BaseBagging/_set_oob_score"
        },
        "sklearn/sklearn.ensemble._bagging/BaseBagging/_validate_y": {
            "target": "sklearn/sklearn.ensemble._bagging/BaseBagging/_validate_y"
        },
        "sklearn/sklearn.ensemble._bagging/BaseBagging/estimators_samples_@getter": {
            "target": "sklearn/sklearn.ensemble._bagging/BaseBagging/estimators_samples_@getter"
        },
        "sklearn/sklearn.ensemble._bagging/BaseBagging/fit": {
            "target": "sklearn/sklearn.ensemble._bagging/BaseBagging/fit"
        },
        "sklearn/sklearn.ensemble._bagging/BaseBagging/n_features_@getter": {
            "target": "sklearn/sklearn.ensemble._bagging/BaseBagging/n_features_@getter"
        },
        "sklearn/sklearn.ensemble._bagging/_estimator_has": {
            "target": "sklearn/sklearn.ensemble._bagging/_estimator_has"
        },
        "sklearn/sklearn.ensemble._bagging/_generate_bagging_indices": {
            "target": "sklearn/sklearn.ensemble._bagging/_generate_bagging_indices"
        },
        "sklearn/sklearn.ensemble._bagging/_generate_indices": {
            "target": "sklearn/sklearn.ensemble._bagging/_generate_indices"
        },
        "sklearn/sklearn.ensemble._bagging/_parallel_build_estimators": {
            "target": "sklearn/sklearn.ensemble._bagging/_parallel_build_estimators"
        },
        "sklearn/sklearn.ensemble._bagging/_parallel_decision_function": {
            "target": "sklearn/sklearn.ensemble._bagging/_parallel_decision_function"
        },
        "sklearn/sklearn.ensemble._bagging/_parallel_predict_log_proba": {
            "target": "sklearn/sklearn.ensemble._bagging/_parallel_predict_log_proba"
        },
        "sklearn/sklearn.ensemble._bagging/_parallel_predict_proba": {
            "target": "sklearn/sklearn.ensemble._bagging/_parallel_predict_proba"
        },
        "sklearn/sklearn.ensemble._bagging/_parallel_predict_regression": {
            "target": "sklearn/sklearn.ensemble._bagging/_parallel_predict_regression"
        },
        "sklearn/sklearn.ensemble._base/BaseEnsemble/__getitem__": {
            "target": "sklearn/sklearn.ensemble._base/BaseEnsemble/__getitem__"
        },
        "sklearn/sklearn.ensemble._base/BaseEnsemble/__init__": {
            "target": "sklearn/sklearn.ensemble._base/BaseEnsemble/__init__"
        },
        "sklearn/sklearn.ensemble._base/BaseEnsemble/__iter__": {
            "target": "sklearn/sklearn.ensemble._base/BaseEnsemble/__iter__"
        },
        "sklearn/sklearn.ensemble._base/BaseEnsemble/__len__": {
            "target": "sklearn/sklearn.ensemble._base/BaseEnsemble/__len__"
        },
        "sklearn/sklearn.ensemble._base/BaseEnsemble/_make_estimator": {
            "target": "sklearn/sklearn.ensemble._base/BaseEnsemble/_make_estimator"
        },
        "sklearn/sklearn.ensemble._base/BaseEnsemble/_validate_estimator": {
            "target": "sklearn/sklearn.ensemble._base/BaseEnsemble/_validate_estimator"
        },
        "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble/__init__": {
            "target": "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble/__init__"
        },
        "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble/_validate_estimators": {
            "target": "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble/_validate_estimators"
        },
        "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble/get_params": {
            "target": "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble/get_params"
        },
        "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble/named_estimators@getter": {
            "target": "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble/named_estimators@getter"
        },
        "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble/set_params": {
            "target": "sklearn/sklearn.ensemble._base/_BaseHeterogeneousEnsemble/set_params"
        },
        "sklearn/sklearn.ensemble._base/_fit_single_estimator": {
            "target": "sklearn/sklearn.ensemble._base/_fit_single_estimator"
        },
        "sklearn/sklearn.ensemble._base/_partition_estimators": {
            "target": "sklearn/sklearn.ensemble._base/_partition_estimators"
        },
        "sklearn/sklearn.ensemble._base/_set_random_states": {
            "target": "sklearn/sklearn.ensemble._base/_set_random_states"
        },
        "sklearn/sklearn.ensemble._forest/BaseForest/__init__": {
            "target": "sklearn/sklearn.ensemble._forest/BaseForest/__init__"
        },
        "sklearn/sklearn.ensemble._forest/BaseForest/_compute_oob_predictions": {
            "target": "sklearn/sklearn.ensemble._forest/BaseForest/_compute_oob_predictions"
        },
        "sklearn/sklearn.ensemble._forest/BaseForest/_set_oob_score_and_attributes": {
            "target": "sklearn/sklearn.ensemble._forest/BaseForest/_set_oob_score_and_attributes"
        },
        "sklearn/sklearn.ensemble._forest/BaseForest/_validate_X_predict": {
            "target": "sklearn/sklearn.ensemble._forest/BaseForest/_validate_X_predict"
        },
        "sklearn/sklearn.ensemble._forest/BaseForest/_validate_y_class_weight": {
            "target": "sklearn/sklearn.ensemble._forest/BaseForest/_validate_y_class_weight"
        },
        "sklearn/sklearn.ensemble._forest/BaseForest/apply": {
            "target": "sklearn/sklearn.ensemble._forest/BaseForest/apply"
        },
        "sklearn/sklearn.ensemble._forest/BaseForest/decision_path": {
            "target": "sklearn/sklearn.ensemble._forest/BaseForest/decision_path"
        },
        "sklearn/sklearn.ensemble._forest/BaseForest/feature_importances_@getter": {
            "target": "sklearn/sklearn.ensemble._forest/BaseForest/feature_importances_@getter"
        },
        "sklearn/sklearn.ensemble._forest/BaseForest/fit": {
            "target": "sklearn/sklearn.ensemble._forest/BaseForest/fit"
        },
        "sklearn/sklearn.ensemble._forest/BaseForest/n_features_@getter": {
            "target": "sklearn/sklearn.ensemble._forest/BaseForest/n_features_@getter"
        },
        "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__": {
            "target": "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__"
        },
        "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__": {
            "target": "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__"
        },
        "sklearn/sklearn.ensemble._forest/ForestClassifier/__init__": {
            "target": "sklearn/sklearn.ensemble._forest/ForestClassifier/__init__"
        },
        "sklearn/sklearn.ensemble._forest/ForestClassifier/_get_oob_predictions": {
            "target": "sklearn/sklearn.ensemble._forest/ForestClassifier/_get_oob_predictions"
        },
        "sklearn/sklearn.ensemble._forest/ForestClassifier/_more_tags": {
            "target": "sklearn/sklearn.ensemble._forest/ForestClassifier/_more_tags"
        },
        "sklearn/sklearn.ensemble._forest/ForestClassifier/_set_oob_score_and_attributes": {
            "target": "sklearn/sklearn.ensemble._forest/ForestClassifier/_set_oob_score_and_attributes"
        },
        "sklearn/sklearn.ensemble._forest/ForestClassifier/_validate_y_class_weight": {
            "target": "sklearn/sklearn.ensemble._forest/ForestClassifier/_validate_y_class_weight"
        },
        "sklearn/sklearn.ensemble._forest/ForestClassifier/predict": {
            "target": "sklearn/sklearn.ensemble._forest/ForestClassifier/predict"
        },
        "sklearn/sklearn.ensemble._forest/ForestClassifier/predict_log_proba": {
            "target": "sklearn/sklearn.ensemble._forest/ForestClassifier/predict_log_proba"
        },
        "sklearn/sklearn.ensemble._forest/ForestClassifier/predict_proba": {
            "target": "sklearn/sklearn.ensemble._forest/ForestClassifier/predict_proba"
        },
        "sklearn/sklearn.ensemble._forest/ForestRegressor/__init__": {
            "target": "sklearn/sklearn.ensemble._forest/ForestRegressor/__init__"
        },
        "sklearn/sklearn.ensemble._forest/ForestRegressor/_compute_partial_dependence_recursion": {
            "target": "sklearn/sklearn.ensemble._forest/ForestRegressor/_compute_partial_dependence_recursion"
        },
        "sklearn/sklearn.ensemble._forest/ForestRegressor/_get_oob_predictions": {
            "target": "sklearn/sklearn.ensemble._forest/ForestRegressor/_get_oob_predictions"
        },
        "sklearn/sklearn.ensemble._forest/ForestRegressor/_more_tags": {
            "target": "sklearn/sklearn.ensemble._forest/ForestRegressor/_more_tags"
        },
        "sklearn/sklearn.ensemble._forest/ForestRegressor/_set_oob_score_and_attributes": {
            "target": "sklearn/sklearn.ensemble._forest/ForestRegressor/_set_oob_score_and_attributes"
        },
        "sklearn/sklearn.ensemble._forest/ForestRegressor/predict": {
            "target": "sklearn/sklearn.ensemble._forest/ForestRegressor/predict"
        },
        "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__": {
            "target": "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__"
        },
        "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__": {
            "target": "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__"
        },
        "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/__init__": {
            "target": "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/__init__"
        },
        "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/_set_oob_score_and_attributes": {
            "target": "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/_set_oob_score_and_attributes"
        },
        "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/fit": {
            "target": "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/fit"
        },
        "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/fit_transform": {
            "target": "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/fit_transform"
        },
        "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/get_feature_names_out": {
            "target": "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/get_feature_names_out"
        },
        "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/transform": {
            "target": "sklearn/sklearn.ensemble._forest/RandomTreesEmbedding/transform"
        },
        "sklearn/sklearn.ensemble._forest/_accumulate_prediction": {
            "target": "sklearn/sklearn.ensemble._forest/_accumulate_prediction"
        },
        "sklearn/sklearn.ensemble._forest/_generate_sample_indices": {
            "target": "sklearn/sklearn.ensemble._forest/_generate_sample_indices"
        },
        "sklearn/sklearn.ensemble._forest/_generate_unsampled_indices": {
            "target": "sklearn/sklearn.ensemble._forest/_generate_unsampled_indices"
        },
        "sklearn/sklearn.ensemble._forest/_get_n_samples_bootstrap": {
            "target": "sklearn/sklearn.ensemble._forest/_get_n_samples_bootstrap"
        },
        "sklearn/sklearn.ensemble._forest/_parallel_build_trees": {
            "target": "sklearn/sklearn.ensemble._forest/_parallel_build_trees"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/__init__": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/__init__"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_check_initialized": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_check_initialized"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_check_params": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_check_params"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_clear_state": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_clear_state"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_compute_partial_dependence_recursion": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_compute_partial_dependence_recursion"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_fit_stage": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_fit_stage"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_fit_stages": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_fit_stages"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_init_state": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_init_state"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_is_initialized": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_is_initialized"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_make_estimator": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_make_estimator"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_raw_predict": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_raw_predict"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_raw_predict_init": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_raw_predict_init"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_resize_state": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_resize_state"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_staged_raw_predict": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_staged_raw_predict"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_validate_y": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/_validate_y"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/apply": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/apply"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/feature_importances_@getter": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/feature_importances_@getter"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/fit": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/fit"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/loss_@getter": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/loss_@getter"
        },
        "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/n_features_@getter": {
            "target": "sklearn/sklearn.ensemble._gb/BaseGradientBoosting/n_features_@getter"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/_validate_y": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/_validate_y"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/decision_function": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/decision_function"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict_log_proba": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict_log_proba"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict_proba": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/predict_proba"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_decision_function": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_decision_function"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_predict": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_predict"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_predict_proba": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/staged_predict_proba"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/_validate_y": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/_validate_y"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/apply": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/apply"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/predict": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/predict"
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/staged_predict": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/staged_predict"
        },
        "sklearn/sklearn.ensemble._gb/VerboseReporter/__init__": {
            "target": "sklearn/sklearn.ensemble._gb/VerboseReporter/__init__"
        },
        "sklearn/sklearn.ensemble._gb/VerboseReporter/init": {
            "target": "sklearn/sklearn.ensemble._gb/VerboseReporter/init"
        },
        "sklearn/sklearn.ensemble._gb/VerboseReporter/update": {
            "target": "sklearn/sklearn.ensemble._gb/VerboseReporter/update"
        },
        "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/__call__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/__call__"
        },
        "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/__init__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/__init__"
        },
        "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/_raw_prediction_to_decision": {
            "target": "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/_raw_prediction_to_decision"
        },
        "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/_raw_prediction_to_proba": {
            "target": "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/_raw_prediction_to_proba"
        },
        "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/_update_terminal_region": {
            "target": "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/_update_terminal_region"
        },
        "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/get_init_raw_predictions": {
            "target": "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/get_init_raw_predictions"
        },
        "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/init_estimator": {
            "target": "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/init_estimator"
        },
        "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/negative_gradient": {
            "target": "sklearn/sklearn.ensemble._gb_losses/BinomialDeviance/negative_gradient"
        },
        "sklearn/sklearn.ensemble._gb_losses/ClassificationLossFunction/_raw_prediction_to_decision": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ClassificationLossFunction/_raw_prediction_to_decision"
        },
        "sklearn/sklearn.ensemble._gb_losses/ClassificationLossFunction/_raw_prediction_to_proba": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ClassificationLossFunction/_raw_prediction_to_proba"
        },
        "sklearn/sklearn.ensemble._gb_losses/ClassificationLossFunction/check_init_estimator": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ClassificationLossFunction/check_init_estimator"
        },
        "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/__call__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/__call__"
        },
        "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/__init__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/__init__"
        },
        "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/_raw_prediction_to_decision": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/_raw_prediction_to_decision"
        },
        "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/_raw_prediction_to_proba": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/_raw_prediction_to_proba"
        },
        "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/_update_terminal_region": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/_update_terminal_region"
        },
        "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/get_init_raw_predictions": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/get_init_raw_predictions"
        },
        "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/init_estimator": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/init_estimator"
        },
        "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/negative_gradient": {
            "target": "sklearn/sklearn.ensemble._gb_losses/ExponentialLoss/negative_gradient"
        },
        "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction/__call__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction/__call__"
        },
        "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction/__init__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction/__init__"
        },
        "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction/_update_terminal_region": {
            "target": "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction/_update_terminal_region"
        },
        "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction/init_estimator": {
            "target": "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction/init_estimator"
        },
        "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction/negative_gradient": {
            "target": "sklearn/sklearn.ensemble._gb_losses/HuberLossFunction/negative_gradient"
        },
        "sklearn/sklearn.ensemble._gb_losses/LeastAbsoluteError/__call__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LeastAbsoluteError/__call__"
        },
        "sklearn/sklearn.ensemble._gb_losses/LeastAbsoluteError/_update_terminal_region": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LeastAbsoluteError/_update_terminal_region"
        },
        "sklearn/sklearn.ensemble._gb_losses/LeastAbsoluteError/init_estimator": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LeastAbsoluteError/init_estimator"
        },
        "sklearn/sklearn.ensemble._gb_losses/LeastAbsoluteError/negative_gradient": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LeastAbsoluteError/negative_gradient"
        },
        "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError/__call__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError/__call__"
        },
        "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError/_update_terminal_region": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError/_update_terminal_region"
        },
        "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError/init_estimator": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError/init_estimator"
        },
        "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError/negative_gradient": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError/negative_gradient"
        },
        "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError/update_terminal_regions": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LeastSquaresError/update_terminal_regions"
        },
        "sklearn/sklearn.ensemble._gb_losses/LossFunction/__call__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LossFunction/__call__"
        },
        "sklearn/sklearn.ensemble._gb_losses/LossFunction/__init__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LossFunction/__init__"
        },
        "sklearn/sklearn.ensemble._gb_losses/LossFunction/_update_terminal_region": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LossFunction/_update_terminal_region"
        },
        "sklearn/sklearn.ensemble._gb_losses/LossFunction/get_init_raw_predictions": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LossFunction/get_init_raw_predictions"
        },
        "sklearn/sklearn.ensemble._gb_losses/LossFunction/init_estimator": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LossFunction/init_estimator"
        },
        "sklearn/sklearn.ensemble._gb_losses/LossFunction/negative_gradient": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LossFunction/negative_gradient"
        },
        "sklearn/sklearn.ensemble._gb_losses/LossFunction/update_terminal_regions": {
            "target": "sklearn/sklearn.ensemble._gb_losses/LossFunction/update_terminal_regions"
        },
        "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/__call__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/__call__"
        },
        "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/__init__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/__init__"
        },
        "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/_raw_prediction_to_decision": {
            "target": "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/_raw_prediction_to_decision"
        },
        "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/_raw_prediction_to_proba": {
            "target": "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/_raw_prediction_to_proba"
        },
        "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/_update_terminal_region": {
            "target": "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/_update_terminal_region"
        },
        "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/get_init_raw_predictions": {
            "target": "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/get_init_raw_predictions"
        },
        "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/init_estimator": {
            "target": "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/init_estimator"
        },
        "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/negative_gradient": {
            "target": "sklearn/sklearn.ensemble._gb_losses/MultinomialDeviance/negative_gradient"
        },
        "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction/__call__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction/__call__"
        },
        "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction/__init__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction/__init__"
        },
        "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction/_update_terminal_region": {
            "target": "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction/_update_terminal_region"
        },
        "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction/init_estimator": {
            "target": "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction/init_estimator"
        },
        "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction/negative_gradient": {
            "target": "sklearn/sklearn.ensemble._gb_losses/QuantileLossFunction/negative_gradient"
        },
        "sklearn/sklearn.ensemble._gb_losses/RegressionLossFunction/__init__": {
            "target": "sklearn/sklearn.ensemble._gb_losses/RegressionLossFunction/__init__"
        },
        "sklearn/sklearn.ensemble._gb_losses/RegressionLossFunction/check_init_estimator": {
            "target": "sklearn/sklearn.ensemble._gb_losses/RegressionLossFunction/check_init_estimator"
        },
        "sklearn/sklearn.ensemble._gb_losses/RegressionLossFunction/get_init_raw_predictions": {
            "target": "sklearn/sklearn.ensemble._gb_losses/RegressionLossFunction/get_init_raw_predictions"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper/__init__": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper/__init__"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper/fit": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper/fit"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper/make_known_categories_bitsets": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper/make_known_categories_bitsets"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper/transform": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_BinMapper/transform"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_find_binning_thresholds": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.binning/_find_binning_thresholds"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/__init__": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/__init__"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_bin_data": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_bin_data"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_check_categories": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_check_categories"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_check_early_stopping_loss": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_check_early_stopping_loss"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_check_early_stopping_scorer": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_check_early_stopping_scorer"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_clear_state": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_clear_state"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_compute_partial_dependence_recursion": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_compute_partial_dependence_recursion"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_encode_y": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_encode_y"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_get_loss": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_get_loss"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_get_small_trainset": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_get_small_trainset"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_is_fitted": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_is_fitted"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_more_tags": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_more_tags"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_predict_iterations": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_predict_iterations"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_print_iteration_stats": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_print_iteration_stats"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_raw_predict": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_raw_predict"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_should_stop": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_should_stop"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_staged_raw_predict": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_staged_raw_predict"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_validate_parameters": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/_validate_parameters"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/fit": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/fit"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/n_iter_@getter": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/BaseHistGradientBoosting/n_iter_@getter"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/__init__": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/__init__"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/_encode_y": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/_encode_y"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/_get_loss": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/_get_loss"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/decision_function": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/decision_function"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/predict": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/predict"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/predict_proba": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/predict_proba"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/staged_decision_function": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/staged_decision_function"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/staged_predict": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/staged_predict"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/staged_predict_proba": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/staged_predict_proba"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/__init__": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/__init__"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/_encode_y": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/_encode_y"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/_get_loss": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/_get_loss"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/predict": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/predict"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/staged_predict": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/staged_predict"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/_update_leaves_values": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/_update_leaves_values"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/__init__": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/__init__"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_apply_shrinkage": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_apply_shrinkage"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_compute_best_split_and_push": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_compute_best_split_and_push"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_finalize_leaf": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_finalize_leaf"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_finalize_splittable_nodes": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_finalize_splittable_nodes"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_intilialize_root": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_intilialize_root"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_validate_parameters": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/_validate_parameters"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/grow": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/grow"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/make_predictor": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/make_predictor"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/split_next": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeGrower/split_next"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeNode/__init__": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeNode/__init__"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeNode/__lt__": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeNode/__lt__"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeNode/set_children_bounds": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/TreeNode/set_children_bounds"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/_fill_predictor_arrays": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.grower/_fill_predictor_arrays"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/__init__": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/__init__"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/compute_partial_dependence": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/compute_partial_dependence"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/get_max_depth": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/get_max_depth"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/get_n_leaf_nodes": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/get_n_leaf_nodes"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/predict": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/predict"
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/predict_binned": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.predictor/TreePredictor/predict_binned"
        },
        "sklearn/sklearn.ensemble._iforest/IsolationForest/__init__": {
            "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/__init__"
        },
        "sklearn/sklearn.ensemble._iforest/IsolationForest/_compute_chunked_score_samples": {
            "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/_compute_chunked_score_samples"
        },
        "sklearn/sklearn.ensemble._iforest/IsolationForest/_compute_score_samples": {
            "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/_compute_score_samples"
        },
        "sklearn/sklearn.ensemble._iforest/IsolationForest/_more_tags": {
            "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/_more_tags"
        },
        "sklearn/sklearn.ensemble._iforest/IsolationForest/_parallel_args": {
            "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/_parallel_args"
        },
        "sklearn/sklearn.ensemble._iforest/IsolationForest/_set_oob_score": {
            "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/_set_oob_score"
        },
        "sklearn/sklearn.ensemble._iforest/IsolationForest/decision_function": {
            "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/decision_function"
        },
        "sklearn/sklearn.ensemble._iforest/IsolationForest/fit": {
            "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/fit"
        },
        "sklearn/sklearn.ensemble._iforest/IsolationForest/predict": {
            "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/predict"
        },
        "sklearn/sklearn.ensemble._iforest/IsolationForest/score_samples": {
            "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/score_samples"
        },
        "sklearn/sklearn.ensemble._iforest/_average_path_length": {
            "target": "sklearn/sklearn.ensemble._iforest/_average_path_length"
        },
        "sklearn/sklearn.ensemble._stacking/StackingClassifier/__init__": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/__init__"
        },
        "sklearn/sklearn.ensemble._stacking/StackingClassifier/_sk_visual_block_": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/_sk_visual_block_"
        },
        "sklearn/sklearn.ensemble._stacking/StackingClassifier/_validate_final_estimator": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/_validate_final_estimator"
        },
        "sklearn/sklearn.ensemble._stacking/StackingClassifier/decision_function": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/decision_function"
        },
        "sklearn/sklearn.ensemble._stacking/StackingClassifier/fit": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/fit"
        },
        "sklearn/sklearn.ensemble._stacking/StackingClassifier/predict": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/predict"
        },
        "sklearn/sklearn.ensemble._stacking/StackingClassifier/predict_proba": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/predict_proba"
        },
        "sklearn/sklearn.ensemble._stacking/StackingClassifier/transform": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/transform"
        },
        "sklearn/sklearn.ensemble._stacking/StackingRegressor/__init__": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingRegressor/__init__"
        },
        "sklearn/sklearn.ensemble._stacking/StackingRegressor/_sk_visual_block_": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingRegressor/_sk_visual_block_"
        },
        "sklearn/sklearn.ensemble._stacking/StackingRegressor/_validate_final_estimator": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingRegressor/_validate_final_estimator"
        },
        "sklearn/sklearn.ensemble._stacking/StackingRegressor/fit": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingRegressor/fit"
        },
        "sklearn/sklearn.ensemble._stacking/StackingRegressor/transform": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingRegressor/transform"
        },
        "sklearn/sklearn.ensemble._stacking/_BaseStacking/__init__": {
            "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/__init__"
        },
        "sklearn/sklearn.ensemble._stacking/_BaseStacking/_clone_final_estimator": {
            "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/_clone_final_estimator"
        },
        "sklearn/sklearn.ensemble._stacking/_BaseStacking/_concatenate_predictions": {
            "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/_concatenate_predictions"
        },
        "sklearn/sklearn.ensemble._stacking/_BaseStacking/_method_name": {
            "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/_method_name"
        },
        "sklearn/sklearn.ensemble._stacking/_BaseStacking/_sk_visual_block_": {
            "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/_sk_visual_block_"
        },
        "sklearn/sklearn.ensemble._stacking/_BaseStacking/_transform": {
            "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/_transform"
        },
        "sklearn/sklearn.ensemble._stacking/_BaseStacking/fit": {
            "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/fit"
        },
        "sklearn/sklearn.ensemble._stacking/_BaseStacking/get_feature_names_out": {
            "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/get_feature_names_out"
        },
        "sklearn/sklearn.ensemble._stacking/_BaseStacking/n_features_in_@getter": {
            "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/n_features_in_@getter"
        },
        "sklearn/sklearn.ensemble._stacking/_BaseStacking/predict": {
            "target": "sklearn/sklearn.ensemble._stacking/_BaseStacking/predict"
        },
        "sklearn/sklearn.ensemble._stacking/_estimator_has": {
            "target": "sklearn/sklearn.ensemble._stacking/_estimator_has"
        },
        "sklearn/sklearn.ensemble._voting/VotingClassifier/__init__": {
            "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/__init__"
        },
        "sklearn/sklearn.ensemble._voting/VotingClassifier/_check_voting": {
            "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/_check_voting"
        },
        "sklearn/sklearn.ensemble._voting/VotingClassifier/_collect_probas": {
            "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/_collect_probas"
        },
        "sklearn/sklearn.ensemble._voting/VotingClassifier/fit": {
            "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/fit"
        },
        "sklearn/sklearn.ensemble._voting/VotingClassifier/get_feature_names_out": {
            "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/get_feature_names_out"
        },
        "sklearn/sklearn.ensemble._voting/VotingClassifier/predict": {
            "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/predict"
        },
        "sklearn/sklearn.ensemble._voting/VotingClassifier/predict_proba": {
            "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/predict_proba"
        },
        "sklearn/sklearn.ensemble._voting/VotingClassifier/transform": {
            "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/transform"
        },
        "sklearn/sklearn.ensemble._voting/VotingRegressor/__init__": {
            "target": "sklearn/sklearn.ensemble._voting/VotingRegressor/__init__"
        },
        "sklearn/sklearn.ensemble._voting/VotingRegressor/fit": {
            "target": "sklearn/sklearn.ensemble._voting/VotingRegressor/fit"
        },
        "sklearn/sklearn.ensemble._voting/VotingRegressor/get_feature_names_out": {
            "target": "sklearn/sklearn.ensemble._voting/VotingRegressor/get_feature_names_out"
        },
        "sklearn/sklearn.ensemble._voting/VotingRegressor/predict": {
            "target": "sklearn/sklearn.ensemble._voting/VotingRegressor/predict"
        },
        "sklearn/sklearn.ensemble._voting/VotingRegressor/transform": {
            "target": "sklearn/sklearn.ensemble._voting/VotingRegressor/transform"
        },
        "sklearn/sklearn.ensemble._voting/_BaseVoting/_log_message": {
            "target": "sklearn/sklearn.ensemble._voting/_BaseVoting/_log_message"
        },
        "sklearn/sklearn.ensemble._voting/_BaseVoting/_more_tags": {
            "target": "sklearn/sklearn.ensemble._voting/_BaseVoting/_more_tags"
        },
        "sklearn/sklearn.ensemble._voting/_BaseVoting/_predict": {
            "target": "sklearn/sklearn.ensemble._voting/_BaseVoting/_predict"
        },
        "sklearn/sklearn.ensemble._voting/_BaseVoting/_sk_visual_block_": {
            "target": "sklearn/sklearn.ensemble._voting/_BaseVoting/_sk_visual_block_"
        },
        "sklearn/sklearn.ensemble._voting/_BaseVoting/_weights_not_none@getter": {
            "target": "sklearn/sklearn.ensemble._voting/_BaseVoting/_weights_not_none@getter"
        },
        "sklearn/sklearn.ensemble._voting/_BaseVoting/fit": {
            "target": "sklearn/sklearn.ensemble._voting/_BaseVoting/fit"
        },
        "sklearn/sklearn.ensemble._voting/_BaseVoting/fit_transform": {
            "target": "sklearn/sklearn.ensemble._voting/_BaseVoting/fit_transform"
        },
        "sklearn/sklearn.ensemble._voting/_BaseVoting/n_features_in_@getter": {
            "target": "sklearn/sklearn.ensemble._voting/_BaseVoting/n_features_in_@getter"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/__init__": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/__init__"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_boost": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_boost"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_boost_discrete": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_boost_discrete"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_boost_real": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_boost_real"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_compute_proba_from_decision": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_compute_proba_from_decision"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_validate_estimator": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/_validate_estimator"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/decision_function": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/decision_function"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/fit": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/fit"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict_log_proba": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict_log_proba"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict_proba": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/predict_proba"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/staged_decision_function": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/staged_decision_function"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/staged_predict": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/staged_predict"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/staged_predict_proba": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/staged_predict_proba"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/__init__": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/__init__"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/_boost": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/_boost"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/_get_median_predict": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/_get_median_predict"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/_validate_estimator": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/_validate_estimator"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/fit": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/fit"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/predict": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/predict"
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/staged_predict": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/staged_predict"
        },
        "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/__init__": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/__init__"
        },
        "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/_boost": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/_boost"
        },
        "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/_check_X": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/_check_X"
        },
        "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/feature_importances_@getter": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/feature_importances_@getter"
        },
        "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/fit": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/fit"
        },
        "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/staged_score": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/BaseWeightBoosting/staged_score"
        },
        "sklearn/sklearn.ensemble._weight_boosting/_samme_proba": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/_samme_proba"
        },
        "sklearn/sklearn.ensemble.setup/configuration": {
            "target": "sklearn/sklearn.ensemble.setup/configuration"
        },
        "sklearn/sklearn.externals._arff/ArffDecoder/__init__": {
            "target": "sklearn/sklearn.externals._arff/ArffDecoder/__init__"
        },
        "sklearn/sklearn.externals._arff/ArffDecoder/_decode": {
            "target": "sklearn/sklearn.externals._arff/ArffDecoder/_decode"
        },
        "sklearn/sklearn.externals._arff/ArffDecoder/_decode_attribute": {
            "target": "sklearn/sklearn.externals._arff/ArffDecoder/_decode_attribute"
        },
        "sklearn/sklearn.externals._arff/ArffDecoder/_decode_comment": {
            "target": "sklearn/sklearn.externals._arff/ArffDecoder/_decode_comment"
        },
        "sklearn/sklearn.externals._arff/ArffDecoder/_decode_relation": {
            "target": "sklearn/sklearn.externals._arff/ArffDecoder/_decode_relation"
        },
        "sklearn/sklearn.externals._arff/ArffDecoder/decode": {
            "target": "sklearn/sklearn.externals._arff/ArffDecoder/decode"
        },
        "sklearn/sklearn.externals._arff/ArffEncoder/_encode_attribute": {
            "target": "sklearn/sklearn.externals._arff/ArffEncoder/_encode_attribute"
        },
        "sklearn/sklearn.externals._arff/ArffEncoder/_encode_comment": {
            "target": "sklearn/sklearn.externals._arff/ArffEncoder/_encode_comment"
        },
        "sklearn/sklearn.externals._arff/ArffEncoder/_encode_relation": {
            "target": "sklearn/sklearn.externals._arff/ArffEncoder/_encode_relation"
        },
        "sklearn/sklearn.externals._arff/ArffEncoder/encode": {
            "target": "sklearn/sklearn.externals._arff/ArffEncoder/encode"
        },
        "sklearn/sklearn.externals._arff/ArffEncoder/iter_encode": {
            "target": "sklearn/sklearn.externals._arff/ArffEncoder/iter_encode"
        },
        "sklearn/sklearn.externals._arff/ArffException/__init__": {
            "target": "sklearn/sklearn.externals._arff/ArffException/__init__"
        },
        "sklearn/sklearn.externals._arff/ArffException/__str__": {
            "target": "sklearn/sklearn.externals._arff/ArffException/__str__"
        },
        "sklearn/sklearn.externals._arff/BadAttributeName/__init__": {
            "target": "sklearn/sklearn.externals._arff/BadAttributeName/__init__"
        },
        "sklearn/sklearn.externals._arff/BadDataFormat/__init__": {
            "target": "sklearn/sklearn.externals._arff/BadDataFormat/__init__"
        },
        "sklearn/sklearn.externals._arff/BadLayout/__init__": {
            "target": "sklearn/sklearn.externals._arff/BadLayout/__init__"
        },
        "sklearn/sklearn.externals._arff/BadNominalFormatting/__init__": {
            "target": "sklearn/sklearn.externals._arff/BadNominalFormatting/__init__"
        },
        "sklearn/sklearn.externals._arff/BadNominalValue/__init__": {
            "target": "sklearn/sklearn.externals._arff/BadNominalValue/__init__"
        },
        "sklearn/sklearn.externals._arff/BadObject/__init__": {
            "target": "sklearn/sklearn.externals._arff/BadObject/__init__"
        },
        "sklearn/sklearn.externals._arff/BadObject/__str__": {
            "target": "sklearn/sklearn.externals._arff/BadObject/__str__"
        },
        "sklearn/sklearn.externals._arff/COOData/decode_rows": {
            "target": "sklearn/sklearn.externals._arff/COOData/decode_rows"
        },
        "sklearn/sklearn.externals._arff/COOData/encode_data": {
            "target": "sklearn/sklearn.externals._arff/COOData/encode_data"
        },
        "sklearn/sklearn.externals._arff/DenseGeneratorData/_decode_values": {
            "target": "sklearn/sklearn.externals._arff/DenseGeneratorData/_decode_values"
        },
        "sklearn/sklearn.externals._arff/DenseGeneratorData/decode_rows": {
            "target": "sklearn/sklearn.externals._arff/DenseGeneratorData/decode_rows"
        },
        "sklearn/sklearn.externals._arff/DenseGeneratorData/encode_data": {
            "target": "sklearn/sklearn.externals._arff/DenseGeneratorData/encode_data"
        },
        "sklearn/sklearn.externals._arff/EncodedNominalConversor/__call__": {
            "target": "sklearn/sklearn.externals._arff/EncodedNominalConversor/__call__"
        },
        "sklearn/sklearn.externals._arff/EncodedNominalConversor/__init__": {
            "target": "sklearn/sklearn.externals._arff/EncodedNominalConversor/__init__"
        },
        "sklearn/sklearn.externals._arff/LODGeneratorData/decode_rows": {
            "target": "sklearn/sklearn.externals._arff/LODGeneratorData/decode_rows"
        },
        "sklearn/sklearn.externals._arff/LODGeneratorData/encode_data": {
            "target": "sklearn/sklearn.externals._arff/LODGeneratorData/encode_data"
        },
        "sklearn/sklearn.externals._arff/NominalConversor/__call__": {
            "target": "sklearn/sklearn.externals._arff/NominalConversor/__call__"
        },
        "sklearn/sklearn.externals._arff/NominalConversor/__init__": {
            "target": "sklearn/sklearn.externals._arff/NominalConversor/__init__"
        },
        "sklearn/sklearn.externals._arff/_DataListMixin/decode_rows": {
            "target": "sklearn/sklearn.externals._arff/_DataListMixin/decode_rows"
        },
        "sklearn/sklearn.externals._arff/_build_re_values": {
            "target": "sklearn/sklearn.externals._arff/_build_re_values"
        },
        "sklearn/sklearn.externals._arff/_escape_sub_callback": {
            "target": "sklearn/sklearn.externals._arff/_escape_sub_callback"
        },
        "sklearn/sklearn.externals._arff/_get_data_object_for_decoding": {
            "target": "sklearn/sklearn.externals._arff/_get_data_object_for_decoding"
        },
        "sklearn/sklearn.externals._arff/_get_data_object_for_encoding": {
            "target": "sklearn/sklearn.externals._arff/_get_data_object_for_encoding"
        },
        "sklearn/sklearn.externals._arff/_parse_values": {
            "target": "sklearn/sklearn.externals._arff/_parse_values"
        },
        "sklearn/sklearn.externals._arff/_unescape_sub_callback": {
            "target": "sklearn/sklearn.externals._arff/_unescape_sub_callback"
        },
        "sklearn/sklearn.externals._arff/_unquote": {
            "target": "sklearn/sklearn.externals._arff/_unquote"
        },
        "sklearn/sklearn.externals._arff/dump": {
            "target": "sklearn/sklearn.externals._arff/dump"
        },
        "sklearn/sklearn.externals._arff/dumps": {
            "target": "sklearn/sklearn.externals._arff/dumps"
        },
        "sklearn/sklearn.externals._arff/encode_string": {
            "target": "sklearn/sklearn.externals._arff/encode_string"
        },
        "sklearn/sklearn.externals._arff/load": {
            "target": "sklearn/sklearn.externals._arff/load"
        },
        "sklearn/sklearn.externals._arff/loads": {
            "target": "sklearn/sklearn.externals._arff/loads"
        },
        "sklearn/sklearn.externals._lobpcg/_applyConstraints": {
            "target": "sklearn/sklearn.externals._lobpcg/_applyConstraints"
        },
        "sklearn/sklearn.externals._lobpcg/_as2d": {
            "target": "sklearn/sklearn.externals._lobpcg/_as2d"
        },
        "sklearn/sklearn.externals._lobpcg/_b_orthonormalize": {
            "target": "sklearn/sklearn.externals._lobpcg/_b_orthonormalize"
        },
        "sklearn/sklearn.externals._lobpcg/_get_indx": {
            "target": "sklearn/sklearn.externals._lobpcg/_get_indx"
        },
        "sklearn/sklearn.externals._lobpcg/_makeOperator": {
            "target": "sklearn/sklearn.externals._lobpcg/_makeOperator"
        },
        "sklearn/sklearn.externals._lobpcg/_report_nonhermitian": {
            "target": "sklearn/sklearn.externals._lobpcg/_report_nonhermitian"
        },
        "sklearn/sklearn.externals._lobpcg/lobpcg": {
            "target": "sklearn/sklearn.externals._lobpcg/lobpcg"
        },
        "sklearn/sklearn.externals._numpy_compiler_patch/CCompiler_spawn": {
            "target": "sklearn/sklearn.externals._numpy_compiler_patch/CCompiler_spawn"
        },
        "sklearn/sklearn.externals._numpy_compiler_patch/forward_bytes_to_stdout": {
            "target": "sklearn/sklearn.externals._numpy_compiler_patch/forward_bytes_to_stdout"
        },
        "sklearn/sklearn.externals._numpy_compiler_patch/is_sequence": {
            "target": "sklearn/sklearn.externals._numpy_compiler_patch/is_sequence"
        },
        "sklearn/sklearn.externals._packaging._structures/InfinityType/__eq__": {
            "target": "sklearn/sklearn.externals._packaging._structures/InfinityType/__eq__"
        },
        "sklearn/sklearn.externals._packaging._structures/InfinityType/__ge__": {
            "target": "sklearn/sklearn.externals._packaging._structures/InfinityType/__ge__"
        },
        "sklearn/sklearn.externals._packaging._structures/InfinityType/__gt__": {
            "target": "sklearn/sklearn.externals._packaging._structures/InfinityType/__gt__"
        },
        "sklearn/sklearn.externals._packaging._structures/InfinityType/__hash__": {
            "target": "sklearn/sklearn.externals._packaging._structures/InfinityType/__hash__"
        },
        "sklearn/sklearn.externals._packaging._structures/InfinityType/__le__": {
            "target": "sklearn/sklearn.externals._packaging._structures/InfinityType/__le__"
        },
        "sklearn/sklearn.externals._packaging._structures/InfinityType/__lt__": {
            "target": "sklearn/sklearn.externals._packaging._structures/InfinityType/__lt__"
        },
        "sklearn/sklearn.externals._packaging._structures/InfinityType/__ne__": {
            "target": "sklearn/sklearn.externals._packaging._structures/InfinityType/__ne__"
        },
        "sklearn/sklearn.externals._packaging._structures/InfinityType/__neg__": {
            "target": "sklearn/sklearn.externals._packaging._structures/InfinityType/__neg__"
        },
        "sklearn/sklearn.externals._packaging._structures/InfinityType/__repr__": {
            "target": "sklearn/sklearn.externals._packaging._structures/InfinityType/__repr__"
        },
        "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__eq__": {
            "target": "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__eq__"
        },
        "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__ge__": {
            "target": "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__ge__"
        },
        "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__gt__": {
            "target": "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__gt__"
        },
        "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__hash__": {
            "target": "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__hash__"
        },
        "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__le__": {
            "target": "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__le__"
        },
        "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__lt__": {
            "target": "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__lt__"
        },
        "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__ne__": {
            "target": "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__ne__"
        },
        "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__neg__": {
            "target": "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__neg__"
        },
        "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__repr__": {
            "target": "sklearn/sklearn.externals._packaging._structures/NegativeInfinityType/__repr__"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/__init__": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/__init__"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/__repr__": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/__repr__"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/__str__": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/__str__"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/base_version@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/base_version@getter"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/dev@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/dev@getter"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/epoch@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/epoch@getter"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/is_devrelease@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/is_devrelease@getter"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/is_postrelease@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/is_postrelease@getter"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/is_prerelease@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/is_prerelease@getter"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/local@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/local@getter"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/post@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/post@getter"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/pre@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/pre@getter"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/public@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/public@getter"
        },
        "sklearn/sklearn.externals._packaging.version/LegacyVersion/release@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/LegacyVersion/release@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/__init__": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/__init__"
        },
        "sklearn/sklearn.externals._packaging.version/Version/__repr__": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/__repr__"
        },
        "sklearn/sklearn.externals._packaging.version/Version/__str__": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/__str__"
        },
        "sklearn/sklearn.externals._packaging.version/Version/base_version@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/base_version@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/dev@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/dev@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/epoch@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/epoch@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/is_devrelease@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/is_devrelease@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/is_postrelease@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/is_postrelease@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/is_prerelease@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/is_prerelease@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/local@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/local@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/major@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/major@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/micro@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/micro@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/minor@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/minor@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/post@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/post@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/pre@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/pre@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/public@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/public@getter"
        },
        "sklearn/sklearn.externals._packaging.version/Version/release@getter": {
            "target": "sklearn/sklearn.externals._packaging.version/Version/release@getter"
        },
        "sklearn/sklearn.externals._packaging.version/_BaseVersion/__eq__": {
            "target": "sklearn/sklearn.externals._packaging.version/_BaseVersion/__eq__"
        },
        "sklearn/sklearn.externals._packaging.version/_BaseVersion/__ge__": {
            "target": "sklearn/sklearn.externals._packaging.version/_BaseVersion/__ge__"
        },
        "sklearn/sklearn.externals._packaging.version/_BaseVersion/__gt__": {
            "target": "sklearn/sklearn.externals._packaging.version/_BaseVersion/__gt__"
        },
        "sklearn/sklearn.externals._packaging.version/_BaseVersion/__hash__": {
            "target": "sklearn/sklearn.externals._packaging.version/_BaseVersion/__hash__"
        },
        "sklearn/sklearn.externals._packaging.version/_BaseVersion/__le__": {
            "target": "sklearn/sklearn.externals._packaging.version/_BaseVersion/__le__"
        },
        "sklearn/sklearn.externals._packaging.version/_BaseVersion/__lt__": {
            "target": "sklearn/sklearn.externals._packaging.version/_BaseVersion/__lt__"
        },
        "sklearn/sklearn.externals._packaging.version/_BaseVersion/__ne__": {
            "target": "sklearn/sklearn.externals._packaging.version/_BaseVersion/__ne__"
        },
        "sklearn/sklearn.externals._packaging.version/_cmpkey": {
            "target": "sklearn/sklearn.externals._packaging.version/_cmpkey"
        },
        "sklearn/sklearn.externals._packaging.version/_legacy_cmpkey": {
            "target": "sklearn/sklearn.externals._packaging.version/_legacy_cmpkey"
        },
        "sklearn/sklearn.externals._packaging.version/_parse_letter_version": {
            "target": "sklearn/sklearn.externals._packaging.version/_parse_letter_version"
        },
        "sklearn/sklearn.externals._packaging.version/_parse_local_version": {
            "target": "sklearn/sklearn.externals._packaging.version/_parse_local_version"
        },
        "sklearn/sklearn.externals._packaging.version/_parse_version_parts": {
            "target": "sklearn/sklearn.externals._packaging.version/_parse_version_parts"
        },
        "sklearn/sklearn.externals._packaging.version/parse": {
            "target": "sklearn/sklearn.externals._packaging.version/parse"
        },
        "sklearn/sklearn.externals.conftest/pytest_ignore_collect": {
            "target": "sklearn/sklearn.externals.conftest/pytest_ignore_collect"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/__init__": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/__init__"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/_add_iterable_element": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/_add_iterable_element"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/_more_tags": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/_more_tags"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/_transform": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/_transform"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/fit": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/fit"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/fit_transform": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/fit_transform"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/get_feature_names": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/get_feature_names"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/get_feature_names_out": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/get_feature_names_out"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/inverse_transform": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/inverse_transform"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/restrict": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/restrict"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/transform": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/DictVectorizer/transform"
        },
        "sklearn/sklearn.feature_extraction._dict_vectorizer/_tosequence": {
            "target": "sklearn/sklearn.feature_extraction._dict_vectorizer/_tosequence"
        },
        "sklearn/sklearn.feature_extraction._hash/FeatureHasher/__init__": {
            "target": "sklearn/sklearn.feature_extraction._hash/FeatureHasher/__init__"
        },
        "sklearn/sklearn.feature_extraction._hash/FeatureHasher/_more_tags": {
            "target": "sklearn/sklearn.feature_extraction._hash/FeatureHasher/_more_tags"
        },
        "sklearn/sklearn.feature_extraction._hash/FeatureHasher/_validate_params": {
            "target": "sklearn/sklearn.feature_extraction._hash/FeatureHasher/_validate_params"
        },
        "sklearn/sklearn.feature_extraction._hash/FeatureHasher/fit": {
            "target": "sklearn/sklearn.feature_extraction._hash/FeatureHasher/fit"
        },
        "sklearn/sklearn.feature_extraction._hash/FeatureHasher/transform": {
            "target": "sklearn/sklearn.feature_extraction._hash/FeatureHasher/transform"
        },
        "sklearn/sklearn.feature_extraction._hash/_iteritems": {
            "target": "sklearn/sklearn.feature_extraction._hash/_iteritems"
        },
        "sklearn/sklearn.feature_extraction.image/PatchExtractor/_more_tags": {
            "target": "sklearn/sklearn.feature_extraction.image/PatchExtractor/_more_tags"
        },
        "sklearn/sklearn.feature_extraction.image/PatchExtractor/fit": {
            "target": "sklearn/sklearn.feature_extraction.image/PatchExtractor/fit"
        },
        "sklearn/sklearn.feature_extraction.image/PatchExtractor/transform": {
            "target": "sklearn/sklearn.feature_extraction.image/PatchExtractor/transform"
        },
        "sklearn/sklearn.feature_extraction.image/_compute_gradient_3d": {
            "target": "sklearn/sklearn.feature_extraction.image/_compute_gradient_3d"
        },
        "sklearn/sklearn.feature_extraction.image/_compute_n_patches": {
            "target": "sklearn/sklearn.feature_extraction.image/_compute_n_patches"
        },
        "sklearn/sklearn.feature_extraction.image/_extract_patches": {
            "target": "sklearn/sklearn.feature_extraction.image/_extract_patches"
        },
        "sklearn/sklearn.feature_extraction.image/_make_edges_3d": {
            "target": "sklearn/sklearn.feature_extraction.image/_make_edges_3d"
        },
        "sklearn/sklearn.feature_extraction.image/_mask_edges_weights": {
            "target": "sklearn/sklearn.feature_extraction.image/_mask_edges_weights"
        },
        "sklearn/sklearn.feature_extraction.image/_to_graph": {
            "target": "sklearn/sklearn.feature_extraction.image/_to_graph"
        },
        "sklearn/sklearn.feature_extraction.image/grid_to_graph": {
            "target": "sklearn/sklearn.feature_extraction.image/grid_to_graph"
        },
        "sklearn/sklearn.feature_extraction.image/img_to_graph": {
            "target": "sklearn/sklearn.feature_extraction.image/img_to_graph"
        },
        "sklearn/sklearn.feature_extraction.image/reconstruct_from_patches_2d": {
            "target": "sklearn/sklearn.feature_extraction.image/reconstruct_from_patches_2d"
        },
        "sklearn/sklearn.feature_extraction.setup/configuration": {
            "target": "sklearn/sklearn.feature_extraction.setup/configuration"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/_count_vocab": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/_count_vocab"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/_limit_features": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/_limit_features"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/_more_tags": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/_more_tags"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/_sort_features": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/_sort_features"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/_validate_params": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/_validate_params"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/get_feature_names_out": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/get_feature_names_out"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/_get_hasher": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/_get_hasher"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/_more_tags": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/_more_tags"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/partial_fit": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/partial_fit"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfTransformer/_more_tags": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfTransformer/_more_tags"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfTransformer/idf_@getter": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfTransformer/idf_@getter"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfTransformer/idf_@setter": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfTransformer/idf_@setter"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/_check_params": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/_check_params"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/_more_tags": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/_more_tags"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/idf_@getter": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/idf_@getter"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/idf_@setter": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/idf_@setter"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_char_ngrams": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_char_ngrams"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_char_wb_ngrams": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_char_wb_ngrams"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_check_stop_words_consistency": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_check_stop_words_consistency"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_check_vocabulary": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_check_vocabulary"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_validate_params": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_validate_params"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_validate_vocabulary": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_validate_vocabulary"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_warn_for_unused_params": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_warn_for_unused_params"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_word_ngrams": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/_word_ngrams"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/build_analyzer": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/build_analyzer"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/build_preprocessor": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/build_preprocessor"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/build_tokenizer": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/build_tokenizer"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/decode": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/decode"
        },
        "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/get_stop_words": {
            "target": "sklearn/sklearn.feature_extraction.text/_VectorizerMixin/get_stop_words"
        },
        "sklearn/sklearn.feature_extraction.text/_analyze": {
            "target": "sklearn/sklearn.feature_extraction.text/_analyze"
        },
        "sklearn/sklearn.feature_extraction.text/_check_stop_list": {
            "target": "sklearn/sklearn.feature_extraction.text/_check_stop_list"
        },
        "sklearn/sklearn.feature_extraction.text/_document_frequency": {
            "target": "sklearn/sklearn.feature_extraction.text/_document_frequency"
        },
        "sklearn/sklearn.feature_extraction.text/_make_int_array": {
            "target": "sklearn/sklearn.feature_extraction.text/_make_int_array"
        },
        "sklearn/sklearn.feature_extraction.text/_preprocess": {
            "target": "sklearn/sklearn.feature_extraction.text/_preprocess"
        },
        "sklearn/sklearn.feature_extraction.text/strip_accents_ascii": {
            "target": "sklearn/sklearn.feature_extraction.text/strip_accents_ascii"
        },
        "sklearn/sklearn.feature_extraction.text/strip_accents_unicode": {
            "target": "sklearn/sklearn.feature_extraction.text/strip_accents_unicode"
        },
        "sklearn/sklearn.feature_extraction.text/strip_tags": {
            "target": "sklearn/sklearn.feature_extraction.text/strip_tags"
        },
        "sklearn/sklearn.feature_selection._base/SelectorMixin/_get_support_mask": {
            "target": "sklearn/sklearn.feature_selection._base/SelectorMixin/_get_support_mask"
        },
        "sklearn/sklearn.feature_selection._base/SelectorMixin/_transform": {
            "target": "sklearn/sklearn.feature_selection._base/SelectorMixin/_transform"
        },
        "sklearn/sklearn.feature_selection._base/SelectorMixin/get_feature_names_out": {
            "target": "sklearn/sklearn.feature_selection._base/SelectorMixin/get_feature_names_out"
        },
        "sklearn/sklearn.feature_selection._base/SelectorMixin/get_support": {
            "target": "sklearn/sklearn.feature_selection._base/SelectorMixin/get_support"
        },
        "sklearn/sklearn.feature_selection._base/SelectorMixin/inverse_transform": {
            "target": "sklearn/sklearn.feature_selection._base/SelectorMixin/inverse_transform"
        },
        "sklearn/sklearn.feature_selection._base/SelectorMixin/transform": {
            "target": "sklearn/sklearn.feature_selection._base/SelectorMixin/transform"
        },
        "sklearn/sklearn.feature_selection._base/_get_feature_importances": {
            "target": "sklearn/sklearn.feature_selection._base/_get_feature_importances"
        },
        "sklearn/sklearn.feature_selection._from_model/SelectFromModel/__init__": {
            "target": "sklearn/sklearn.feature_selection._from_model/SelectFromModel/__init__"
        },
        "sklearn/sklearn.feature_selection._from_model/SelectFromModel/_check_max_features": {
            "target": "sklearn/sklearn.feature_selection._from_model/SelectFromModel/_check_max_features"
        },
        "sklearn/sklearn.feature_selection._from_model/SelectFromModel/_get_support_mask": {
            "target": "sklearn/sklearn.feature_selection._from_model/SelectFromModel/_get_support_mask"
        },
        "sklearn/sklearn.feature_selection._from_model/SelectFromModel/_more_tags": {
            "target": "sklearn/sklearn.feature_selection._from_model/SelectFromModel/_more_tags"
        },
        "sklearn/sklearn.feature_selection._from_model/SelectFromModel/fit": {
            "target": "sklearn/sklearn.feature_selection._from_model/SelectFromModel/fit"
        },
        "sklearn/sklearn.feature_selection._from_model/SelectFromModel/n_features_in_@getter": {
            "target": "sklearn/sklearn.feature_selection._from_model/SelectFromModel/n_features_in_@getter"
        },
        "sklearn/sklearn.feature_selection._from_model/SelectFromModel/partial_fit": {
            "target": "sklearn/sklearn.feature_selection._from_model/SelectFromModel/partial_fit"
        },
        "sklearn/sklearn.feature_selection._from_model/SelectFromModel/threshold_@getter": {
            "target": "sklearn/sklearn.feature_selection._from_model/SelectFromModel/threshold_@getter"
        },
        "sklearn/sklearn.feature_selection._from_model/_calculate_threshold": {
            "target": "sklearn/sklearn.feature_selection._from_model/_calculate_threshold"
        },
        "sklearn/sklearn.feature_selection._from_model/_estimator_has": {
            "target": "sklearn/sklearn.feature_selection._from_model/_estimator_has"
        },
        "sklearn/sklearn.feature_selection._mutual_info/_compute_mi": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/_compute_mi"
        },
        "sklearn/sklearn.feature_selection._mutual_info/_compute_mi_cc": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/_compute_mi_cc"
        },
        "sklearn/sklearn.feature_selection._mutual_info/_compute_mi_cd": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/_compute_mi_cd"
        },
        "sklearn/sklearn.feature_selection._mutual_info/_estimate_mi": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/_estimate_mi"
        },
        "sklearn/sklearn.feature_selection._mutual_info/_iterate_columns": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/_iterate_columns"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/__init__": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/__init__"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/_estimator_type@getter": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/_estimator_type@getter"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/_fit": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/_fit"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/_get_support_mask": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/_get_support_mask"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/_more_tags": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/_more_tags"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/classes_@getter": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/classes_@getter"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/decision_function": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/decision_function"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/fit": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/fit"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/predict": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/predict"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/predict_log_proba": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/predict_log_proba"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/predict_proba": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/predict_proba"
        },
        "sklearn/sklearn.feature_selection._rfe/RFE/score": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFE/score"
        },
        "sklearn/sklearn.feature_selection._rfe/RFECV/__init__": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFECV/__init__"
        },
        "sklearn/sklearn.feature_selection._rfe/RFECV/fit": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFECV/fit"
        },
        "sklearn/sklearn.feature_selection._rfe/RFECV/grid_scores_@getter": {
            "target": "sklearn/sklearn.feature_selection._rfe/RFECV/grid_scores_@getter"
        },
        "sklearn/sklearn.feature_selection._rfe/_estimator_has": {
            "target": "sklearn/sklearn.feature_selection._rfe/_estimator_has"
        },
        "sklearn/sklearn.feature_selection._rfe/_rfe_single_fit": {
            "target": "sklearn/sklearn.feature_selection._rfe/_rfe_single_fit"
        },
        "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/__init__": {
            "target": "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/__init__"
        },
        "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/_get_best_new_feature_score": {
            "target": "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/_get_best_new_feature_score"
        },
        "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/_get_support_mask": {
            "target": "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/_get_support_mask"
        },
        "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/_more_tags": {
            "target": "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/_more_tags"
        },
        "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/fit": {
            "target": "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/fit"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/__init__": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/__init__"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/_check_params": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/_check_params"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/_get_support_mask": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/_get_support_mask"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/_make_selector": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/_make_selector"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/_more_tags": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/_more_tags"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectFdr/__init__": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectFdr/__init__"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectFdr/_get_support_mask": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectFdr/_get_support_mask"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectFpr/__init__": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectFpr/__init__"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectFpr/_get_support_mask": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectFpr/_get_support_mask"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectFwe/__init__": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectFwe/__init__"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectFwe/_get_support_mask": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectFwe/_get_support_mask"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectKBest/__init__": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectKBest/__init__"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectKBest/_check_params": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectKBest/_check_params"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectKBest/_get_support_mask": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectKBest/_get_support_mask"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectPercentile/__init__": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectPercentile/__init__"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectPercentile/_check_params": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectPercentile/_check_params"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/SelectPercentile/_get_support_mask": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/SelectPercentile/_get_support_mask"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/_BaseFilter/__init__": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/_BaseFilter/__init__"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/_BaseFilter/_check_params": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/_BaseFilter/_check_params"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/_BaseFilter/_more_tags": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/_BaseFilter/_more_tags"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/_BaseFilter/fit": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/_BaseFilter/fit"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/_chisquare": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/_chisquare"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/_clean_nans": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/_clean_nans"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/f_oneway": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/f_oneway"
        },
        "sklearn/sklearn.feature_selection._univariate_selection/r_regression": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/r_regression"
        },
        "sklearn/sklearn.feature_selection._variance_threshold/VarianceThreshold/__init__": {
            "target": "sklearn/sklearn.feature_selection._variance_threshold/VarianceThreshold/__init__"
        },
        "sklearn/sklearn.feature_selection._variance_threshold/VarianceThreshold/_get_support_mask": {
            "target": "sklearn/sklearn.feature_selection._variance_threshold/VarianceThreshold/_get_support_mask"
        },
        "sklearn/sklearn.feature_selection._variance_threshold/VarianceThreshold/_more_tags": {
            "target": "sklearn/sklearn.feature_selection._variance_threshold/VarianceThreshold/_more_tags"
        },
        "sklearn/sklearn.feature_selection._variance_threshold/VarianceThreshold/fit": {
            "target": "sklearn/sklearn.feature_selection._variance_threshold/VarianceThreshold/fit"
        },
        "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/__init__": {
            "target": "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/__init__"
        },
        "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/fit": {
            "target": "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/fit"
        },
        "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/kernel_@getter": {
            "target": "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/kernel_@getter"
        },
        "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/log_marginal_likelihood": {
            "target": "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/log_marginal_likelihood"
        },
        "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/predict": {
            "target": "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/predict"
        },
        "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/predict_proba": {
            "target": "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/predict_proba"
        },
        "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/__init__": {
            "target": "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/__init__"
        },
        "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/_constrained_optimization": {
            "target": "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/_constrained_optimization"
        },
        "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/_posterior_mode": {
            "target": "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/_posterior_mode"
        },
        "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/fit": {
            "target": "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/fit"
        },
        "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/log_marginal_likelihood": {
            "target": "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/log_marginal_likelihood"
        },
        "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/predict": {
            "target": "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/predict"
        },
        "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/predict_proba": {
            "target": "sklearn/sklearn.gaussian_process._gpc/_BinaryGaussianProcessClassifierLaplace/predict_proba"
        },
        "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/__init__": {
            "target": "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/__init__"
        },
        "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/_constrained_optimization": {
            "target": "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/_constrained_optimization"
        },
        "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/_more_tags": {
            "target": "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/_more_tags"
        },
        "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/fit": {
            "target": "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/fit"
        },
        "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/log_marginal_likelihood": {
            "target": "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/log_marginal_likelihood"
        },
        "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/predict": {
            "target": "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/predict"
        },
        "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/sample_y": {
            "target": "sklearn/sklearn.gaussian_process._gpr/GaussianProcessRegressor/sample_y"
        },
        "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/__eq__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/__eq__"
        },
        "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/__init__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/__init__"
        },
        "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/bounds@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/bounds@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/diag": {
            "target": "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/diag"
        },
        "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/get_params": {
            "target": "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/get_params"
        },
        "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/is_stationary": {
            "target": "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/is_stationary"
        },
        "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/requires_vector_input@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/requires_vector_input@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/theta@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/theta@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/theta@setter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/CompoundKernel/theta@setter"
        },
        "sklearn/sklearn.gaussian_process.kernels/ConstantKernel/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/ConstantKernel/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/ConstantKernel/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/ConstantKernel/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/ConstantKernel/diag": {
            "target": "sklearn/sklearn.gaussian_process.kernels/ConstantKernel/diag"
        },
        "sklearn/sklearn.gaussian_process.kernels/ConstantKernel/hyperparameter_constant_value@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/ConstantKernel/hyperparameter_constant_value@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/DotProduct/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/DotProduct/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/DotProduct/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/DotProduct/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/DotProduct/diag": {
            "target": "sklearn/sklearn.gaussian_process.kernels/DotProduct/diag"
        },
        "sklearn/sklearn.gaussian_process.kernels/DotProduct/hyperparameter_sigma_0@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/DotProduct/hyperparameter_sigma_0@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/DotProduct/is_stationary": {
            "target": "sklearn/sklearn.gaussian_process.kernels/DotProduct/is_stationary"
        },
        "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared/__init__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared/__init__"
        },
        "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared/hyperparameter_length_scale@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared/hyperparameter_length_scale@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared/hyperparameter_periodicity@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/ExpSineSquared/hyperparameter_periodicity@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/__eq__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/__eq__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/__init__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/__init__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/bounds@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/bounds@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/diag": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/diag"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/get_params": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/get_params"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/hyperparameters@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/hyperparameters@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/is_stationary": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/is_stationary"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/requires_vector_input@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/requires_vector_input@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/theta@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/theta@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Exponentiation/theta@setter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Exponentiation/theta@setter"
        },
        "sklearn/sklearn.gaussian_process.kernels/GenericKernelMixin/requires_vector_input@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/GenericKernelMixin/requires_vector_input@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Hyperparameter/__eq__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Hyperparameter/__eq__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Hyperparameter/__new__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Hyperparameter/__new__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/__add__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/__add__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/__eq__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/__eq__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/__mul__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/__mul__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/__pow__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/__pow__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/__radd__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/__radd__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/__rmul__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/__rmul__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/_check_bounds_params": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/_check_bounds_params"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/bounds@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/bounds@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/clone_with_theta": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/clone_with_theta"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/diag": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/diag"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/get_params": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/get_params"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/hyperparameters@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/hyperparameters@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/is_stationary": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/is_stationary"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/n_dims@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/n_dims@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/requires_vector_input@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/requires_vector_input@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/set_params": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/set_params"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/theta@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/theta@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Kernel/theta@setter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Kernel/theta@setter"
        },
        "sklearn/sklearn.gaussian_process.kernels/KernelOperator/__eq__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/KernelOperator/__eq__"
        },
        "sklearn/sklearn.gaussian_process.kernels/KernelOperator/__init__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/KernelOperator/__init__"
        },
        "sklearn/sklearn.gaussian_process.kernels/KernelOperator/bounds@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/KernelOperator/bounds@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/KernelOperator/get_params": {
            "target": "sklearn/sklearn.gaussian_process.kernels/KernelOperator/get_params"
        },
        "sklearn/sklearn.gaussian_process.kernels/KernelOperator/hyperparameters@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/KernelOperator/hyperparameters@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/KernelOperator/is_stationary": {
            "target": "sklearn/sklearn.gaussian_process.kernels/KernelOperator/is_stationary"
        },
        "sklearn/sklearn.gaussian_process.kernels/KernelOperator/requires_vector_input@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/KernelOperator/requires_vector_input@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/KernelOperator/theta@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/KernelOperator/theta@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/KernelOperator/theta@setter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/KernelOperator/theta@setter"
        },
        "sklearn/sklearn.gaussian_process.kernels/Matern/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Matern/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Matern/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Matern/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/NormalizedKernelMixin/diag": {
            "target": "sklearn/sklearn.gaussian_process.kernels/NormalizedKernelMixin/diag"
        },
        "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/__init__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/__init__"
        },
        "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/diag": {
            "target": "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/diag"
        },
        "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/hyperparameter_gamma@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/hyperparameter_gamma@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/is_stationary": {
            "target": "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/is_stationary"
        },
        "sklearn/sklearn.gaussian_process.kernels/Product/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Product/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Product/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Product/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Product/diag": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Product/diag"
        },
        "sklearn/sklearn.gaussian_process.kernels/RBF/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/RBF/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/RBF/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/RBF/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/RBF/anisotropic@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/RBF/anisotropic@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/RBF/hyperparameter_length_scale@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/RBF/hyperparameter_length_scale@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/hyperparameter_alpha@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/hyperparameter_alpha@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/hyperparameter_length_scale@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/RationalQuadratic/hyperparameter_length_scale@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/StationaryKernelMixin/is_stationary": {
            "target": "sklearn/sklearn.gaussian_process.kernels/StationaryKernelMixin/is_stationary"
        },
        "sklearn/sklearn.gaussian_process.kernels/Sum/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Sum/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Sum/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Sum/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/Sum/diag": {
            "target": "sklearn/sklearn.gaussian_process.kernels/Sum/diag"
        },
        "sklearn/sklearn.gaussian_process.kernels/WhiteKernel/__call__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/WhiteKernel/__call__"
        },
        "sklearn/sklearn.gaussian_process.kernels/WhiteKernel/__repr__": {
            "target": "sklearn/sklearn.gaussian_process.kernels/WhiteKernel/__repr__"
        },
        "sklearn/sklearn.gaussian_process.kernels/WhiteKernel/diag": {
            "target": "sklearn/sklearn.gaussian_process.kernels/WhiteKernel/diag"
        },
        "sklearn/sklearn.gaussian_process.kernels/WhiteKernel/hyperparameter_noise_level@getter": {
            "target": "sklearn/sklearn.gaussian_process.kernels/WhiteKernel/hyperparameter_noise_level@getter"
        },
        "sklearn/sklearn.gaussian_process.kernels/_approx_fprime": {
            "target": "sklearn/sklearn.gaussian_process.kernels/_approx_fprime"
        },
        "sklearn/sklearn.gaussian_process.kernels/_check_length_scale": {
            "target": "sklearn/sklearn.gaussian_process.kernels/_check_length_scale"
        },
        "sklearn/sklearn.impute._base/MissingIndicator/__init__": {
            "target": "sklearn/sklearn.impute._base/MissingIndicator/__init__"
        },
        "sklearn/sklearn.impute._base/MissingIndicator/_fit": {
            "target": "sklearn/sklearn.impute._base/MissingIndicator/_fit"
        },
        "sklearn/sklearn.impute._base/MissingIndicator/_get_missing_features_info": {
            "target": "sklearn/sklearn.impute._base/MissingIndicator/_get_missing_features_info"
        },
        "sklearn/sklearn.impute._base/MissingIndicator/_more_tags": {
            "target": "sklearn/sklearn.impute._base/MissingIndicator/_more_tags"
        },
        "sklearn/sklearn.impute._base/MissingIndicator/_validate_input": {
            "target": "sklearn/sklearn.impute._base/MissingIndicator/_validate_input"
        },
        "sklearn/sklearn.impute._base/MissingIndicator/fit": {
            "target": "sklearn/sklearn.impute._base/MissingIndicator/fit"
        },
        "sklearn/sklearn.impute._base/MissingIndicator/fit_transform": {
            "target": "sklearn/sklearn.impute._base/MissingIndicator/fit_transform"
        },
        "sklearn/sklearn.impute._base/MissingIndicator/get_feature_names_out": {
            "target": "sklearn/sklearn.impute._base/MissingIndicator/get_feature_names_out"
        },
        "sklearn/sklearn.impute._base/MissingIndicator/transform": {
            "target": "sklearn/sklearn.impute._base/MissingIndicator/transform"
        },
        "sklearn/sklearn.impute._base/SimpleImputer/__init__": {
            "target": "sklearn/sklearn.impute._base/SimpleImputer/__init__"
        },
        "sklearn/sklearn.impute._base/SimpleImputer/_dense_fit": {
            "target": "sklearn/sklearn.impute._base/SimpleImputer/_dense_fit"
        },
        "sklearn/sklearn.impute._base/SimpleImputer/_more_tags": {
            "target": "sklearn/sklearn.impute._base/SimpleImputer/_more_tags"
        },
        "sklearn/sklearn.impute._base/SimpleImputer/_sparse_fit": {
            "target": "sklearn/sklearn.impute._base/SimpleImputer/_sparse_fit"
        },
        "sklearn/sklearn.impute._base/SimpleImputer/_validate_input": {
            "target": "sklearn/sklearn.impute._base/SimpleImputer/_validate_input"
        },
        "sklearn/sklearn.impute._base/SimpleImputer/fit": {
            "target": "sklearn/sklearn.impute._base/SimpleImputer/fit"
        },
        "sklearn/sklearn.impute._base/SimpleImputer/get_feature_names_out": {
            "target": "sklearn/sklearn.impute._base/SimpleImputer/get_feature_names_out"
        },
        "sklearn/sklearn.impute._base/SimpleImputer/inverse_transform": {
            "target": "sklearn/sklearn.impute._base/SimpleImputer/inverse_transform"
        },
        "sklearn/sklearn.impute._base/SimpleImputer/transform": {
            "target": "sklearn/sklearn.impute._base/SimpleImputer/transform"
        },
        "sklearn/sklearn.impute._base/_BaseImputer/__init__": {
            "target": "sklearn/sklearn.impute._base/_BaseImputer/__init__"
        },
        "sklearn/sklearn.impute._base/_BaseImputer/_concatenate_indicator": {
            "target": "sklearn/sklearn.impute._base/_BaseImputer/_concatenate_indicator"
        },
        "sklearn/sklearn.impute._base/_BaseImputer/_concatenate_indicator_feature_names_out": {
            "target": "sklearn/sklearn.impute._base/_BaseImputer/_concatenate_indicator_feature_names_out"
        },
        "sklearn/sklearn.impute._base/_BaseImputer/_fit_indicator": {
            "target": "sklearn/sklearn.impute._base/_BaseImputer/_fit_indicator"
        },
        "sklearn/sklearn.impute._base/_BaseImputer/_more_tags": {
            "target": "sklearn/sklearn.impute._base/_BaseImputer/_more_tags"
        },
        "sklearn/sklearn.impute._base/_BaseImputer/_transform_indicator": {
            "target": "sklearn/sklearn.impute._base/_BaseImputer/_transform_indicator"
        },
        "sklearn/sklearn.impute._base/_check_inputs_dtype": {
            "target": "sklearn/sklearn.impute._base/_check_inputs_dtype"
        },
        "sklearn/sklearn.impute._base/_most_frequent": {
            "target": "sklearn/sklearn.impute._base/_most_frequent"
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/__init__": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/__init__"
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/_get_abs_corr_mat": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/_get_abs_corr_mat"
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/_get_neighbor_feat_idx": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/_get_neighbor_feat_idx"
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/_get_ordered_idx": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/_get_ordered_idx"
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/_impute_one_feature": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/_impute_one_feature"
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/_initial_imputation": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/_initial_imputation"
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/_validate_limit": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/_validate_limit"
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/fit": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/fit"
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/fit_transform": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/fit_transform"
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/get_feature_names_out": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/get_feature_names_out"
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/transform": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/transform"
        },
        "sklearn/sklearn.impute._knn/KNNImputer/__init__": {
            "target": "sklearn/sklearn.impute._knn/KNNImputer/__init__"
        },
        "sklearn/sklearn.impute._knn/KNNImputer/_calc_impute": {
            "target": "sklearn/sklearn.impute._knn/KNNImputer/_calc_impute"
        },
        "sklearn/sklearn.impute._knn/KNNImputer/fit": {
            "target": "sklearn/sklearn.impute._knn/KNNImputer/fit"
        },
        "sklearn/sklearn.impute._knn/KNNImputer/get_feature_names_out": {
            "target": "sklearn/sklearn.impute._knn/KNNImputer/get_feature_names_out"
        },
        "sklearn/sklearn.impute._knn/KNNImputer/transform": {
            "target": "sklearn/sklearn.impute._knn/KNNImputer/transform"
        },
        "sklearn/sklearn.impute/__getattr__": {
            "target": "sklearn/sklearn.impute/__getattr__"
        },
        "sklearn/sklearn.inspection._partial_dependence/_grid_from_X": {
            "target": "sklearn/sklearn.inspection._partial_dependence/_grid_from_X"
        },
        "sklearn/sklearn.inspection._partial_dependence/_partial_dependence_brute": {
            "target": "sklearn/sklearn.inspection._partial_dependence/_partial_dependence_brute"
        },
        "sklearn/sklearn.inspection._partial_dependence/_partial_dependence_recursion": {
            "target": "sklearn/sklearn.inspection._partial_dependence/_partial_dependence_recursion"
        },
        "sklearn/sklearn.inspection._permutation_importance/_calculate_permutation_scores": {
            "target": "sklearn/sklearn.inspection._permutation_importance/_calculate_permutation_scores"
        },
        "sklearn/sklearn.inspection._permutation_importance/_create_importances_bunch": {
            "target": "sklearn/sklearn.inspection._permutation_importance/_create_importances_bunch"
        },
        "sklearn/sklearn.inspection._permutation_importance/_weights_scorer": {
            "target": "sklearn/sklearn.inspection._permutation_importance/_weights_scorer"
        },
        "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/__init__": {
            "target": "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/__init__"
        },
        "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/from_estimator": {
            "target": "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/from_estimator"
        },
        "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/plot": {
            "target": "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/plot"
        },
        "sklearn/sklearn.inspection._plot.decision_boundary/_check_boundary_response_method": {
            "target": "sklearn/sklearn.inspection._plot.decision_boundary/_check_boundary_response_method"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/__init__": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/__init__"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/_get_sample_count": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/_get_sample_count"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/_plot_average_dependence": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/_plot_average_dependence"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/_plot_ice_lines": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/_plot_ice_lines"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/_plot_one_way_partial_dependence": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/_plot_one_way_partial_dependence"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/_plot_two_way_partial_dependence": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/_plot_two_way_partial_dependence"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/plot": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/plot"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/_plot_partial_dependence": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/_plot_partial_dependence"
        },
        "sklearn/sklearn.inspection.setup/configuration": {
            "target": "sklearn/sklearn.inspection.setup/configuration"
        },
        "sklearn/sklearn.isotonic/IsotonicRegression/__getstate__": {
            "target": "sklearn/sklearn.isotonic/IsotonicRegression/__getstate__"
        },
        "sklearn/sklearn.isotonic/IsotonicRegression/__setstate__": {
            "target": "sklearn/sklearn.isotonic/IsotonicRegression/__setstate__"
        },
        "sklearn/sklearn.isotonic/IsotonicRegression/_build_f": {
            "target": "sklearn/sklearn.isotonic/IsotonicRegression/_build_f"
        },
        "sklearn/sklearn.isotonic/IsotonicRegression/_build_y": {
            "target": "sklearn/sklearn.isotonic/IsotonicRegression/_build_y"
        },
        "sklearn/sklearn.isotonic/IsotonicRegression/_check_input_data_shape": {
            "target": "sklearn/sklearn.isotonic/IsotonicRegression/_check_input_data_shape"
        },
        "sklearn/sklearn.isotonic/IsotonicRegression/_more_tags": {
            "target": "sklearn/sklearn.isotonic/IsotonicRegression/_more_tags"
        },
        "sklearn/sklearn.isotonic/IsotonicRegression/get_feature_names_out": {
            "target": "sklearn/sklearn.isotonic/IsotonicRegression/get_feature_names_out"
        },
        "sklearn/sklearn.isotonic/check_increasing": {
            "target": "sklearn/sklearn.isotonic/check_increasing"
        },
        "sklearn/sklearn.isotonic/isotonic_regression": {
            "target": "sklearn/sklearn.isotonic/isotonic_regression"
        },
        "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/__init__": {
            "target": "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/__init__"
        },
        "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/_more_tags": {
            "target": "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/_more_tags"
        },
        "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/_transform_dense": {
            "target": "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/_transform_dense"
        },
        "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/_transform_sparse": {
            "target": "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/_transform_sparse"
        },
        "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/fit": {
            "target": "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/fit"
        },
        "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/get_feature_names_out": {
            "target": "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/get_feature_names_out"
        },
        "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/transform": {
            "target": "sklearn/sklearn.kernel_approximation/AdditiveChi2Sampler/transform"
        },
        "sklearn/sklearn.kernel_approximation/Nystroem/_get_kernel_params": {
            "target": "sklearn/sklearn.kernel_approximation/Nystroem/_get_kernel_params"
        },
        "sklearn/sklearn.kernel_approximation/Nystroem/_more_tags": {
            "target": "sklearn/sklearn.kernel_approximation/Nystroem/_more_tags"
        },
        "sklearn/sklearn.kernel_approximation/Nystroem/fit": {
            "target": "sklearn/sklearn.kernel_approximation/Nystroem/fit"
        },
        "sklearn/sklearn.kernel_approximation/PolynomialCountSketch/__init__": {
            "target": "sklearn/sklearn.kernel_approximation/PolynomialCountSketch/__init__"
        },
        "sklearn/sklearn.kernel_approximation/PolynomialCountSketch/fit": {
            "target": "sklearn/sklearn.kernel_approximation/PolynomialCountSketch/fit"
        },
        "sklearn/sklearn.kernel_approximation/PolynomialCountSketch/transform": {
            "target": "sklearn/sklearn.kernel_approximation/PolynomialCountSketch/transform"
        },
        "sklearn/sklearn.kernel_approximation/RBFSampler/fit": {
            "target": "sklearn/sklearn.kernel_approximation/RBFSampler/fit"
        },
        "sklearn/sklearn.kernel_approximation/SkewedChi2Sampler/__init__": {
            "target": "sklearn/sklearn.kernel_approximation/SkewedChi2Sampler/__init__"
        },
        "sklearn/sklearn.kernel_approximation/SkewedChi2Sampler/fit": {
            "target": "sklearn/sklearn.kernel_approximation/SkewedChi2Sampler/fit"
        },
        "sklearn/sklearn.kernel_approximation/SkewedChi2Sampler/transform": {
            "target": "sklearn/sklearn.kernel_approximation/SkewedChi2Sampler/transform"
        },
        "sklearn/sklearn.kernel_ridge/KernelRidge/_get_kernel": {
            "target": "sklearn/sklearn.kernel_ridge/KernelRidge/_get_kernel"
        },
        "sklearn/sklearn.kernel_ridge/KernelRidge/_more_tags": {
            "target": "sklearn/sklearn.kernel_ridge/KernelRidge/_more_tags"
        },
        "sklearn/sklearn.linear_model._base/LinearClassifierMixin/_predict_proba_lr": {
            "target": "sklearn/sklearn.linear_model._base/LinearClassifierMixin/_predict_proba_lr"
        },
        "sklearn/sklearn.linear_model._base/LinearClassifierMixin/decision_function": {
            "target": "sklearn/sklearn.linear_model._base/LinearClassifierMixin/decision_function"
        },
        "sklearn/sklearn.linear_model._base/LinearClassifierMixin/predict": {
            "target": "sklearn/sklearn.linear_model._base/LinearClassifierMixin/predict"
        },
        "sklearn/sklearn.linear_model._base/LinearModel/_decision_function": {
            "target": "sklearn/sklearn.linear_model._base/LinearModel/_decision_function"
        },
        "sklearn/sklearn.linear_model._base/LinearModel/_more_tags": {
            "target": "sklearn/sklearn.linear_model._base/LinearModel/_more_tags"
        },
        "sklearn/sklearn.linear_model._base/LinearModel/_set_intercept": {
            "target": "sklearn/sklearn.linear_model._base/LinearModel/_set_intercept"
        },
        "sklearn/sklearn.linear_model._base/LinearModel/fit": {
            "target": "sklearn/sklearn.linear_model._base/LinearModel/fit"
        },
        "sklearn/sklearn.linear_model._base/LinearModel/predict": {
            "target": "sklearn/sklearn.linear_model._base/LinearModel/predict"
        },
        "sklearn/sklearn.linear_model._base/LinearRegression/__init__": {
            "target": "sklearn/sklearn.linear_model._base/LinearRegression/__init__"
        },
        "sklearn/sklearn.linear_model._base/LinearRegression/fit": {
            "target": "sklearn/sklearn.linear_model._base/LinearRegression/fit"
        },
        "sklearn/sklearn.linear_model._base/SparseCoefMixin/densify": {
            "target": "sklearn/sklearn.linear_model._base/SparseCoefMixin/densify"
        },
        "sklearn/sklearn.linear_model._base/SparseCoefMixin/sparsify": {
            "target": "sklearn/sklearn.linear_model._base/SparseCoefMixin/sparsify"
        },
        "sklearn/sklearn.linear_model._base/_check_precomputed_gram_matrix": {
            "target": "sklearn/sklearn.linear_model._base/_check_precomputed_gram_matrix"
        },
        "sklearn/sklearn.linear_model._base/_deprecate_normalize": {
            "target": "sklearn/sklearn.linear_model._base/_deprecate_normalize"
        },
        "sklearn/sklearn.linear_model._base/_pre_fit": {
            "target": "sklearn/sklearn.linear_model._base/_pre_fit"
        },
        "sklearn/sklearn.linear_model._base/_preprocess_data": {
            "target": "sklearn/sklearn.linear_model._base/_preprocess_data"
        },
        "sklearn/sklearn.linear_model._base/_rescale_data": {
            "target": "sklearn/sklearn.linear_model._base/_rescale_data"
        },
        "sklearn/sklearn.linear_model._base/make_dataset": {
            "target": "sklearn/sklearn.linear_model._base/make_dataset"
        },
        "sklearn/sklearn.linear_model._bayes/ARDRegression/__init__": {
            "target": "sklearn/sklearn.linear_model._bayes/ARDRegression/__init__"
        },
        "sklearn/sklearn.linear_model._bayes/ARDRegression/_update_sigma": {
            "target": "sklearn/sklearn.linear_model._bayes/ARDRegression/_update_sigma"
        },
        "sklearn/sklearn.linear_model._bayes/ARDRegression/_update_sigma_woodbury": {
            "target": "sklearn/sklearn.linear_model._bayes/ARDRegression/_update_sigma_woodbury"
        },
        "sklearn/sklearn.linear_model._bayes/ARDRegression/fit": {
            "target": "sklearn/sklearn.linear_model._bayes/ARDRegression/fit"
        },
        "sklearn/sklearn.linear_model._bayes/ARDRegression/predict": {
            "target": "sklearn/sklearn.linear_model._bayes/ARDRegression/predict"
        },
        "sklearn/sklearn.linear_model._bayes/BayesianRidge/__init__": {
            "target": "sklearn/sklearn.linear_model._bayes/BayesianRidge/__init__"
        },
        "sklearn/sklearn.linear_model._bayes/BayesianRidge/_check_params": {
            "target": "sklearn/sklearn.linear_model._bayes/BayesianRidge/_check_params"
        },
        "sklearn/sklearn.linear_model._bayes/BayesianRidge/_log_marginal_likelihood": {
            "target": "sklearn/sklearn.linear_model._bayes/BayesianRidge/_log_marginal_likelihood"
        },
        "sklearn/sklearn.linear_model._bayes/BayesianRidge/_update_coef_": {
            "target": "sklearn/sklearn.linear_model._bayes/BayesianRidge/_update_coef_"
        },
        "sklearn/sklearn.linear_model._bayes/BayesianRidge/fit": {
            "target": "sklearn/sklearn.linear_model._bayes/BayesianRidge/fit"
        },
        "sklearn/sklearn.linear_model._bayes/BayesianRidge/predict": {
            "target": "sklearn/sklearn.linear_model._bayes/BayesianRidge/predict"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/__init__": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/__init__"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/_decision_function": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/_decision_function"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/fit": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/fit"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/sparse_coef_@getter": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/sparse_coef_@getter"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/__init__": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/__init__"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/_get_estimator": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/_get_estimator"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/_is_multitask": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/_is_multitask"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/_more_tags": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/_more_tags"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/Lasso/__init__": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/Lasso/__init__"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/__init__": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/__init__"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/_get_estimator": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/_get_estimator"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/_is_multitask": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/_is_multitask"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/_more_tags": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/_more_tags"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/__init__": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/__init__"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/_get_estimator": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/_get_estimator"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/_is_multitask": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/_is_multitask"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/_more_tags": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/_more_tags"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/fit": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/fit"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/path": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LinearModelCV/path"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNet/__init__": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNet/__init__"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNet/_more_tags": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNet/_more_tags"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNet/fit": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNet/fit"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/__init__": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/__init__"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/_get_estimator": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/_get_estimator"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/_is_multitask": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/_is_multitask"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/_more_tags": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/_more_tags"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/fit": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/fit"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLasso/__init__": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLasso/__init__"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/__init__": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/__init__"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/_get_estimator": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/_get_estimator"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/_is_multitask": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/_is_multitask"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/_more_tags": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/_more_tags"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/fit": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/fit"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/_alpha_grid": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/_alpha_grid"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/_path_residuals": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/_path_residuals"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/_set_order": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/_set_order"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/enet_path": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/enet_path"
        },
        "sklearn/sklearn.linear_model._coordinate_descent/lasso_path": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/lasso_path"
        },
        "sklearn/sklearn.linear_model._glm.glm/GammaRegressor/__init__": {
            "target": "sklearn/sklearn.linear_model._glm.glm/GammaRegressor/__init__"
        },
        "sklearn/sklearn.linear_model._glm.glm/GammaRegressor/_get_loss": {
            "target": "sklearn/sklearn.linear_model._glm.glm/GammaRegressor/_get_loss"
        },
        "sklearn/sklearn.linear_model._glm.glm/PoissonRegressor/__init__": {
            "target": "sklearn/sklearn.linear_model._glm.glm/PoissonRegressor/__init__"
        },
        "sklearn/sklearn.linear_model._glm.glm/PoissonRegressor/_get_loss": {
            "target": "sklearn/sklearn.linear_model._glm.glm/PoissonRegressor/_get_loss"
        },
        "sklearn/sklearn.linear_model._glm.glm/TweedieRegressor/__init__": {
            "target": "sklearn/sklearn.linear_model._glm.glm/TweedieRegressor/__init__"
        },
        "sklearn/sklearn.linear_model._glm.glm/TweedieRegressor/_get_loss": {
            "target": "sklearn/sklearn.linear_model._glm.glm/TweedieRegressor/_get_loss"
        },
        "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/__init__": {
            "target": "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/__init__"
        },
        "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/_get_loss": {
            "target": "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/_get_loss"
        },
        "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/_linear_predictor": {
            "target": "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/_linear_predictor"
        },
        "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/_more_tags": {
            "target": "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/_more_tags"
        },
        "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/family@getter": {
            "target": "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/family@getter"
        },
        "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/fit": {
            "target": "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/fit"
        },
        "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/predict": {
            "target": "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/predict"
        },
        "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/score": {
            "target": "sklearn/sklearn.linear_model._glm.glm/_GeneralizedLinearRegressor/score"
        },
        "sklearn/sklearn.linear_model._huber/HuberRegressor/__init__": {
            "target": "sklearn/sklearn.linear_model._huber/HuberRegressor/__init__"
        },
        "sklearn/sklearn.linear_model._huber/HuberRegressor/fit": {
            "target": "sklearn/sklearn.linear_model._huber/HuberRegressor/fit"
        },
        "sklearn/sklearn.linear_model._huber/_huber_loss_and_gradient": {
            "target": "sklearn/sklearn.linear_model._huber/_huber_loss_and_gradient"
        },
        "sklearn/sklearn.linear_model._least_angle/Lars/__init__": {
            "target": "sklearn/sklearn.linear_model._least_angle/Lars/__init__"
        },
        "sklearn/sklearn.linear_model._least_angle/Lars/_fit": {
            "target": "sklearn/sklearn.linear_model._least_angle/Lars/_fit"
        },
        "sklearn/sklearn.linear_model._least_angle/Lars/_get_gram": {
            "target": "sklearn/sklearn.linear_model._least_angle/Lars/_get_gram"
        },
        "sklearn/sklearn.linear_model._least_angle/Lars/fit": {
            "target": "sklearn/sklearn.linear_model._least_angle/Lars/fit"
        },
        "sklearn/sklearn.linear_model._least_angle/LarsCV/__init__": {
            "target": "sklearn/sklearn.linear_model._least_angle/LarsCV/__init__"
        },
        "sklearn/sklearn.linear_model._least_angle/LarsCV/_more_tags": {
            "target": "sklearn/sklearn.linear_model._least_angle/LarsCV/_more_tags"
        },
        "sklearn/sklearn.linear_model._least_angle/LarsCV/fit": {
            "target": "sklearn/sklearn.linear_model._least_angle/LarsCV/fit"
        },
        "sklearn/sklearn.linear_model._least_angle/LassoLars/__init__": {
            "target": "sklearn/sklearn.linear_model._least_angle/LassoLars/__init__"
        },
        "sklearn/sklearn.linear_model._least_angle/LassoLarsCV/__init__": {
            "target": "sklearn/sklearn.linear_model._least_angle/LassoLarsCV/__init__"
        },
        "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/__init__": {
            "target": "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/__init__"
        },
        "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/_estimate_noise_variance": {
            "target": "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/_estimate_noise_variance"
        },
        "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/_more_tags": {
            "target": "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/_more_tags"
        },
        "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/fit": {
            "target": "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/fit"
        },
        "sklearn/sklearn.linear_model._least_angle/_check_copy_and_writeable": {
            "target": "sklearn/sklearn.linear_model._least_angle/_check_copy_and_writeable"
        },
        "sklearn/sklearn.linear_model._least_angle/_lars_path_residues": {
            "target": "sklearn/sklearn.linear_model._least_angle/_lars_path_residues"
        },
        "sklearn/sklearn.linear_model._least_angle/_lars_path_solver": {
            "target": "sklearn/sklearn.linear_model._least_angle/_lars_path_solver"
        },
        "sklearn/sklearn.linear_model._least_angle/lars_path": {
            "target": "sklearn/sklearn.linear_model._least_angle/lars_path"
        },
        "sklearn/sklearn.linear_model._least_angle/lars_path_gram": {
            "target": "sklearn/sklearn.linear_model._least_angle/lars_path_gram"
        },
        "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/__init__": {
            "target": "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/__init__"
        },
        "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/_w_intercept_raw": {
            "target": "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/_w_intercept_raw"
        },
        "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/gradient": {
            "target": "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/gradient"
        },
        "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/gradient_hessian_product": {
            "target": "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/gradient_hessian_product"
        },
        "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/loss": {
            "target": "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/loss"
        },
        "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/loss_gradient": {
            "target": "sklearn/sklearn.linear_model._linear_loss/LinearModelLoss/loss_gradient"
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__"
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegression/fit": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/fit"
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegression/predict_log_proba": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/predict_log_proba"
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegression/predict_proba": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/predict_proba"
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__"
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/_more_tags": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/_more_tags"
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/fit": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/fit"
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/score": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/score"
        },
        "sklearn/sklearn.linear_model._logistic/_check_multi_class": {
            "target": "sklearn/sklearn.linear_model._logistic/_check_multi_class"
        },
        "sklearn/sklearn.linear_model._logistic/_check_solver": {
            "target": "sklearn/sklearn.linear_model._logistic/_check_solver"
        },
        "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path": {
            "target": "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path"
        },
        "sklearn/sklearn.linear_model._logistic/_logistic_regression_path": {
            "target": "sklearn/sklearn.linear_model._logistic/_logistic_regression_path"
        },
        "sklearn/sklearn.linear_model._omp/OrthogonalMatchingPursuit/__init__": {
            "target": "sklearn/sklearn.linear_model._omp/OrthogonalMatchingPursuit/__init__"
        },
        "sklearn/sklearn.linear_model._omp/OrthogonalMatchingPursuit/fit": {
            "target": "sklearn/sklearn.linear_model._omp/OrthogonalMatchingPursuit/fit"
        },
        "sklearn/sklearn.linear_model._omp/OrthogonalMatchingPursuitCV/__init__": {
            "target": "sklearn/sklearn.linear_model._omp/OrthogonalMatchingPursuitCV/__init__"
        },
        "sklearn/sklearn.linear_model._omp/OrthogonalMatchingPursuitCV/fit": {
            "target": "sklearn/sklearn.linear_model._omp/OrthogonalMatchingPursuitCV/fit"
        },
        "sklearn/sklearn.linear_model._omp/_cholesky_omp": {
            "target": "sklearn/sklearn.linear_model._omp/_cholesky_omp"
        },
        "sklearn/sklearn.linear_model._omp/_gram_omp": {
            "target": "sklearn/sklearn.linear_model._omp/_gram_omp"
        },
        "sklearn/sklearn.linear_model._omp/_omp_path_residues": {
            "target": "sklearn/sklearn.linear_model._omp/_omp_path_residues"
        },
        "sklearn/sklearn.linear_model._omp/orthogonal_mp": {
            "target": "sklearn/sklearn.linear_model._omp/orthogonal_mp"
        },
        "sklearn/sklearn.linear_model._omp/orthogonal_mp_gram": {
            "target": "sklearn/sklearn.linear_model._omp/orthogonal_mp_gram"
        },
        "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/__init__": {
            "target": "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/__init__"
        },
        "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/fit": {
            "target": "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/fit"
        },
        "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/partial_fit": {
            "target": "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveClassifier/partial_fit"
        },
        "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveRegressor/__init__": {
            "target": "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveRegressor/__init__"
        },
        "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveRegressor/fit": {
            "target": "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveRegressor/fit"
        },
        "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveRegressor/partial_fit": {
            "target": "sklearn/sklearn.linear_model._passive_aggressive/PassiveAggressiveRegressor/partial_fit"
        },
        "sklearn/sklearn.linear_model._perceptron/Perceptron/__init__": {
            "target": "sklearn/sklearn.linear_model._perceptron/Perceptron/__init__"
        },
        "sklearn/sklearn.linear_model._quantile/QuantileRegressor/__init__": {
            "target": "sklearn/sklearn.linear_model._quantile/QuantileRegressor/__init__"
        },
        "sklearn/sklearn.linear_model._quantile/QuantileRegressor/fit": {
            "target": "sklearn/sklearn.linear_model._quantile/QuantileRegressor/fit"
        },
        "sklearn/sklearn.linear_model._ransac/RANSACRegressor/__init__": {
            "target": "sklearn/sklearn.linear_model._ransac/RANSACRegressor/__init__"
        },
        "sklearn/sklearn.linear_model._ransac/RANSACRegressor/_more_tags": {
            "target": "sklearn/sklearn.linear_model._ransac/RANSACRegressor/_more_tags"
        },
        "sklearn/sklearn.linear_model._ransac/RANSACRegressor/fit": {
            "target": "sklearn/sklearn.linear_model._ransac/RANSACRegressor/fit"
        },
        "sklearn/sklearn.linear_model._ransac/RANSACRegressor/predict": {
            "target": "sklearn/sklearn.linear_model._ransac/RANSACRegressor/predict"
        },
        "sklearn/sklearn.linear_model._ransac/RANSACRegressor/score": {
            "target": "sklearn/sklearn.linear_model._ransac/RANSACRegressor/score"
        },
        "sklearn/sklearn.linear_model._ransac/_dynamic_max_trials": {
            "target": "sklearn/sklearn.linear_model._ransac/_dynamic_max_trials"
        },
        "sklearn/sklearn.linear_model._ridge/Ridge/__init__": {
            "target": "sklearn/sklearn.linear_model._ridge/Ridge/__init__"
        },
        "sklearn/sklearn.linear_model._ridge/Ridge/fit": {
            "target": "sklearn/sklearn.linear_model._ridge/Ridge/fit"
        },
        "sklearn/sklearn.linear_model._ridge/RidgeClassifier/__init__": {
            "target": "sklearn/sklearn.linear_model._ridge/RidgeClassifier/__init__"
        },
        "sklearn/sklearn.linear_model._ridge/RidgeClassifier/fit": {
            "target": "sklearn/sklearn.linear_model._ridge/RidgeClassifier/fit"
        },
        "sklearn/sklearn.linear_model._ridge/RidgeClassifierCV/__init__": {
            "target": "sklearn/sklearn.linear_model._ridge/RidgeClassifierCV/__init__"
        },
        "sklearn/sklearn.linear_model._ridge/RidgeClassifierCV/_more_tags": {
            "target": "sklearn/sklearn.linear_model._ridge/RidgeClassifierCV/_more_tags"
        },
        "sklearn/sklearn.linear_model._ridge/RidgeClassifierCV/fit": {
            "target": "sklearn/sklearn.linear_model._ridge/RidgeClassifierCV/fit"
        },
        "sklearn/sklearn.linear_model._ridge/_BaseRidge/__init__": {
            "target": "sklearn/sklearn.linear_model._ridge/_BaseRidge/__init__"
        },
        "sklearn/sklearn.linear_model._ridge/_BaseRidge/fit": {
            "target": "sklearn/sklearn.linear_model._ridge/_BaseRidge/fit"
        },
        "sklearn/sklearn.linear_model._ridge/_BaseRidgeCV/__init__": {
            "target": "sklearn/sklearn.linear_model._ridge/_BaseRidgeCV/__init__"
        },
        "sklearn/sklearn.linear_model._ridge/_BaseRidgeCV/fit": {
            "target": "sklearn/sklearn.linear_model._ridge/_BaseRidgeCV/fit"
        },
        "sklearn/sklearn.linear_model._ridge/_IdentityClassifier/__init__": {
            "target": "sklearn/sklearn.linear_model._ridge/_IdentityClassifier/__init__"
        },
        "sklearn/sklearn.linear_model._ridge/_IdentityClassifier/decision_function": {
            "target": "sklearn/sklearn.linear_model._ridge/_IdentityClassifier/decision_function"
        },
        "sklearn/sklearn.linear_model._ridge/_IdentityRegressor/decision_function": {
            "target": "sklearn/sklearn.linear_model._ridge/_IdentityRegressor/decision_function"
        },
        "sklearn/sklearn.linear_model._ridge/_IdentityRegressor/predict": {
            "target": "sklearn/sklearn.linear_model._ridge/_IdentityRegressor/predict"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/_more_tags": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/_more_tags"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/_prepare_data": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/_prepare_data"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/classes_@getter": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/classes_@getter"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/predict": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeClassifierMixin/predict"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/__init__": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/__init__"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_compute_covariance": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_compute_covariance"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_compute_gram": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_compute_gram"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_decomp_diag": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_decomp_diag"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_diag_dot": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_diag_dot"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_eigen_decompose_covariance": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_eigen_decompose_covariance"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_eigen_decompose_gram": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_eigen_decompose_gram"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_solve_eigen_covariance": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_solve_eigen_covariance"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_solve_eigen_covariance_intercept": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_solve_eigen_covariance_intercept"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_solve_eigen_covariance_no_intercept": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_solve_eigen_covariance_no_intercept"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_solve_eigen_gram": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_solve_eigen_gram"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_solve_svd_design_matrix": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_solve_svd_design_matrix"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_sparse_multidot_diag": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_sparse_multidot_diag"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_svd_decompose_design_matrix": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/_svd_decompose_design_matrix"
        },
        "sklearn/sklearn.linear_model._ridge/_RidgeGCV/fit": {
            "target": "sklearn/sklearn.linear_model._ridge/_RidgeGCV/fit"
        },
        "sklearn/sklearn.linear_model._ridge/_XT_CenterStackOp/__init__": {
            "target": "sklearn/sklearn.linear_model._ridge/_XT_CenterStackOp/__init__"
        },
        "sklearn/sklearn.linear_model._ridge/_XT_CenterStackOp/_matmat": {
            "target": "sklearn/sklearn.linear_model._ridge/_XT_CenterStackOp/_matmat"
        },
        "sklearn/sklearn.linear_model._ridge/_XT_CenterStackOp/_matvec": {
            "target": "sklearn/sklearn.linear_model._ridge/_XT_CenterStackOp/_matvec"
        },
        "sklearn/sklearn.linear_model._ridge/_X_CenterStackOp/__init__": {
            "target": "sklearn/sklearn.linear_model._ridge/_X_CenterStackOp/__init__"
        },
        "sklearn/sklearn.linear_model._ridge/_X_CenterStackOp/_matmat": {
            "target": "sklearn/sklearn.linear_model._ridge/_X_CenterStackOp/_matmat"
        },
        "sklearn/sklearn.linear_model._ridge/_X_CenterStackOp/_matvec": {
            "target": "sklearn/sklearn.linear_model._ridge/_X_CenterStackOp/_matvec"
        },
        "sklearn/sklearn.linear_model._ridge/_X_CenterStackOp/_transpose": {
            "target": "sklearn/sklearn.linear_model._ridge/_X_CenterStackOp/_transpose"
        },
        "sklearn/sklearn.linear_model._ridge/_check_gcv_mode": {
            "target": "sklearn/sklearn.linear_model._ridge/_check_gcv_mode"
        },
        "sklearn/sklearn.linear_model._ridge/_find_smallest_angle": {
            "target": "sklearn/sklearn.linear_model._ridge/_find_smallest_angle"
        },
        "sklearn/sklearn.linear_model._ridge/_get_rescaled_operator": {
            "target": "sklearn/sklearn.linear_model._ridge/_get_rescaled_operator"
        },
        "sklearn/sklearn.linear_model._ridge/_get_valid_accept_sparse": {
            "target": "sklearn/sklearn.linear_model._ridge/_get_valid_accept_sparse"
        },
        "sklearn/sklearn.linear_model._ridge/_ridge_regression": {
            "target": "sklearn/sklearn.linear_model._ridge/_ridge_regression"
        },
        "sklearn/sklearn.linear_model._ridge/_solve_cholesky": {
            "target": "sklearn/sklearn.linear_model._ridge/_solve_cholesky"
        },
        "sklearn/sklearn.linear_model._ridge/_solve_cholesky_kernel": {
            "target": "sklearn/sklearn.linear_model._ridge/_solve_cholesky_kernel"
        },
        "sklearn/sklearn.linear_model._ridge/_solve_lbfgs": {
            "target": "sklearn/sklearn.linear_model._ridge/_solve_lbfgs"
        },
        "sklearn/sklearn.linear_model._ridge/_solve_lsqr": {
            "target": "sklearn/sklearn.linear_model._ridge/_solve_lsqr"
        },
        "sklearn/sklearn.linear_model._ridge/_solve_sparse_cg": {
            "target": "sklearn/sklearn.linear_model._ridge/_solve_sparse_cg"
        },
        "sklearn/sklearn.linear_model._ridge/_solve_svd": {
            "target": "sklearn/sklearn.linear_model._ridge/_solve_svd"
        },
        "sklearn/sklearn.linear_model._ridge/ridge_regression": {
            "target": "sklearn/sklearn.linear_model._ridge/ridge_regression"
        },
        "sklearn/sklearn.linear_model._sag/get_auto_step_size": {
            "target": "sklearn/sklearn.linear_model._sag/get_auto_step_size"
        },
        "sklearn/sklearn.linear_model._sag/sag_solver": {
            "target": "sklearn/sklearn.linear_model._sag/sag_solver"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/__init__": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/__init__"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_allocate_parameter_mem": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_allocate_parameter_mem"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_get_learning_rate_type": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_get_learning_rate_type"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_get_loss_function": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_get_loss_function"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_get_penalty_type": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_get_penalty_type"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_make_validation_score_cb": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_make_validation_score_cb"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_make_validation_split": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_make_validation_split"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_validate_params": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/_validate_params"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGD/fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/__init__": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/__init__"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/_fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/_fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/_fit_binary": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/_fit_binary"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/_fit_multiclass": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/_fit_multiclass"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/_partial_fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/_partial_fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/partial_fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDClassifier/partial_fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/__init__": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/__init__"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/_decision_function": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/_decision_function"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/_fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/_fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/_fit_regressor": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/_fit_regressor"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/_partial_fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/_partial_fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/partial_fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/partial_fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/predict": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/BaseSGDRegressor/predict"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/_check_proba": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/_check_proba"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/_more_tags": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/_more_tags"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/predict_log_proba": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/predict_log_proba"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/predict_proba": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/predict_proba"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/__init__": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/__init__"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/_fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/_fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/_fit_one_class": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/_fit_one_class"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/_more_tags": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/_more_tags"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/_partial_fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/_partial_fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/_validate_params": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/_validate_params"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/decision_function": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/decision_function"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/partial_fit": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/partial_fit"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/predict": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/predict"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/score_samples": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/score_samples"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDRegressor/__init__": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDRegressor/__init__"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDRegressor/_more_tags": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDRegressor/_more_tags"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/_ValidationScoreCallback/__call__": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/_ValidationScoreCallback/__call__"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/_ValidationScoreCallback/__init__": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/_ValidationScoreCallback/__init__"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/_prepare_fit_binary": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/_prepare_fit_binary"
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/fit_binary": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/fit_binary"
        },
        "sklearn/sklearn.linear_model._theil_sen/TheilSenRegressor/__init__": {
            "target": "sklearn/sklearn.linear_model._theil_sen/TheilSenRegressor/__init__"
        },
        "sklearn/sklearn.linear_model._theil_sen/TheilSenRegressor/_check_subparams": {
            "target": "sklearn/sklearn.linear_model._theil_sen/TheilSenRegressor/_check_subparams"
        },
        "sklearn/sklearn.linear_model._theil_sen/TheilSenRegressor/fit": {
            "target": "sklearn/sklearn.linear_model._theil_sen/TheilSenRegressor/fit"
        },
        "sklearn/sklearn.linear_model._theil_sen/_breakdown_point": {
            "target": "sklearn/sklearn.linear_model._theil_sen/_breakdown_point"
        },
        "sklearn/sklearn.linear_model._theil_sen/_lstsq": {
            "target": "sklearn/sklearn.linear_model._theil_sen/_lstsq"
        },
        "sklearn/sklearn.linear_model._theil_sen/_modified_weiszfeld_step": {
            "target": "sklearn/sklearn.linear_model._theil_sen/_modified_weiszfeld_step"
        },
        "sklearn/sklearn.linear_model._theil_sen/_spatial_median": {
            "target": "sklearn/sklearn.linear_model._theil_sen/_spatial_median"
        },
        "sklearn/sklearn.linear_model.setup/configuration": {
            "target": "sklearn/sklearn.linear_model.setup/configuration"
        },
        "sklearn/sklearn.manifold._isomap/Isomap/__init__": {
            "target": "sklearn/sklearn.manifold._isomap/Isomap/__init__"
        },
        "sklearn/sklearn.manifold._isomap/Isomap/_fit_transform": {
            "target": "sklearn/sklearn.manifold._isomap/Isomap/_fit_transform"
        },
        "sklearn/sklearn.manifold._isomap/Isomap/fit": {
            "target": "sklearn/sklearn.manifold._isomap/Isomap/fit"
        },
        "sklearn/sklearn.manifold._isomap/Isomap/fit_transform": {
            "target": "sklearn/sklearn.manifold._isomap/Isomap/fit_transform"
        },
        "sklearn/sklearn.manifold._isomap/Isomap/reconstruction_error": {
            "target": "sklearn/sklearn.manifold._isomap/Isomap/reconstruction_error"
        },
        "sklearn/sklearn.manifold._isomap/Isomap/transform": {
            "target": "sklearn/sklearn.manifold._isomap/Isomap/transform"
        },
        "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__": {
            "target": "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__"
        },
        "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/_fit_transform": {
            "target": "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/_fit_transform"
        },
        "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/fit": {
            "target": "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/fit"
        },
        "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/fit_transform": {
            "target": "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/fit_transform"
        },
        "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/transform": {
            "target": "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/transform"
        },
        "sklearn/sklearn.manifold._locally_linear/barycenter_kneighbors_graph": {
            "target": "sklearn/sklearn.manifold._locally_linear/barycenter_kneighbors_graph"
        },
        "sklearn/sklearn.manifold._locally_linear/barycenter_weights": {
            "target": "sklearn/sklearn.manifold._locally_linear/barycenter_weights"
        },
        "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding": {
            "target": "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding"
        },
        "sklearn/sklearn.manifold._locally_linear/null_space": {
            "target": "sklearn/sklearn.manifold._locally_linear/null_space"
        },
        "sklearn/sklearn.manifold._mds/MDS/__init__": {
            "target": "sklearn/sklearn.manifold._mds/MDS/__init__"
        },
        "sklearn/sklearn.manifold._mds/MDS/_more_tags": {
            "target": "sklearn/sklearn.manifold._mds/MDS/_more_tags"
        },
        "sklearn/sklearn.manifold._mds/MDS/fit": {
            "target": "sklearn/sklearn.manifold._mds/MDS/fit"
        },
        "sklearn/sklearn.manifold._mds/MDS/fit_transform": {
            "target": "sklearn/sklearn.manifold._mds/MDS/fit_transform"
        },
        "sklearn/sklearn.manifold._mds/_smacof_single": {
            "target": "sklearn/sklearn.manifold._mds/_smacof_single"
        },
        "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/__init__": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/__init__"
        },
        "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/_get_affinity_matrix": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/_get_affinity_matrix"
        },
        "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/_more_tags": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/_more_tags"
        },
        "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/fit": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/fit"
        },
        "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/fit_transform": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/fit_transform"
        },
        "sklearn/sklearn.manifold._spectral_embedding/_graph_connected_component": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/_graph_connected_component"
        },
        "sklearn/sklearn.manifold._spectral_embedding/_graph_is_connected": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/_graph_is_connected"
        },
        "sklearn/sklearn.manifold._spectral_embedding/_set_diag": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/_set_diag"
        },
        "sklearn/sklearn.manifold._spectral_embedding/spectral_embedding": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/spectral_embedding"
        },
        "sklearn/sklearn.manifold._t_sne/TSNE/__init__": {
            "target": "sklearn/sklearn.manifold._t_sne/TSNE/__init__"
        },
        "sklearn/sklearn.manifold._t_sne/TSNE/_fit": {
            "target": "sklearn/sklearn.manifold._t_sne/TSNE/_fit"
        },
        "sklearn/sklearn.manifold._t_sne/TSNE/_more_tags": {
            "target": "sklearn/sklearn.manifold._t_sne/TSNE/_more_tags"
        },
        "sklearn/sklearn.manifold._t_sne/TSNE/_tsne": {
            "target": "sklearn/sklearn.manifold._t_sne/TSNE/_tsne"
        },
        "sklearn/sklearn.manifold._t_sne/TSNE/fit": {
            "target": "sklearn/sklearn.manifold._t_sne/TSNE/fit"
        },
        "sklearn/sklearn.manifold._t_sne/TSNE/fit_transform": {
            "target": "sklearn/sklearn.manifold._t_sne/TSNE/fit_transform"
        },
        "sklearn/sklearn.manifold._t_sne/_gradient_descent": {
            "target": "sklearn/sklearn.manifold._t_sne/_gradient_descent"
        },
        "sklearn/sklearn.manifold._t_sne/_joint_probabilities": {
            "target": "sklearn/sklearn.manifold._t_sne/_joint_probabilities"
        },
        "sklearn/sklearn.manifold._t_sne/_joint_probabilities_nn": {
            "target": "sklearn/sklearn.manifold._t_sne/_joint_probabilities_nn"
        },
        "sklearn/sklearn.manifold._t_sne/_kl_divergence": {
            "target": "sklearn/sklearn.manifold._t_sne/_kl_divergence"
        },
        "sklearn/sklearn.manifold._t_sne/_kl_divergence_bh": {
            "target": "sklearn/sklearn.manifold._t_sne/_kl_divergence_bh"
        },
        "sklearn/sklearn.manifold._t_sne/trustworthiness": {
            "target": "sklearn/sklearn.manifold._t_sne/trustworthiness"
        },
        "sklearn/sklearn.manifold.setup/configuration": {
            "target": "sklearn/sklearn.manifold.setup/configuration"
        },
        "sklearn/sklearn.metrics._base/_average_binary_score": {
            "target": "sklearn/sklearn.metrics._base/_average_binary_score"
        },
        "sklearn/sklearn.metrics._base/_average_multiclass_ovo_score": {
            "target": "sklearn/sklearn.metrics._base/_average_multiclass_ovo_score"
        },
        "sklearn/sklearn.metrics._base/_check_pos_label_consistency": {
            "target": "sklearn/sklearn.metrics._base/_check_pos_label_consistency"
        },
        "sklearn/sklearn.metrics._classification/_check_set_wise_labels": {
            "target": "sklearn/sklearn.metrics._classification/_check_set_wise_labels"
        },
        "sklearn/sklearn.metrics._classification/_check_targets": {
            "target": "sklearn/sklearn.metrics._classification/_check_targets"
        },
        "sklearn/sklearn.metrics._classification/_check_zero_division": {
            "target": "sklearn/sklearn.metrics._classification/_check_zero_division"
        },
        "sklearn/sklearn.metrics._classification/_prf_divide": {
            "target": "sklearn/sklearn.metrics._classification/_prf_divide"
        },
        "sklearn/sklearn.metrics._classification/_warn_prf": {
            "target": "sklearn/sklearn.metrics._classification/_warn_prf"
        },
        "sklearn/sklearn.metrics._classification/_weighted_sum": {
            "target": "sklearn/sklearn.metrics._classification/_weighted_sum"
        },
        "sklearn/sklearn.metrics._classification/class_likelihood_ratios": {
            "target": "sklearn/sklearn.metrics._classification/class_likelihood_ratios"
        },
        "sklearn/sklearn.metrics._plot.base/_check_classifier_response_method": {
            "target": "sklearn/sklearn.metrics._plot.base/_check_classifier_response_method"
        },
        "sklearn/sklearn.metrics._plot.base/_get_response": {
            "target": "sklearn/sklearn.metrics._plot.base/_get_response"
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/__init__": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/__init__"
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator"
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_predictions": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_predictions"
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/plot": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/plot"
        },
        "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/__init__": {
            "target": "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/__init__"
        },
        "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_estimator": {
            "target": "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_estimator"
        },
        "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_predictions": {
            "target": "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_predictions"
        },
        "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/plot": {
            "target": "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/plot"
        },
        "sklearn/sklearn.metrics._plot.det_curve/plot_det_curve": {
            "target": "sklearn/sklearn.metrics._plot.det_curve/plot_det_curve"
        },
        "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/__init__": {
            "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/__init__"
        },
        "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/from_estimator": {
            "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/from_estimator"
        },
        "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/from_predictions": {
            "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/from_predictions"
        },
        "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/plot": {
            "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/plot"
        },
        "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/__init__": {
            "target": "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/__init__"
        },
        "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_estimator": {
            "target": "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_estimator"
        },
        "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_predictions": {
            "target": "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_predictions"
        },
        "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/plot": {
            "target": "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/plot"
        },
        "sklearn/sklearn.metrics._ranking/_binary_clf_curve": {
            "target": "sklearn/sklearn.metrics._ranking/_binary_clf_curve"
        },
        "sklearn/sklearn.metrics._ranking/_binary_roc_auc_score": {
            "target": "sklearn/sklearn.metrics._ranking/_binary_roc_auc_score"
        },
        "sklearn/sklearn.metrics._ranking/_check_dcg_target_type": {
            "target": "sklearn/sklearn.metrics._ranking/_check_dcg_target_type"
        },
        "sklearn/sklearn.metrics._ranking/_dcg_sample_scores": {
            "target": "sklearn/sklearn.metrics._ranking/_dcg_sample_scores"
        },
        "sklearn/sklearn.metrics._ranking/_multiclass_roc_auc_score": {
            "target": "sklearn/sklearn.metrics._ranking/_multiclass_roc_auc_score"
        },
        "sklearn/sklearn.metrics._ranking/_ndcg_sample_scores": {
            "target": "sklearn/sklearn.metrics._ranking/_ndcg_sample_scores"
        },
        "sklearn/sklearn.metrics._ranking/_tie_averaged_dcg": {
            "target": "sklearn/sklearn.metrics._ranking/_tie_averaged_dcg"
        },
        "sklearn/sklearn.metrics._ranking/coverage_error": {
            "target": "sklearn/sklearn.metrics._ranking/coverage_error"
        },
        "sklearn/sklearn.metrics._ranking/dcg_score": {
            "target": "sklearn/sklearn.metrics._ranking/dcg_score"
        },
        "sklearn/sklearn.metrics._ranking/det_curve": {
            "target": "sklearn/sklearn.metrics._ranking/det_curve"
        },
        "sklearn/sklearn.metrics._ranking/label_ranking_loss": {
            "target": "sklearn/sklearn.metrics._ranking/label_ranking_loss"
        },
        "sklearn/sklearn.metrics._ranking/top_k_accuracy_score": {
            "target": "sklearn/sklearn.metrics._ranking/top_k_accuracy_score"
        },
        "sklearn/sklearn.metrics._regression/_assemble_r2_explained_variance": {
            "target": "sklearn/sklearn.metrics._regression/_assemble_r2_explained_variance"
        },
        "sklearn/sklearn.metrics._regression/_check_reg_targets": {
            "target": "sklearn/sklearn.metrics._regression/_check_reg_targets"
        },
        "sklearn/sklearn.metrics._regression/_mean_tweedie_deviance": {
            "target": "sklearn/sklearn.metrics._regression/_mean_tweedie_deviance"
        },
        "sklearn/sklearn.metrics._regression/d2_absolute_error_score": {
            "target": "sklearn/sklearn.metrics._regression/d2_absolute_error_score"
        },
        "sklearn/sklearn.metrics._regression/d2_pinball_score": {
            "target": "sklearn/sklearn.metrics._regression/d2_pinball_score"
        },
        "sklearn/sklearn.metrics._regression/d2_tweedie_score": {
            "target": "sklearn/sklearn.metrics._regression/d2_tweedie_score"
        },
        "sklearn/sklearn.metrics._regression/mean_gamma_deviance": {
            "target": "sklearn/sklearn.metrics._regression/mean_gamma_deviance"
        },
        "sklearn/sklearn.metrics._regression/mean_pinball_loss": {
            "target": "sklearn/sklearn.metrics._regression/mean_pinball_loss"
        },
        "sklearn/sklearn.metrics._regression/mean_poisson_deviance": {
            "target": "sklearn/sklearn.metrics._regression/mean_poisson_deviance"
        },
        "sklearn/sklearn.metrics._scorer/_BaseScorer/__call__": {
            "target": "sklearn/sklearn.metrics._scorer/_BaseScorer/__call__"
        },
        "sklearn/sklearn.metrics._scorer/_BaseScorer/__init__": {
            "target": "sklearn/sklearn.metrics._scorer/_BaseScorer/__init__"
        },
        "sklearn/sklearn.metrics._scorer/_BaseScorer/__repr__": {
            "target": "sklearn/sklearn.metrics._scorer/_BaseScorer/__repr__"
        },
        "sklearn/sklearn.metrics._scorer/_BaseScorer/_check_pos_label": {
            "target": "sklearn/sklearn.metrics._scorer/_BaseScorer/_check_pos_label"
        },
        "sklearn/sklearn.metrics._scorer/_BaseScorer/_factory_args": {
            "target": "sklearn/sklearn.metrics._scorer/_BaseScorer/_factory_args"
        },
        "sklearn/sklearn.metrics._scorer/_BaseScorer/_select_proba_binary": {
            "target": "sklearn/sklearn.metrics._scorer/_BaseScorer/_select_proba_binary"
        },
        "sklearn/sklearn.metrics._scorer/_DeprecatedScorers/__getitem__": {
            "target": "sklearn/sklearn.metrics._scorer/_DeprecatedScorers/__getitem__"
        },
        "sklearn/sklearn.metrics._scorer/_MultimetricScorer/__call__": {
            "target": "sklearn/sklearn.metrics._scorer/_MultimetricScorer/__call__"
        },
        "sklearn/sklearn.metrics._scorer/_MultimetricScorer/__init__": {
            "target": "sklearn/sklearn.metrics._scorer/_MultimetricScorer/__init__"
        },
        "sklearn/sklearn.metrics._scorer/_MultimetricScorer/_use_cache": {
            "target": "sklearn/sklearn.metrics._scorer/_MultimetricScorer/_use_cache"
        },
        "sklearn/sklearn.metrics._scorer/_PredictScorer/_score": {
            "target": "sklearn/sklearn.metrics._scorer/_PredictScorer/_score"
        },
        "sklearn/sklearn.metrics._scorer/_ProbaScorer/_factory_args": {
            "target": "sklearn/sklearn.metrics._scorer/_ProbaScorer/_factory_args"
        },
        "sklearn/sklearn.metrics._scorer/_ProbaScorer/_score": {
            "target": "sklearn/sklearn.metrics._scorer/_ProbaScorer/_score"
        },
        "sklearn/sklearn.metrics._scorer/_ThresholdScorer/_factory_args": {
            "target": "sklearn/sklearn.metrics._scorer/_ThresholdScorer/_factory_args"
        },
        "sklearn/sklearn.metrics._scorer/_ThresholdScorer/_score": {
            "target": "sklearn/sklearn.metrics._scorer/_ThresholdScorer/_score"
        },
        "sklearn/sklearn.metrics._scorer/_cached_call": {
            "target": "sklearn/sklearn.metrics._scorer/_cached_call"
        },
        "sklearn/sklearn.metrics._scorer/_check_multimetric_scoring": {
            "target": "sklearn/sklearn.metrics._scorer/_check_multimetric_scoring"
        },
        "sklearn/sklearn.metrics._scorer/_passthrough_scorer": {
            "target": "sklearn/sklearn.metrics._scorer/_passthrough_scorer"
        },
        "sklearn/sklearn.metrics._scorer/check_scoring": {
            "target": "sklearn/sklearn.metrics._scorer/check_scoring"
        },
        "sklearn/sklearn.metrics._scorer/get_scorer_names": {
            "target": "sklearn/sklearn.metrics._scorer/get_scorer_names"
        },
        "sklearn/sklearn.metrics._scorer/negative_likelihood_ratio": {
            "target": "sklearn/sklearn.metrics._scorer/negative_likelihood_ratio"
        },
        "sklearn/sklearn.metrics._scorer/positive_likelihood_ratio": {
            "target": "sklearn/sklearn.metrics._scorer/positive_likelihood_ratio"
        },
        "sklearn/sklearn.metrics.cluster._bicluster/_check_rows_and_columns": {
            "target": "sklearn/sklearn.metrics.cluster._bicluster/_check_rows_and_columns"
        },
        "sklearn/sklearn.metrics.cluster._bicluster/_jaccard": {
            "target": "sklearn/sklearn.metrics.cluster._bicluster/_jaccard"
        },
        "sklearn/sklearn.metrics.cluster._bicluster/_pairwise_similarity": {
            "target": "sklearn/sklearn.metrics.cluster._bicluster/_pairwise_similarity"
        },
        "sklearn/sklearn.metrics.cluster._bicluster/consensus_score": {
            "target": "sklearn/sklearn.metrics.cluster._bicluster/consensus_score"
        },
        "sklearn/sklearn.metrics.cluster._supervised/_generalized_average": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/_generalized_average"
        },
        "sklearn/sklearn.metrics.cluster._supervised/check_clusterings": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/check_clusterings"
        },
        "sklearn/sklearn.metrics.cluster._supervised/contingency_matrix": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/contingency_matrix"
        },
        "sklearn/sklearn.metrics.cluster._supervised/entropy": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/entropy"
        },
        "sklearn/sklearn.metrics.cluster._supervised/fowlkes_mallows_score": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/fowlkes_mallows_score"
        },
        "sklearn/sklearn.metrics.cluster._supervised/homogeneity_completeness_v_measure": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/homogeneity_completeness_v_measure"
        },
        "sklearn/sklearn.metrics.cluster._supervised/pair_confusion_matrix": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/pair_confusion_matrix"
        },
        "sklearn/sklearn.metrics.cluster._supervised/rand_score": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/rand_score"
        },
        "sklearn/sklearn.metrics.cluster._unsupervised/_silhouette_reduce": {
            "target": "sklearn/sklearn.metrics.cluster._unsupervised/_silhouette_reduce"
        },
        "sklearn/sklearn.metrics.cluster._unsupervised/calinski_harabasz_score": {
            "target": "sklearn/sklearn.metrics.cluster._unsupervised/calinski_harabasz_score"
        },
        "sklearn/sklearn.metrics.cluster._unsupervised/check_number_of_labels": {
            "target": "sklearn/sklearn.metrics.cluster._unsupervised/check_number_of_labels"
        },
        "sklearn/sklearn.metrics.cluster.setup/configuration": {
            "target": "sklearn/sklearn.metrics.cluster.setup/configuration"
        },
        "sklearn/sklearn.metrics.pairwise/_argmin_min_reduce": {
            "target": "sklearn/sklearn.metrics.pairwise/_argmin_min_reduce"
        },
        "sklearn/sklearn.metrics.pairwise/_argmin_reduce": {
            "target": "sklearn/sklearn.metrics.pairwise/_argmin_reduce"
        },
        "sklearn/sklearn.metrics.pairwise/_check_chunk_size": {
            "target": "sklearn/sklearn.metrics.pairwise/_check_chunk_size"
        },
        "sklearn/sklearn.metrics.pairwise/_dist_wrapper": {
            "target": "sklearn/sklearn.metrics.pairwise/_dist_wrapper"
        },
        "sklearn/sklearn.metrics.pairwise/_euclidean_distances": {
            "target": "sklearn/sklearn.metrics.pairwise/_euclidean_distances"
        },
        "sklearn/sklearn.metrics.pairwise/_euclidean_distances_upcast": {
            "target": "sklearn/sklearn.metrics.pairwise/_euclidean_distances_upcast"
        },
        "sklearn/sklearn.metrics.pairwise/_pairwise_callable": {
            "target": "sklearn/sklearn.metrics.pairwise/_pairwise_callable"
        },
        "sklearn/sklearn.metrics.pairwise/_parallel_pairwise": {
            "target": "sklearn/sklearn.metrics.pairwise/_parallel_pairwise"
        },
        "sklearn/sklearn.metrics.pairwise/_precompute_metric_params": {
            "target": "sklearn/sklearn.metrics.pairwise/_precompute_metric_params"
        },
        "sklearn/sklearn.metrics.pairwise/_return_float_dtype": {
            "target": "sklearn/sklearn.metrics.pairwise/_return_float_dtype"
        },
        "sklearn/sklearn.metrics.pairwise/additive_chi2_kernel": {
            "target": "sklearn/sklearn.metrics.pairwise/additive_chi2_kernel"
        },
        "sklearn/sklearn.metrics.pairwise/check_paired_arrays": {
            "target": "sklearn/sklearn.metrics.pairwise/check_paired_arrays"
        },
        "sklearn/sklearn.metrics.pairwise/check_pairwise_arrays": {
            "target": "sklearn/sklearn.metrics.pairwise/check_pairwise_arrays"
        },
        "sklearn/sklearn.metrics.pairwise/chi2_kernel": {
            "target": "sklearn/sklearn.metrics.pairwise/chi2_kernel"
        },
        "sklearn/sklearn.metrics.pairwise/distance_metrics": {
            "target": "sklearn/sklearn.metrics.pairwise/distance_metrics"
        },
        "sklearn/sklearn.metrics.pairwise/haversine_distances": {
            "target": "sklearn/sklearn.metrics.pairwise/haversine_distances"
        },
        "sklearn/sklearn.metrics.pairwise/kernel_metrics": {
            "target": "sklearn/sklearn.metrics.pairwise/kernel_metrics"
        },
        "sklearn/sklearn.metrics.pairwise/laplacian_kernel": {
            "target": "sklearn/sklearn.metrics.pairwise/laplacian_kernel"
        },
        "sklearn/sklearn.metrics.pairwise/nan_euclidean_distances": {
            "target": "sklearn/sklearn.metrics.pairwise/nan_euclidean_distances"
        },
        "sklearn/sklearn.metrics.pairwise/paired_cosine_distances": {
            "target": "sklearn/sklearn.metrics.pairwise/paired_cosine_distances"
        },
        "sklearn/sklearn.metrics.pairwise/paired_manhattan_distances": {
            "target": "sklearn/sklearn.metrics.pairwise/paired_manhattan_distances"
        },
        "sklearn/sklearn.metrics.setup/configuration": {
            "target": "sklearn/sklearn.metrics.setup/configuration"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/__init__": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/__init__"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_check_initial_parameters": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_check_initial_parameters"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_check_parameters": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_check_parameters"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_e_step": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_e_step"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_estimate_log_prob": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_estimate_log_prob"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_estimate_log_prob_resp": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_estimate_log_prob_resp"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_estimate_log_weights": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_estimate_log_weights"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_estimate_weighted_log_prob": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_estimate_weighted_log_prob"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_get_parameters": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_get_parameters"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_initialize": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_initialize"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_initialize_parameters": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_initialize_parameters"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_m_step": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_m_step"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_print_verbose_msg_init_beg": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_print_verbose_msg_init_beg"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_print_verbose_msg_init_end": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_print_verbose_msg_init_end"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_print_verbose_msg_iter_end": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_print_verbose_msg_iter_end"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/_set_parameters": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/_set_parameters"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/fit": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/fit"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/fit_predict": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/fit_predict"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/predict": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/predict"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/predict_proba": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/predict_proba"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/sample": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/sample"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/score": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/score"
        },
        "sklearn/sklearn.mixture._base/BaseMixture/score_samples": {
            "target": "sklearn/sklearn.mixture._base/BaseMixture/score_samples"
        },
        "sklearn/sklearn.mixture._base/_check_shape": {
            "target": "sklearn/sklearn.mixture._base/_check_shape"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/__init__": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/__init__"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_check_means_parameters": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_check_means_parameters"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_check_parameters": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_check_parameters"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_check_precision_parameters": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_check_precision_parameters"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_check_weights_parameters": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_check_weights_parameters"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_checkcovariance_prior_parameter": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_checkcovariance_prior_parameter"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_compute_lower_bound": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_compute_lower_bound"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_log_prob": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_log_prob"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_log_weights": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_log_weights"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_means": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_means"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_precisions": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_precisions"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_weights": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_weights"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_wishart_diag": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_wishart_diag"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_wishart_full": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_wishart_full"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_wishart_spherical": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_wishart_spherical"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_wishart_tied": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_estimate_wishart_tied"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_get_parameters": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_get_parameters"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_initialize": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_initialize"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_m_step": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_m_step"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_set_parameters": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/_set_parameters"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/_log_dirichlet_norm": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/_log_dirichlet_norm"
        },
        "sklearn/sklearn.mixture._bayesian_mixture/_log_wishart_norm": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/_log_wishart_norm"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/__init__": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/__init__"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_check_parameters": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_check_parameters"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_compute_lower_bound": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_compute_lower_bound"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_estimate_log_prob": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_estimate_log_prob"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_estimate_log_weights": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_estimate_log_weights"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_get_parameters": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_get_parameters"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_initialize": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_initialize"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_m_step": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_m_step"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_n_parameters": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_n_parameters"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_set_parameters": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/_set_parameters"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/aic": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/aic"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/bic": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/bic"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_check_means": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_check_means"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_check_precision_matrix": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_check_precision_matrix"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_check_precision_positivity": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_check_precision_positivity"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_check_precisions": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_check_precisions"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_check_precisions_full": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_check_precisions_full"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_check_weights": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_check_weights"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_compute_log_det_cholesky": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_compute_log_det_cholesky"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_compute_precision_cholesky": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_compute_precision_cholesky"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_covariances_diag": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_covariances_diag"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_covariances_full": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_covariances_full"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_covariances_spherical": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_covariances_spherical"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_covariances_tied": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_covariances_tied"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_parameters": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_parameters"
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_estimate_log_gaussian_prob": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_estimate_log_gaussian_prob"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/__init__": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/__init__"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/_check_refit_for_multimetric": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/_check_refit_for_multimetric"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/_estimator_type@getter": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/_estimator_type@getter"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/_format_results": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/_format_results"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/_more_tags": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/_more_tags"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/_run_search": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/_run_search"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/_select_best_index": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/_select_best_index"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/classes_@getter": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/classes_@getter"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/decision_function": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/decision_function"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/fit": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/fit"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/inverse_transform": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/inverse_transform"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/n_features_in_@getter": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/n_features_in_@getter"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/predict": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/predict"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/predict_log_proba": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/predict_log_proba"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/predict_proba": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/predict_proba"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/score": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/score"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/score_samples": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/score_samples"
        },
        "sklearn/sklearn.model_selection._search/BaseSearchCV/transform": {
            "target": "sklearn/sklearn.model_selection._search/BaseSearchCV/transform"
        },
        "sklearn/sklearn.model_selection._search/GridSearchCV/__init__": {
            "target": "sklearn/sklearn.model_selection._search/GridSearchCV/__init__"
        },
        "sklearn/sklearn.model_selection._search/GridSearchCV/_run_search": {
            "target": "sklearn/sklearn.model_selection._search/GridSearchCV/_run_search"
        },
        "sklearn/sklearn.model_selection._search/ParameterGrid/__getitem__": {
            "target": "sklearn/sklearn.model_selection._search/ParameterGrid/__getitem__"
        },
        "sklearn/sklearn.model_selection._search/ParameterGrid/__init__": {
            "target": "sklearn/sklearn.model_selection._search/ParameterGrid/__init__"
        },
        "sklearn/sklearn.model_selection._search/ParameterGrid/__iter__": {
            "target": "sklearn/sklearn.model_selection._search/ParameterGrid/__iter__"
        },
        "sklearn/sklearn.model_selection._search/ParameterGrid/__len__": {
            "target": "sklearn/sklearn.model_selection._search/ParameterGrid/__len__"
        },
        "sklearn/sklearn.model_selection._search/ParameterSampler/__init__": {
            "target": "sklearn/sklearn.model_selection._search/ParameterSampler/__init__"
        },
        "sklearn/sklearn.model_selection._search/ParameterSampler/__iter__": {
            "target": "sklearn/sklearn.model_selection._search/ParameterSampler/__iter__"
        },
        "sklearn/sklearn.model_selection._search/ParameterSampler/__len__": {
            "target": "sklearn/sklearn.model_selection._search/ParameterSampler/__len__"
        },
        "sklearn/sklearn.model_selection._search/ParameterSampler/_is_all_lists": {
            "target": "sklearn/sklearn.model_selection._search/ParameterSampler/_is_all_lists"
        },
        "sklearn/sklearn.model_selection._search/RandomizedSearchCV/__init__": {
            "target": "sklearn/sklearn.model_selection._search/RandomizedSearchCV/__init__"
        },
        "sklearn/sklearn.model_selection._search/RandomizedSearchCV/_run_search": {
            "target": "sklearn/sklearn.model_selection._search/RandomizedSearchCV/_run_search"
        },
        "sklearn/sklearn.model_selection._search/_check_refit": {
            "target": "sklearn/sklearn.model_selection._search/_check_refit"
        },
        "sklearn/sklearn.model_selection._search/_estimator_has": {
            "target": "sklearn/sklearn.model_selection._search/_estimator_has"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/__init__": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/__init__"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/_check_input_parameters": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/_check_input_parameters"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/_generate_candidate_params": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/_generate_candidate_params"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/_more_tags": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/_more_tags"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/_run_search": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/_run_search"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/_select_best_index": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/_select_best_index"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/fit": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/BaseSuccessiveHalving/fit"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/HalvingGridSearchCV/__init__": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/HalvingGridSearchCV/__init__"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/HalvingGridSearchCV/_generate_candidate_params": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/HalvingGridSearchCV/_generate_candidate_params"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/HalvingRandomSearchCV/__init__": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/HalvingRandomSearchCV/__init__"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/HalvingRandomSearchCV/_generate_candidate_params": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/HalvingRandomSearchCV/_generate_candidate_params"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/_SubsampleMetaSplitter/__init__": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/_SubsampleMetaSplitter/__init__"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/_SubsampleMetaSplitter/split": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/_SubsampleMetaSplitter/split"
        },
        "sklearn/sklearn.model_selection._search_successive_halving/_top_k": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/_top_k"
        },
        "sklearn/sklearn.model_selection._split/BaseCrossValidator/__repr__": {
            "target": "sklearn/sklearn.model_selection._split/BaseCrossValidator/__repr__"
        },
        "sklearn/sklearn.model_selection._split/BaseCrossValidator/_iter_test_indices": {
            "target": "sklearn/sklearn.model_selection._split/BaseCrossValidator/_iter_test_indices"
        },
        "sklearn/sklearn.model_selection._split/BaseCrossValidator/_iter_test_masks": {
            "target": "sklearn/sklearn.model_selection._split/BaseCrossValidator/_iter_test_masks"
        },
        "sklearn/sklearn.model_selection._split/BaseCrossValidator/get_n_splits": {
            "target": "sklearn/sklearn.model_selection._split/BaseCrossValidator/get_n_splits"
        },
        "sklearn/sklearn.model_selection._split/BaseCrossValidator/split": {
            "target": "sklearn/sklearn.model_selection._split/BaseCrossValidator/split"
        },
        "sklearn/sklearn.model_selection._split/BaseShuffleSplit/__init__": {
            "target": "sklearn/sklearn.model_selection._split/BaseShuffleSplit/__init__"
        },
        "sklearn/sklearn.model_selection._split/BaseShuffleSplit/__repr__": {
            "target": "sklearn/sklearn.model_selection._split/BaseShuffleSplit/__repr__"
        },
        "sklearn/sklearn.model_selection._split/BaseShuffleSplit/_iter_indices": {
            "target": "sklearn/sklearn.model_selection._split/BaseShuffleSplit/_iter_indices"
        },
        "sklearn/sklearn.model_selection._split/BaseShuffleSplit/get_n_splits": {
            "target": "sklearn/sklearn.model_selection._split/BaseShuffleSplit/get_n_splits"
        },
        "sklearn/sklearn.model_selection._split/BaseShuffleSplit/split": {
            "target": "sklearn/sklearn.model_selection._split/BaseShuffleSplit/split"
        },
        "sklearn/sklearn.model_selection._split/GroupKFold/__init__": {
            "target": "sklearn/sklearn.model_selection._split/GroupKFold/__init__"
        },
        "sklearn/sklearn.model_selection._split/GroupKFold/_iter_test_indices": {
            "target": "sklearn/sklearn.model_selection._split/GroupKFold/_iter_test_indices"
        },
        "sklearn/sklearn.model_selection._split/GroupKFold/split": {
            "target": "sklearn/sklearn.model_selection._split/GroupKFold/split"
        },
        "sklearn/sklearn.model_selection._split/GroupShuffleSplit/__init__": {
            "target": "sklearn/sklearn.model_selection._split/GroupShuffleSplit/__init__"
        },
        "sklearn/sklearn.model_selection._split/GroupShuffleSplit/_iter_indices": {
            "target": "sklearn/sklearn.model_selection._split/GroupShuffleSplit/_iter_indices"
        },
        "sklearn/sklearn.model_selection._split/GroupShuffleSplit/split": {
            "target": "sklearn/sklearn.model_selection._split/GroupShuffleSplit/split"
        },
        "sklearn/sklearn.model_selection._split/KFold/__init__": {
            "target": "sklearn/sklearn.model_selection._split/KFold/__init__"
        },
        "sklearn/sklearn.model_selection._split/KFold/_iter_test_indices": {
            "target": "sklearn/sklearn.model_selection._split/KFold/_iter_test_indices"
        },
        "sklearn/sklearn.model_selection._split/LeaveOneGroupOut/_iter_test_masks": {
            "target": "sklearn/sklearn.model_selection._split/LeaveOneGroupOut/_iter_test_masks"
        },
        "sklearn/sklearn.model_selection._split/LeaveOneGroupOut/get_n_splits": {
            "target": "sklearn/sklearn.model_selection._split/LeaveOneGroupOut/get_n_splits"
        },
        "sklearn/sklearn.model_selection._split/LeaveOneGroupOut/split": {
            "target": "sklearn/sklearn.model_selection._split/LeaveOneGroupOut/split"
        },
        "sklearn/sklearn.model_selection._split/LeaveOneOut/_iter_test_indices": {
            "target": "sklearn/sklearn.model_selection._split/LeaveOneOut/_iter_test_indices"
        },
        "sklearn/sklearn.model_selection._split/LeaveOneOut/get_n_splits": {
            "target": "sklearn/sklearn.model_selection._split/LeaveOneOut/get_n_splits"
        },
        "sklearn/sklearn.model_selection._split/LeavePGroupsOut/__init__": {
            "target": "sklearn/sklearn.model_selection._split/LeavePGroupsOut/__init__"
        },
        "sklearn/sklearn.model_selection._split/LeavePGroupsOut/_iter_test_masks": {
            "target": "sklearn/sklearn.model_selection._split/LeavePGroupsOut/_iter_test_masks"
        },
        "sklearn/sklearn.model_selection._split/LeavePGroupsOut/get_n_splits": {
            "target": "sklearn/sklearn.model_selection._split/LeavePGroupsOut/get_n_splits"
        },
        "sklearn/sklearn.model_selection._split/LeavePGroupsOut/split": {
            "target": "sklearn/sklearn.model_selection._split/LeavePGroupsOut/split"
        },
        "sklearn/sklearn.model_selection._split/LeavePOut/__init__": {
            "target": "sklearn/sklearn.model_selection._split/LeavePOut/__init__"
        },
        "sklearn/sklearn.model_selection._split/LeavePOut/_iter_test_indices": {
            "target": "sklearn/sklearn.model_selection._split/LeavePOut/_iter_test_indices"
        },
        "sklearn/sklearn.model_selection._split/LeavePOut/get_n_splits": {
            "target": "sklearn/sklearn.model_selection._split/LeavePOut/get_n_splits"
        },
        "sklearn/sklearn.model_selection._split/PredefinedSplit/__init__": {
            "target": "sklearn/sklearn.model_selection._split/PredefinedSplit/__init__"
        },
        "sklearn/sklearn.model_selection._split/PredefinedSplit/_iter_test_masks": {
            "target": "sklearn/sklearn.model_selection._split/PredefinedSplit/_iter_test_masks"
        },
        "sklearn/sklearn.model_selection._split/PredefinedSplit/get_n_splits": {
            "target": "sklearn/sklearn.model_selection._split/PredefinedSplit/get_n_splits"
        },
        "sklearn/sklearn.model_selection._split/PredefinedSplit/split": {
            "target": "sklearn/sklearn.model_selection._split/PredefinedSplit/split"
        },
        "sklearn/sklearn.model_selection._split/RepeatedKFold/__init__": {
            "target": "sklearn/sklearn.model_selection._split/RepeatedKFold/__init__"
        },
        "sklearn/sklearn.model_selection._split/RepeatedStratifiedKFold/__init__": {
            "target": "sklearn/sklearn.model_selection._split/RepeatedStratifiedKFold/__init__"
        },
        "sklearn/sklearn.model_selection._split/ShuffleSplit/__init__": {
            "target": "sklearn/sklearn.model_selection._split/ShuffleSplit/__init__"
        },
        "sklearn/sklearn.model_selection._split/ShuffleSplit/_iter_indices": {
            "target": "sklearn/sklearn.model_selection._split/ShuffleSplit/_iter_indices"
        },
        "sklearn/sklearn.model_selection._split/StratifiedGroupKFold/__init__": {
            "target": "sklearn/sklearn.model_selection._split/StratifiedGroupKFold/__init__"
        },
        "sklearn/sklearn.model_selection._split/StratifiedGroupKFold/_find_best_fold": {
            "target": "sklearn/sklearn.model_selection._split/StratifiedGroupKFold/_find_best_fold"
        },
        "sklearn/sklearn.model_selection._split/StratifiedGroupKFold/_iter_test_indices": {
            "target": "sklearn/sklearn.model_selection._split/StratifiedGroupKFold/_iter_test_indices"
        },
        "sklearn/sklearn.model_selection._split/StratifiedKFold/__init__": {
            "target": "sklearn/sklearn.model_selection._split/StratifiedKFold/__init__"
        },
        "sklearn/sklearn.model_selection._split/StratifiedKFold/_iter_test_masks": {
            "target": "sklearn/sklearn.model_selection._split/StratifiedKFold/_iter_test_masks"
        },
        "sklearn/sklearn.model_selection._split/StratifiedKFold/_make_test_folds": {
            "target": "sklearn/sklearn.model_selection._split/StratifiedKFold/_make_test_folds"
        },
        "sklearn/sklearn.model_selection._split/StratifiedKFold/split": {
            "target": "sklearn/sklearn.model_selection._split/StratifiedKFold/split"
        },
        "sklearn/sklearn.model_selection._split/StratifiedShuffleSplit/__init__": {
            "target": "sklearn/sklearn.model_selection._split/StratifiedShuffleSplit/__init__"
        },
        "sklearn/sklearn.model_selection._split/StratifiedShuffleSplit/_iter_indices": {
            "target": "sklearn/sklearn.model_selection._split/StratifiedShuffleSplit/_iter_indices"
        },
        "sklearn/sklearn.model_selection._split/StratifiedShuffleSplit/split": {
            "target": "sklearn/sklearn.model_selection._split/StratifiedShuffleSplit/split"
        },
        "sklearn/sklearn.model_selection._split/TimeSeriesSplit/__init__": {
            "target": "sklearn/sklearn.model_selection._split/TimeSeriesSplit/__init__"
        },
        "sklearn/sklearn.model_selection._split/TimeSeriesSplit/split": {
            "target": "sklearn/sklearn.model_selection._split/TimeSeriesSplit/split"
        },
        "sklearn/sklearn.model_selection._split/_BaseKFold/__init__": {
            "target": "sklearn/sklearn.model_selection._split/_BaseKFold/__init__"
        },
        "sklearn/sklearn.model_selection._split/_BaseKFold/get_n_splits": {
            "target": "sklearn/sklearn.model_selection._split/_BaseKFold/get_n_splits"
        },
        "sklearn/sklearn.model_selection._split/_BaseKFold/split": {
            "target": "sklearn/sklearn.model_selection._split/_BaseKFold/split"
        },
        "sklearn/sklearn.model_selection._split/_CVIterableWrapper/__init__": {
            "target": "sklearn/sklearn.model_selection._split/_CVIterableWrapper/__init__"
        },
        "sklearn/sklearn.model_selection._split/_CVIterableWrapper/get_n_splits": {
            "target": "sklearn/sklearn.model_selection._split/_CVIterableWrapper/get_n_splits"
        },
        "sklearn/sklearn.model_selection._split/_CVIterableWrapper/split": {
            "target": "sklearn/sklearn.model_selection._split/_CVIterableWrapper/split"
        },
        "sklearn/sklearn.model_selection._split/_RepeatedSplits/__init__": {
            "target": "sklearn/sklearn.model_selection._split/_RepeatedSplits/__init__"
        },
        "sklearn/sklearn.model_selection._split/_RepeatedSplits/__repr__": {
            "target": "sklearn/sklearn.model_selection._split/_RepeatedSplits/__repr__"
        },
        "sklearn/sklearn.model_selection._split/_RepeatedSplits/get_n_splits": {
            "target": "sklearn/sklearn.model_selection._split/_RepeatedSplits/get_n_splits"
        },
        "sklearn/sklearn.model_selection._split/_RepeatedSplits/split": {
            "target": "sklearn/sklearn.model_selection._split/_RepeatedSplits/split"
        },
        "sklearn/sklearn.model_selection._split/_build_repr": {
            "target": "sklearn/sklearn.model_selection._split/_build_repr"
        },
        "sklearn/sklearn.model_selection._split/_validate_shuffle_split": {
            "target": "sklearn/sklearn.model_selection._split/_validate_shuffle_split"
        },
        "sklearn/sklearn.model_selection._split/_yields_constant_splits": {
            "target": "sklearn/sklearn.model_selection._split/_yields_constant_splits"
        },
        "sklearn/sklearn.model_selection._validation/_aggregate_score_dicts": {
            "target": "sklearn/sklearn.model_selection._validation/_aggregate_score_dicts"
        },
        "sklearn/sklearn.model_selection._validation/_check_is_permutation": {
            "target": "sklearn/sklearn.model_selection._validation/_check_is_permutation"
        },
        "sklearn/sklearn.model_selection._validation/_enforce_prediction_order": {
            "target": "sklearn/sklearn.model_selection._validation/_enforce_prediction_order"
        },
        "sklearn/sklearn.model_selection._validation/_fit_and_predict": {
            "target": "sklearn/sklearn.model_selection._validation/_fit_and_predict"
        },
        "sklearn/sklearn.model_selection._validation/_fit_and_score": {
            "target": "sklearn/sklearn.model_selection._validation/_fit_and_score"
        },
        "sklearn/sklearn.model_selection._validation/_incremental_fit_estimator": {
            "target": "sklearn/sklearn.model_selection._validation/_incremental_fit_estimator"
        },
        "sklearn/sklearn.model_selection._validation/_insert_error_scores": {
            "target": "sklearn/sklearn.model_selection._validation/_insert_error_scores"
        },
        "sklearn/sklearn.model_selection._validation/_normalize_score_results": {
            "target": "sklearn/sklearn.model_selection._validation/_normalize_score_results"
        },
        "sklearn/sklearn.model_selection._validation/_permutation_test_score": {
            "target": "sklearn/sklearn.model_selection._validation/_permutation_test_score"
        },
        "sklearn/sklearn.model_selection._validation/_score": {
            "target": "sklearn/sklearn.model_selection._validation/_score"
        },
        "sklearn/sklearn.model_selection._validation/_shuffle": {
            "target": "sklearn/sklearn.model_selection._validation/_shuffle"
        },
        "sklearn/sklearn.model_selection._validation/_translate_train_sizes": {
            "target": "sklearn/sklearn.model_selection._validation/_translate_train_sizes"
        },
        "sklearn/sklearn.model_selection._validation/_warn_or_raise_about_fit_failures": {
            "target": "sklearn/sklearn.model_selection._validation/_warn_or_raise_about_fit_failures"
        },
        "sklearn/sklearn.model_selection._validation/permutation_test_score": {
            "target": "sklearn/sklearn.model_selection._validation/permutation_test_score"
        },
        "sklearn/sklearn.model_selection/__getattr__": {
            "target": "sklearn/sklearn.model_selection/__getattr__"
        },
        "sklearn/sklearn.multiclass/OneVsOneClassifier/_more_tags": {
            "target": "sklearn/sklearn.multiclass/OneVsOneClassifier/_more_tags"
        },
        "sklearn/sklearn.multiclass/OneVsOneClassifier/n_classes_@getter": {
            "target": "sklearn/sklearn.multiclass/OneVsOneClassifier/n_classes_@getter"
        },
        "sklearn/sklearn.multiclass/OneVsOneClassifier/partial_fit": {
            "target": "sklearn/sklearn.multiclass/OneVsOneClassifier/partial_fit"
        },
        "sklearn/sklearn.multiclass/OneVsRestClassifier/_more_tags": {
            "target": "sklearn/sklearn.multiclass/OneVsRestClassifier/_more_tags"
        },
        "sklearn/sklearn.multiclass/OneVsRestClassifier/multilabel_@getter": {
            "target": "sklearn/sklearn.multiclass/OneVsRestClassifier/multilabel_@getter"
        },
        "sklearn/sklearn.multiclass/OneVsRestClassifier/n_classes_@getter": {
            "target": "sklearn/sklearn.multiclass/OneVsRestClassifier/n_classes_@getter"
        },
        "sklearn/sklearn.multiclass/OneVsRestClassifier/partial_fit": {
            "target": "sklearn/sklearn.multiclass/OneVsRestClassifier/partial_fit"
        },
        "sklearn/sklearn.multiclass/OutputCodeClassifier/__init__": {
            "target": "sklearn/sklearn.multiclass/OutputCodeClassifier/__init__"
        },
        "sklearn/sklearn.multiclass/OutputCodeClassifier/fit": {
            "target": "sklearn/sklearn.multiclass/OutputCodeClassifier/fit"
        },
        "sklearn/sklearn.multiclass/OutputCodeClassifier/predict": {
            "target": "sklearn/sklearn.multiclass/OutputCodeClassifier/predict"
        },
        "sklearn/sklearn.multiclass/_ConstantPredictor/decision_function": {
            "target": "sklearn/sklearn.multiclass/_ConstantPredictor/decision_function"
        },
        "sklearn/sklearn.multiclass/_ConstantPredictor/fit": {
            "target": "sklearn/sklearn.multiclass/_ConstantPredictor/fit"
        },
        "sklearn/sklearn.multiclass/_ConstantPredictor/predict": {
            "target": "sklearn/sklearn.multiclass/_ConstantPredictor/predict"
        },
        "sklearn/sklearn.multiclass/_ConstantPredictor/predict_proba": {
            "target": "sklearn/sklearn.multiclass/_ConstantPredictor/predict_proba"
        },
        "sklearn/sklearn.multiclass/_check_estimator": {
            "target": "sklearn/sklearn.multiclass/_check_estimator"
        },
        "sklearn/sklearn.multiclass/_estimators_has": {
            "target": "sklearn/sklearn.multiclass/_estimators_has"
        },
        "sklearn/sklearn.multiclass/_fit_binary": {
            "target": "sklearn/sklearn.multiclass/_fit_binary"
        },
        "sklearn/sklearn.multiclass/_fit_ovo_binary": {
            "target": "sklearn/sklearn.multiclass/_fit_ovo_binary"
        },
        "sklearn/sklearn.multiclass/_partial_fit_binary": {
            "target": "sklearn/sklearn.multiclass/_partial_fit_binary"
        },
        "sklearn/sklearn.multiclass/_partial_fit_ovo_binary": {
            "target": "sklearn/sklearn.multiclass/_partial_fit_ovo_binary"
        },
        "sklearn/sklearn.multiclass/_predict_binary": {
            "target": "sklearn/sklearn.multiclass/_predict_binary"
        },
        "sklearn/sklearn.multiclass/_threshold_for_binary_predict": {
            "target": "sklearn/sklearn.multiclass/_threshold_for_binary_predict"
        },
        "sklearn/sklearn.multioutput/ClassifierChain/_more_tags": {
            "target": "sklearn/sklearn.multioutput/ClassifierChain/_more_tags"
        },
        "sklearn/sklearn.multioutput/ClassifierChain/decision_function": {
            "target": "sklearn/sklearn.multioutput/ClassifierChain/decision_function"
        },
        "sklearn/sklearn.multioutput/ClassifierChain/fit": {
            "target": "sklearn/sklearn.multioutput/ClassifierChain/fit"
        },
        "sklearn/sklearn.multioutput/ClassifierChain/predict_proba": {
            "target": "sklearn/sklearn.multioutput/ClassifierChain/predict_proba"
        },
        "sklearn/sklearn.multioutput/MultiOutputClassifier/_check_predict_proba": {
            "target": "sklearn/sklearn.multioutput/MultiOutputClassifier/_check_predict_proba"
        },
        "sklearn/sklearn.multioutput/MultiOutputClassifier/_more_tags": {
            "target": "sklearn/sklearn.multioutput/MultiOutputClassifier/_more_tags"
        },
        "sklearn/sklearn.multioutput/MultiOutputRegressor/partial_fit": {
            "target": "sklearn/sklearn.multioutput/MultiOutputRegressor/partial_fit"
        },
        "sklearn/sklearn.multioutput/RegressorChain/_more_tags": {
            "target": "sklearn/sklearn.multioutput/RegressorChain/_more_tags"
        },
        "sklearn/sklearn.multioutput/_BaseChain/__init__": {
            "target": "sklearn/sklearn.multioutput/_BaseChain/__init__"
        },
        "sklearn/sklearn.multioutput/_BaseChain/fit": {
            "target": "sklearn/sklearn.multioutput/_BaseChain/fit"
        },
        "sklearn/sklearn.multioutput/_BaseChain/predict": {
            "target": "sklearn/sklearn.multioutput/_BaseChain/predict"
        },
        "sklearn/sklearn.multioutput/_MultiOutputEstimator/__init__": {
            "target": "sklearn/sklearn.multioutput/_MultiOutputEstimator/__init__"
        },
        "sklearn/sklearn.multioutput/_MultiOutputEstimator/_more_tags": {
            "target": "sklearn/sklearn.multioutput/_MultiOutputEstimator/_more_tags"
        },
        "sklearn/sklearn.multioutput/_MultiOutputEstimator/fit": {
            "target": "sklearn/sklearn.multioutput/_MultiOutputEstimator/fit"
        },
        "sklearn/sklearn.multioutput/_MultiOutputEstimator/partial_fit": {
            "target": "sklearn/sklearn.multioutput/_MultiOutputEstimator/partial_fit"
        },
        "sklearn/sklearn.multioutput/_MultiOutputEstimator/predict": {
            "target": "sklearn/sklearn.multioutput/_MultiOutputEstimator/predict"
        },
        "sklearn/sklearn.multioutput/_available_if_base_estimator_has": {
            "target": "sklearn/sklearn.multioutput/_available_if_base_estimator_has"
        },
        "sklearn/sklearn.multioutput/_available_if_estimator_has": {
            "target": "sklearn/sklearn.multioutput/_available_if_estimator_has"
        },
        "sklearn/sklearn.multioutput/_fit_estimator": {
            "target": "sklearn/sklearn.multioutput/_fit_estimator"
        },
        "sklearn/sklearn.multioutput/_partial_fit_estimator": {
            "target": "sklearn/sklearn.multioutput/_partial_fit_estimator"
        },
        "sklearn/sklearn.naive_bayes/BernoulliNB/_check_X": {
            "target": "sklearn/sklearn.naive_bayes/BernoulliNB/_check_X"
        },
        "sklearn/sklearn.naive_bayes/BernoulliNB/_check_X_y": {
            "target": "sklearn/sklearn.naive_bayes/BernoulliNB/_check_X_y"
        },
        "sklearn/sklearn.naive_bayes/BernoulliNB/_count": {
            "target": "sklearn/sklearn.naive_bayes/BernoulliNB/_count"
        },
        "sklearn/sklearn.naive_bayes/BernoulliNB/_joint_log_likelihood": {
            "target": "sklearn/sklearn.naive_bayes/BernoulliNB/_joint_log_likelihood"
        },
        "sklearn/sklearn.naive_bayes/BernoulliNB/_update_feature_log_prob": {
            "target": "sklearn/sklearn.naive_bayes/BernoulliNB/_update_feature_log_prob"
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/_check_X": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/_check_X"
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/_check_X_y": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/_check_X_y"
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/_count": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/_count"
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/_init_counters": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/_init_counters"
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/_joint_log_likelihood": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/_joint_log_likelihood"
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/_more_tags": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/_more_tags"
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/_update_feature_log_prob": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/_update_feature_log_prob"
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/_validate_n_categories": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/_validate_n_categories"
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/partial_fit": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/partial_fit"
        },
        "sklearn/sklearn.naive_bayes/ComplementNB/_count": {
            "target": "sklearn/sklearn.naive_bayes/ComplementNB/_count"
        },
        "sklearn/sklearn.naive_bayes/ComplementNB/_joint_log_likelihood": {
            "target": "sklearn/sklearn.naive_bayes/ComplementNB/_joint_log_likelihood"
        },
        "sklearn/sklearn.naive_bayes/ComplementNB/_more_tags": {
            "target": "sklearn/sklearn.naive_bayes/ComplementNB/_more_tags"
        },
        "sklearn/sklearn.naive_bayes/ComplementNB/_update_feature_log_prob": {
            "target": "sklearn/sklearn.naive_bayes/ComplementNB/_update_feature_log_prob"
        },
        "sklearn/sklearn.naive_bayes/GaussianNB/_check_X": {
            "target": "sklearn/sklearn.naive_bayes/GaussianNB/_check_X"
        },
        "sklearn/sklearn.naive_bayes/GaussianNB/_joint_log_likelihood": {
            "target": "sklearn/sklearn.naive_bayes/GaussianNB/_joint_log_likelihood"
        },
        "sklearn/sklearn.naive_bayes/GaussianNB/_partial_fit": {
            "target": "sklearn/sklearn.naive_bayes/GaussianNB/_partial_fit"
        },
        "sklearn/sklearn.naive_bayes/GaussianNB/_update_mean_variance": {
            "target": "sklearn/sklearn.naive_bayes/GaussianNB/_update_mean_variance"
        },
        "sklearn/sklearn.naive_bayes/GaussianNB/sigma_@getter": {
            "target": "sklearn/sklearn.naive_bayes/GaussianNB/sigma_@getter"
        },
        "sklearn/sklearn.naive_bayes/MultinomialNB/_count": {
            "target": "sklearn/sklearn.naive_bayes/MultinomialNB/_count"
        },
        "sklearn/sklearn.naive_bayes/MultinomialNB/_joint_log_likelihood": {
            "target": "sklearn/sklearn.naive_bayes/MultinomialNB/_joint_log_likelihood"
        },
        "sklearn/sklearn.naive_bayes/MultinomialNB/_more_tags": {
            "target": "sklearn/sklearn.naive_bayes/MultinomialNB/_more_tags"
        },
        "sklearn/sklearn.naive_bayes/MultinomialNB/_update_feature_log_prob": {
            "target": "sklearn/sklearn.naive_bayes/MultinomialNB/_update_feature_log_prob"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_check_X": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_check_X"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_check_X_y": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_check_X_y"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_check_alpha": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_check_alpha"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_count": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_count"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_init_counters": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_init_counters"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_more_tags": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_more_tags"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_update_class_log_prior": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_update_class_log_prior"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_update_feature_log_prob": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/_update_feature_log_prob"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/fit": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/fit"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/n_features_@getter": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/n_features_@getter"
        },
        "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/partial_fit": {
            "target": "sklearn/sklearn.naive_bayes/_BaseDiscreteNB/partial_fit"
        },
        "sklearn/sklearn.naive_bayes/_BaseNB/_check_X": {
            "target": "sklearn/sklearn.naive_bayes/_BaseNB/_check_X"
        },
        "sklearn/sklearn.naive_bayes/_BaseNB/_joint_log_likelihood": {
            "target": "sklearn/sklearn.naive_bayes/_BaseNB/_joint_log_likelihood"
        },
        "sklearn/sklearn.naive_bayes/_BaseNB/predict": {
            "target": "sklearn/sklearn.naive_bayes/_BaseNB/predict"
        },
        "sklearn/sklearn.naive_bayes/_BaseNB/predict_log_proba": {
            "target": "sklearn/sklearn.naive_bayes/_BaseNB/predict_log_proba"
        },
        "sklearn/sklearn.naive_bayes/_BaseNB/predict_proba": {
            "target": "sklearn/sklearn.naive_bayes/_BaseNB/predict_proba"
        },
        "sklearn/sklearn.neighbors._base/KNeighborsMixin/_kneighbors_reduce_func": {
            "target": "sklearn/sklearn.neighbors._base/KNeighborsMixin/_kneighbors_reduce_func"
        },
        "sklearn/sklearn.neighbors._base/KNeighborsMixin/kneighbors": {
            "target": "sklearn/sklearn.neighbors._base/KNeighborsMixin/kneighbors"
        },
        "sklearn/sklearn.neighbors._base/KNeighborsMixin/kneighbors_graph": {
            "target": "sklearn/sklearn.neighbors._base/KNeighborsMixin/kneighbors_graph"
        },
        "sklearn/sklearn.neighbors._base/NeighborsBase/__init__": {
            "target": "sklearn/sklearn.neighbors._base/NeighborsBase/__init__"
        },
        "sklearn/sklearn.neighbors._base/NeighborsBase/_check_algorithm_metric": {
            "target": "sklearn/sklearn.neighbors._base/NeighborsBase/_check_algorithm_metric"
        },
        "sklearn/sklearn.neighbors._base/NeighborsBase/_fit": {
            "target": "sklearn/sklearn.neighbors._base/NeighborsBase/_fit"
        },
        "sklearn/sklearn.neighbors._base/NeighborsBase/_more_tags": {
            "target": "sklearn/sklearn.neighbors._base/NeighborsBase/_more_tags"
        },
        "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin/_radius_neighbors_reduce_func": {
            "target": "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin/_radius_neighbors_reduce_func"
        },
        "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin/radius_neighbors": {
            "target": "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin/radius_neighbors"
        },
        "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin/radius_neighbors_graph": {
            "target": "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin/radius_neighbors_graph"
        },
        "sklearn/sklearn.neighbors._base/_check_precomputed": {
            "target": "sklearn/sklearn.neighbors._base/_check_precomputed"
        },
        "sklearn/sklearn.neighbors._base/_check_weights": {
            "target": "sklearn/sklearn.neighbors._base/_check_weights"
        },
        "sklearn/sklearn.neighbors._base/_get_weights": {
            "target": "sklearn/sklearn.neighbors._base/_get_weights"
        },
        "sklearn/sklearn.neighbors._base/_is_sorted_by_data": {
            "target": "sklearn/sklearn.neighbors._base/_is_sorted_by_data"
        },
        "sklearn/sklearn.neighbors._base/_kneighbors_from_graph": {
            "target": "sklearn/sklearn.neighbors._base/_kneighbors_from_graph"
        },
        "sklearn/sklearn.neighbors._base/_radius_neighbors_from_graph": {
            "target": "sklearn/sklearn.neighbors._base/_radius_neighbors_from_graph"
        },
        "sklearn/sklearn.neighbors._base/_tree_query_parallel_helper": {
            "target": "sklearn/sklearn.neighbors._base/_tree_query_parallel_helper"
        },
        "sklearn/sklearn.neighbors._base/_tree_query_radius_parallel_helper": {
            "target": "sklearn/sklearn.neighbors._base/_tree_query_radius_parallel_helper"
        },
        "sklearn/sklearn.neighbors._base/sort_graph_by_row_values": {
            "target": "sklearn/sklearn.neighbors._base/sort_graph_by_row_values"
        },
        "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/__init__": {
            "target": "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/__init__"
        },
        "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/_more_tags": {
            "target": "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/_more_tags"
        },
        "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/fit": {
            "target": "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/fit"
        },
        "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/predict": {
            "target": "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/predict"
        },
        "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/predict_proba": {
            "target": "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/predict_proba"
        },
        "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__": {
            "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__"
        },
        "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/_more_tags": {
            "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/_more_tags"
        },
        "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/fit": {
            "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/fit"
        },
        "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/predict": {
            "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/predict"
        },
        "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/predict_proba": {
            "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/predict_proba"
        },
        "sklearn/sklearn.neighbors._distance_metric/DistanceMetric/_warn": {
            "target": "sklearn/sklearn.neighbors._distance_metric/DistanceMetric/_warn"
        },
        "sklearn/sklearn.neighbors._distance_metric/DistanceMetric/get_metric": {
            "target": "sklearn/sklearn.neighbors._distance_metric/DistanceMetric/get_metric"
        },
        "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/__init__": {
            "target": "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/__init__"
        },
        "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/_more_tags": {
            "target": "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/_more_tags"
        },
        "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/fit": {
            "target": "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/fit"
        },
        "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/fit_transform": {
            "target": "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/fit_transform"
        },
        "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/transform": {
            "target": "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/transform"
        },
        "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/__init__": {
            "target": "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/__init__"
        },
        "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/_more_tags": {
            "target": "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/_more_tags"
        },
        "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/fit": {
            "target": "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/fit"
        },
        "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/fit_transform": {
            "target": "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/fit_transform"
        },
        "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/transform": {
            "target": "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/transform"
        },
        "sklearn/sklearn.neighbors._graph/_check_params": {
            "target": "sklearn/sklearn.neighbors._graph/_check_params"
        },
        "sklearn/sklearn.neighbors._graph/_query_include_self": {
            "target": "sklearn/sklearn.neighbors._graph/_query_include_self"
        },
        "sklearn/sklearn.neighbors._graph/radius_neighbors_graph": {
            "target": "sklearn/sklearn.neighbors._graph/radius_neighbors_graph"
        },
        "sklearn/sklearn.neighbors._kde/KernelDensity/__init__": {
            "target": "sklearn/sklearn.neighbors._kde/KernelDensity/__init__"
        },
        "sklearn/sklearn.neighbors._kde/KernelDensity/_choose_algorithm": {
            "target": "sklearn/sklearn.neighbors._kde/KernelDensity/_choose_algorithm"
        },
        "sklearn/sklearn.neighbors._kde/KernelDensity/_more_tags": {
            "target": "sklearn/sklearn.neighbors._kde/KernelDensity/_more_tags"
        },
        "sklearn/sklearn.neighbors._kde/KernelDensity/fit": {
            "target": "sklearn/sklearn.neighbors._kde/KernelDensity/fit"
        },
        "sklearn/sklearn.neighbors._kde/KernelDensity/sample": {
            "target": "sklearn/sklearn.neighbors._kde/KernelDensity/sample"
        },
        "sklearn/sklearn.neighbors._kde/KernelDensity/score": {
            "target": "sklearn/sklearn.neighbors._kde/KernelDensity/score"
        },
        "sklearn/sklearn.neighbors._kde/KernelDensity/score_samples": {
            "target": "sklearn/sklearn.neighbors._kde/KernelDensity/score_samples"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/__init__": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/__init__"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_check_novelty_decision_function": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_check_novelty_decision_function"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_check_novelty_fit_predict": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_check_novelty_fit_predict"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_check_novelty_predict": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_check_novelty_predict"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_check_novelty_score_samples": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_check_novelty_score_samples"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_local_reachability_density": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_local_reachability_density"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_predict": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/_predict"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/decision_function": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/decision_function"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/fit": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/fit"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/fit_predict": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/fit_predict"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/predict": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/predict"
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/score_samples": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/score_samples"
        },
        "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/__init__": {
            "target": "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/__init__"
        },
        "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/_callback": {
            "target": "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/_callback"
        },
        "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/_initialize": {
            "target": "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/_initialize"
        },
        "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/_loss_grad_lbfgs": {
            "target": "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/_loss_grad_lbfgs"
        },
        "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/_more_tags": {
            "target": "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/_more_tags"
        },
        "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/_validate_params": {
            "target": "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/_validate_params"
        },
        "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/fit": {
            "target": "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/fit"
        },
        "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/transform": {
            "target": "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/transform"
        },
        "sklearn/sklearn.neighbors._nearest_centroid/NearestCentroid/__init__": {
            "target": "sklearn/sklearn.neighbors._nearest_centroid/NearestCentroid/__init__"
        },
        "sklearn/sklearn.neighbors._nearest_centroid/NearestCentroid/fit": {
            "target": "sklearn/sklearn.neighbors._nearest_centroid/NearestCentroid/fit"
        },
        "sklearn/sklearn.neighbors._nearest_centroid/NearestCentroid/predict": {
            "target": "sklearn/sklearn.neighbors._nearest_centroid/NearestCentroid/predict"
        },
        "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/__init__": {
            "target": "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/__init__"
        },
        "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/_more_tags": {
            "target": "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/_more_tags"
        },
        "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/fit": {
            "target": "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/fit"
        },
        "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/predict": {
            "target": "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/predict"
        },
        "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/__init__": {
            "target": "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/__init__"
        },
        "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/fit": {
            "target": "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/fit"
        },
        "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/predict": {
            "target": "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/predict"
        },
        "sklearn/sklearn.neighbors._unsupervised/NearestNeighbors/__init__": {
            "target": "sklearn/sklearn.neighbors._unsupervised/NearestNeighbors/__init__"
        },
        "sklearn/sklearn.neighbors._unsupervised/NearestNeighbors/fit": {
            "target": "sklearn/sklearn.neighbors._unsupervised/NearestNeighbors/fit"
        },
        "sklearn/sklearn.neighbors.setup/configuration": {
            "target": "sklearn/sklearn.neighbors.setup/configuration"
        },
        "sklearn/sklearn.neural_network._base/binary_log_loss": {
            "target": "sklearn/sklearn.neural_network._base/binary_log_loss"
        },
        "sklearn/sklearn.neural_network._base/inplace_identity": {
            "target": "sklearn/sklearn.neural_network._base/inplace_identity"
        },
        "sklearn/sklearn.neural_network._base/inplace_identity_derivative": {
            "target": "sklearn/sklearn.neural_network._base/inplace_identity_derivative"
        },
        "sklearn/sklearn.neural_network._base/inplace_logistic": {
            "target": "sklearn/sklearn.neural_network._base/inplace_logistic"
        },
        "sklearn/sklearn.neural_network._base/inplace_logistic_derivative": {
            "target": "sklearn/sklearn.neural_network._base/inplace_logistic_derivative"
        },
        "sklearn/sklearn.neural_network._base/inplace_relu": {
            "target": "sklearn/sklearn.neural_network._base/inplace_relu"
        },
        "sklearn/sklearn.neural_network._base/inplace_relu_derivative": {
            "target": "sklearn/sklearn.neural_network._base/inplace_relu_derivative"
        },
        "sklearn/sklearn.neural_network._base/inplace_softmax": {
            "target": "sklearn/sklearn.neural_network._base/inplace_softmax"
        },
        "sklearn/sklearn.neural_network._base/inplace_tanh": {
            "target": "sklearn/sklearn.neural_network._base/inplace_tanh"
        },
        "sklearn/sklearn.neural_network._base/inplace_tanh_derivative": {
            "target": "sklearn/sklearn.neural_network._base/inplace_tanh_derivative"
        },
        "sklearn/sklearn.neural_network._base/log_loss": {
            "target": "sklearn/sklearn.neural_network._base/log_loss"
        },
        "sklearn/sklearn.neural_network._base/squared_loss": {
            "target": "sklearn/sklearn.neural_network._base/squared_loss"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/__init__": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/__init__"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_backprop": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_backprop"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_check_solver": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_check_solver"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_compute_loss_grad": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_compute_loss_grad"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_fit": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_fit"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_fit_lbfgs": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_fit_lbfgs"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_fit_stochastic": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_fit_stochastic"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_forward_pass": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_forward_pass"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_forward_pass_fast": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_forward_pass_fast"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_init_coef": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_init_coef"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_initialize": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_initialize"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_loss_grad_lbfgs": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_loss_grad_lbfgs"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_unpack": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_unpack"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_update_no_improvement_count": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_update_no_improvement_count"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_validate_hyperparameters": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/_validate_hyperparameters"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/fit": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/fit"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/partial_fit": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/BaseMultilayerPerceptron/partial_fit"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/_more_tags": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/_more_tags"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/_validate_input": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/_validate_input"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/partial_fit": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/partial_fit"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/predict": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/predict"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/predict_log_proba": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/predict_log_proba"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/predict_proba": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/predict_proba"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/_validate_input": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/_validate_input"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/predict": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/predict"
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/_pack": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/_pack"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/__init__": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/__init__"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_fit": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_fit"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_free_energy": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_free_energy"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_mean_hiddens": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_mean_hiddens"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_more_tags": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_more_tags"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_sample_hiddens": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_sample_hiddens"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_sample_visibles": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/_sample_visibles"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/fit": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/fit"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/gibbs": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/gibbs"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/partial_fit": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/partial_fit"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/score_samples": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/score_samples"
        },
        "sklearn/sklearn.neural_network._rbm/BernoulliRBM/transform": {
            "target": "sklearn/sklearn.neural_network._rbm/BernoulliRBM/transform"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/AdamOptimizer/__init__": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/AdamOptimizer/__init__"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/AdamOptimizer/_get_updates": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/AdamOptimizer/_get_updates"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/BaseOptimizer/__init__": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/BaseOptimizer/__init__"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/BaseOptimizer/iteration_ends": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/BaseOptimizer/iteration_ends"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/BaseOptimizer/trigger_stopping": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/BaseOptimizer/trigger_stopping"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/BaseOptimizer/update_params": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/BaseOptimizer/update_params"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/__init__": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/__init__"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/_get_updates": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/_get_updates"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/iteration_ends": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/iteration_ends"
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/trigger_stopping": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/trigger_stopping"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/__sklearn_is_fitted__": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/__sklearn_is_fitted__"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/_hstack": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/_hstack"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/_iter": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/_iter"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/_log_message": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/_log_message"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/_parallel_func": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/_parallel_func"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/_sk_visual_block_": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/_sk_visual_block_"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/_update_transformer_list": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/_update_transformer_list"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/_validate_transformer_weights": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/_validate_transformer_weights"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/_validate_transformers": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/_validate_transformers"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/get_feature_names_out": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/get_feature_names_out"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/get_params": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/get_params"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/n_features_in_@getter": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/n_features_in_@getter"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/set_params": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/set_params"
        },
        "sklearn/sklearn.pipeline/Pipeline/__getitem__": {
            "target": "sklearn/sklearn.pipeline/Pipeline/__getitem__"
        },
        "sklearn/sklearn.pipeline/Pipeline/__len__": {
            "target": "sklearn/sklearn.pipeline/Pipeline/__len__"
        },
        "sklearn/sklearn.pipeline/Pipeline/__sklearn_is_fitted__": {
            "target": "sklearn/sklearn.pipeline/Pipeline/__sklearn_is_fitted__"
        },
        "sklearn/sklearn.pipeline/Pipeline/_can_inverse_transform": {
            "target": "sklearn/sklearn.pipeline/Pipeline/_can_inverse_transform"
        },
        "sklearn/sklearn.pipeline/Pipeline/_can_transform": {
            "target": "sklearn/sklearn.pipeline/Pipeline/_can_transform"
        },
        "sklearn/sklearn.pipeline/Pipeline/_check_fit_params": {
            "target": "sklearn/sklearn.pipeline/Pipeline/_check_fit_params"
        },
        "sklearn/sklearn.pipeline/Pipeline/_estimator_type@getter": {
            "target": "sklearn/sklearn.pipeline/Pipeline/_estimator_type@getter"
        },
        "sklearn/sklearn.pipeline/Pipeline/_final_estimator@getter": {
            "target": "sklearn/sklearn.pipeline/Pipeline/_final_estimator@getter"
        },
        "sklearn/sklearn.pipeline/Pipeline/_fit": {
            "target": "sklearn/sklearn.pipeline/Pipeline/_fit"
        },
        "sklearn/sklearn.pipeline/Pipeline/_iter": {
            "target": "sklearn/sklearn.pipeline/Pipeline/_iter"
        },
        "sklearn/sklearn.pipeline/Pipeline/_log_message": {
            "target": "sklearn/sklearn.pipeline/Pipeline/_log_message"
        },
        "sklearn/sklearn.pipeline/Pipeline/_more_tags": {
            "target": "sklearn/sklearn.pipeline/Pipeline/_more_tags"
        },
        "sklearn/sklearn.pipeline/Pipeline/_sk_visual_block_": {
            "target": "sklearn/sklearn.pipeline/Pipeline/_sk_visual_block_"
        },
        "sklearn/sklearn.pipeline/Pipeline/_validate_steps": {
            "target": "sklearn/sklearn.pipeline/Pipeline/_validate_steps"
        },
        "sklearn/sklearn.pipeline/Pipeline/classes_@getter": {
            "target": "sklearn/sklearn.pipeline/Pipeline/classes_@getter"
        },
        "sklearn/sklearn.pipeline/Pipeline/feature_names_in_@getter": {
            "target": "sklearn/sklearn.pipeline/Pipeline/feature_names_in_@getter"
        },
        "sklearn/sklearn.pipeline/Pipeline/fit_predict": {
            "target": "sklearn/sklearn.pipeline/Pipeline/fit_predict"
        },
        "sklearn/sklearn.pipeline/Pipeline/get_feature_names_out": {
            "target": "sklearn/sklearn.pipeline/Pipeline/get_feature_names_out"
        },
        "sklearn/sklearn.pipeline/Pipeline/n_features_in_@getter": {
            "target": "sklearn/sklearn.pipeline/Pipeline/n_features_in_@getter"
        },
        "sklearn/sklearn.pipeline/Pipeline/named_steps@getter": {
            "target": "sklearn/sklearn.pipeline/Pipeline/named_steps@getter"
        },
        "sklearn/sklearn.pipeline/Pipeline/predict_log_proba": {
            "target": "sklearn/sklearn.pipeline/Pipeline/predict_log_proba"
        },
        "sklearn/sklearn.pipeline/Pipeline/score_samples": {
            "target": "sklearn/sklearn.pipeline/Pipeline/score_samples"
        },
        "sklearn/sklearn.pipeline/_final_estimator_has": {
            "target": "sklearn/sklearn.pipeline/_final_estimator_has"
        },
        "sklearn/sklearn.pipeline/_fit_one": {
            "target": "sklearn/sklearn.pipeline/_fit_one"
        },
        "sklearn/sklearn.pipeline/_fit_transform_one": {
            "target": "sklearn/sklearn.pipeline/_fit_transform_one"
        },
        "sklearn/sklearn.pipeline/_name_estimators": {
            "target": "sklearn/sklearn.pipeline/_name_estimators"
        },
        "sklearn/sklearn.pipeline/_transform_one": {
            "target": "sklearn/sklearn.pipeline/_transform_one"
        },
        "sklearn/sklearn.preprocessing._data/Binarizer/__init__": {
            "target": "sklearn/sklearn.preprocessing._data/Binarizer/__init__"
        },
        "sklearn/sklearn.preprocessing._data/Binarizer/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._data/Binarizer/_more_tags"
        },
        "sklearn/sklearn.preprocessing._data/Binarizer/fit": {
            "target": "sklearn/sklearn.preprocessing._data/Binarizer/fit"
        },
        "sklearn/sklearn.preprocessing._data/Binarizer/transform": {
            "target": "sklearn/sklearn.preprocessing._data/Binarizer/transform"
        },
        "sklearn/sklearn.preprocessing._data/KernelCenterer/__init__": {
            "target": "sklearn/sklearn.preprocessing._data/KernelCenterer/__init__"
        },
        "sklearn/sklearn.preprocessing._data/KernelCenterer/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._data/KernelCenterer/_more_tags"
        },
        "sklearn/sklearn.preprocessing._data/KernelCenterer/_n_features_out@getter": {
            "target": "sklearn/sklearn.preprocessing._data/KernelCenterer/_n_features_out@getter"
        },
        "sklearn/sklearn.preprocessing._data/KernelCenterer/fit": {
            "target": "sklearn/sklearn.preprocessing._data/KernelCenterer/fit"
        },
        "sklearn/sklearn.preprocessing._data/KernelCenterer/transform": {
            "target": "sklearn/sklearn.preprocessing._data/KernelCenterer/transform"
        },
        "sklearn/sklearn.preprocessing._data/MaxAbsScaler/__init__": {
            "target": "sklearn/sklearn.preprocessing._data/MaxAbsScaler/__init__"
        },
        "sklearn/sklearn.preprocessing._data/MaxAbsScaler/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._data/MaxAbsScaler/_more_tags"
        },
        "sklearn/sklearn.preprocessing._data/MaxAbsScaler/_reset": {
            "target": "sklearn/sklearn.preprocessing._data/MaxAbsScaler/_reset"
        },
        "sklearn/sklearn.preprocessing._data/MaxAbsScaler/fit": {
            "target": "sklearn/sklearn.preprocessing._data/MaxAbsScaler/fit"
        },
        "sklearn/sklearn.preprocessing._data/MaxAbsScaler/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._data/MaxAbsScaler/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._data/MaxAbsScaler/partial_fit": {
            "target": "sklearn/sklearn.preprocessing._data/MaxAbsScaler/partial_fit"
        },
        "sklearn/sklearn.preprocessing._data/MaxAbsScaler/transform": {
            "target": "sklearn/sklearn.preprocessing._data/MaxAbsScaler/transform"
        },
        "sklearn/sklearn.preprocessing._data/MinMaxScaler/__init__": {
            "target": "sklearn/sklearn.preprocessing._data/MinMaxScaler/__init__"
        },
        "sklearn/sklearn.preprocessing._data/MinMaxScaler/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._data/MinMaxScaler/_more_tags"
        },
        "sklearn/sklearn.preprocessing._data/MinMaxScaler/_reset": {
            "target": "sklearn/sklearn.preprocessing._data/MinMaxScaler/_reset"
        },
        "sklearn/sklearn.preprocessing._data/MinMaxScaler/fit": {
            "target": "sklearn/sklearn.preprocessing._data/MinMaxScaler/fit"
        },
        "sklearn/sklearn.preprocessing._data/MinMaxScaler/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._data/MinMaxScaler/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._data/MinMaxScaler/partial_fit": {
            "target": "sklearn/sklearn.preprocessing._data/MinMaxScaler/partial_fit"
        },
        "sklearn/sklearn.preprocessing._data/MinMaxScaler/transform": {
            "target": "sklearn/sklearn.preprocessing._data/MinMaxScaler/transform"
        },
        "sklearn/sklearn.preprocessing._data/Normalizer/__init__": {
            "target": "sklearn/sklearn.preprocessing._data/Normalizer/__init__"
        },
        "sklearn/sklearn.preprocessing._data/Normalizer/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._data/Normalizer/_more_tags"
        },
        "sklearn/sklearn.preprocessing._data/Normalizer/fit": {
            "target": "sklearn/sklearn.preprocessing._data/Normalizer/fit"
        },
        "sklearn/sklearn.preprocessing._data/Normalizer/transform": {
            "target": "sklearn/sklearn.preprocessing._data/Normalizer/transform"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/__init__": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/__init__"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/_box_cox_inverse_tranform": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/_box_cox_inverse_tranform"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/_box_cox_optimize": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/_box_cox_optimize"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/_check_input": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/_check_input"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/_fit": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/_fit"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/_more_tags"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/_yeo_johnson_inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/_yeo_johnson_inverse_transform"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/_yeo_johnson_optimize": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/_yeo_johnson_optimize"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/_yeo_johnson_transform": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/_yeo_johnson_transform"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/fit": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/fit"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/fit_transform": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/fit_transform"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/transform": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/transform"
        },
        "sklearn/sklearn.preprocessing._data/QuantileTransformer/__init__": {
            "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/__init__"
        },
        "sklearn/sklearn.preprocessing._data/QuantileTransformer/_check_inputs": {
            "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/_check_inputs"
        },
        "sklearn/sklearn.preprocessing._data/QuantileTransformer/_dense_fit": {
            "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/_dense_fit"
        },
        "sklearn/sklearn.preprocessing._data/QuantileTransformer/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/_more_tags"
        },
        "sklearn/sklearn.preprocessing._data/QuantileTransformer/_sparse_fit": {
            "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/_sparse_fit"
        },
        "sklearn/sklearn.preprocessing._data/QuantileTransformer/_transform": {
            "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/_transform"
        },
        "sklearn/sklearn.preprocessing._data/QuantileTransformer/_transform_col": {
            "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/_transform_col"
        },
        "sklearn/sklearn.preprocessing._data/QuantileTransformer/fit": {
            "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/fit"
        },
        "sklearn/sklearn.preprocessing._data/QuantileTransformer/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._data/QuantileTransformer/transform": {
            "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/transform"
        },
        "sklearn/sklearn.preprocessing._data/RobustScaler/__init__": {
            "target": "sklearn/sklearn.preprocessing._data/RobustScaler/__init__"
        },
        "sklearn/sklearn.preprocessing._data/RobustScaler/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._data/RobustScaler/_more_tags"
        },
        "sklearn/sklearn.preprocessing._data/RobustScaler/fit": {
            "target": "sklearn/sklearn.preprocessing._data/RobustScaler/fit"
        },
        "sklearn/sklearn.preprocessing._data/RobustScaler/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._data/RobustScaler/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._data/RobustScaler/transform": {
            "target": "sklearn/sklearn.preprocessing._data/RobustScaler/transform"
        },
        "sklearn/sklearn.preprocessing._data/StandardScaler/__init__": {
            "target": "sklearn/sklearn.preprocessing._data/StandardScaler/__init__"
        },
        "sklearn/sklearn.preprocessing._data/StandardScaler/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._data/StandardScaler/_more_tags"
        },
        "sklearn/sklearn.preprocessing._data/StandardScaler/_reset": {
            "target": "sklearn/sklearn.preprocessing._data/StandardScaler/_reset"
        },
        "sklearn/sklearn.preprocessing._data/StandardScaler/fit": {
            "target": "sklearn/sklearn.preprocessing._data/StandardScaler/fit"
        },
        "sklearn/sklearn.preprocessing._data/StandardScaler/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._data/StandardScaler/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._data/StandardScaler/partial_fit": {
            "target": "sklearn/sklearn.preprocessing._data/StandardScaler/partial_fit"
        },
        "sklearn/sklearn.preprocessing._data/StandardScaler/transform": {
            "target": "sklearn/sklearn.preprocessing._data/StandardScaler/transform"
        },
        "sklearn/sklearn.preprocessing._data/_handle_zeros_in_scale": {
            "target": "sklearn/sklearn.preprocessing._data/_handle_zeros_in_scale"
        },
        "sklearn/sklearn.preprocessing._data/_is_constant_feature": {
            "target": "sklearn/sklearn.preprocessing._data/_is_constant_feature"
        },
        "sklearn/sklearn.preprocessing._data/add_dummy_feature": {
            "target": "sklearn/sklearn.preprocessing._data/add_dummy_feature"
        },
        "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__": {
            "target": "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__"
        },
        "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/_validate_n_bins": {
            "target": "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/_validate_n_bins"
        },
        "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/fit": {
            "target": "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/fit"
        },
        "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/get_feature_names_out": {
            "target": "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/get_feature_names_out"
        },
        "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/transform": {
            "target": "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/transform"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/__init__": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/__init__"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_compute_drop_idx": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_compute_drop_idx"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_compute_n_features_outs": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_compute_n_features_outs"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_compute_transformed_categories": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_compute_transformed_categories"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_fit_infrequent_category_mapping": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_fit_infrequent_category_mapping"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_identify_infrequent": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_identify_infrequent"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_map_drop_idx_to_infrequent": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_map_drop_idx_to_infrequent"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_map_infrequent_categories": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_map_infrequent_categories"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_remove_dropped_categories": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_remove_dropped_categories"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_validate_keywords": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/_validate_keywords"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/fit": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/fit"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/fit_transform": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/fit_transform"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/get_feature_names": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/get_feature_names"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/get_feature_names_out": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/get_feature_names_out"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/infrequent_categories_@getter": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/infrequent_categories_@getter"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/transform": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/transform"
        },
        "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/__init__": {
            "target": "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/__init__"
        },
        "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/fit": {
            "target": "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/fit"
        },
        "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/transform": {
            "target": "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/transform"
        },
        "sklearn/sklearn.preprocessing._encoders/_BaseEncoder/_check_X": {
            "target": "sklearn/sklearn.preprocessing._encoders/_BaseEncoder/_check_X"
        },
        "sklearn/sklearn.preprocessing._encoders/_BaseEncoder/_fit": {
            "target": "sklearn/sklearn.preprocessing._encoders/_BaseEncoder/_fit"
        },
        "sklearn/sklearn.preprocessing._encoders/_BaseEncoder/_get_feature": {
            "target": "sklearn/sklearn.preprocessing._encoders/_BaseEncoder/_get_feature"
        },
        "sklearn/sklearn.preprocessing._encoders/_BaseEncoder/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._encoders/_BaseEncoder/_more_tags"
        },
        "sklearn/sklearn.preprocessing._encoders/_BaseEncoder/_transform": {
            "target": "sklearn/sklearn.preprocessing._encoders/_BaseEncoder/_transform"
        },
        "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/__init__": {
            "target": "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/__init__"
        },
        "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/__sklearn_is_fitted__": {
            "target": "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/__sklearn_is_fitted__"
        },
        "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/_check_input": {
            "target": "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/_check_input"
        },
        "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/_check_inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/_check_inverse_transform"
        },
        "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/_more_tags"
        },
        "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/_transform": {
            "target": "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/_transform"
        },
        "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/fit": {
            "target": "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/fit"
        },
        "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/get_feature_names_out": {
            "target": "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/get_feature_names_out"
        },
        "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/transform": {
            "target": "sklearn/sklearn.preprocessing._function_transformer/FunctionTransformer/transform"
        },
        "sklearn/sklearn.preprocessing._function_transformer/_identity": {
            "target": "sklearn/sklearn.preprocessing._function_transformer/_identity"
        },
        "sklearn/sklearn.preprocessing._label/LabelBinarizer/__init__": {
            "target": "sklearn/sklearn.preprocessing._label/LabelBinarizer/__init__"
        },
        "sklearn/sklearn.preprocessing._label/LabelBinarizer/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._label/LabelBinarizer/_more_tags"
        },
        "sklearn/sklearn.preprocessing._label/LabelBinarizer/fit": {
            "target": "sklearn/sklearn.preprocessing._label/LabelBinarizer/fit"
        },
        "sklearn/sklearn.preprocessing._label/LabelBinarizer/fit_transform": {
            "target": "sklearn/sklearn.preprocessing._label/LabelBinarizer/fit_transform"
        },
        "sklearn/sklearn.preprocessing._label/LabelBinarizer/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._label/LabelBinarizer/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._label/LabelBinarizer/transform": {
            "target": "sklearn/sklearn.preprocessing._label/LabelBinarizer/transform"
        },
        "sklearn/sklearn.preprocessing._label/LabelEncoder/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._label/LabelEncoder/_more_tags"
        },
        "sklearn/sklearn.preprocessing._label/LabelEncoder/fit": {
            "target": "sklearn/sklearn.preprocessing._label/LabelEncoder/fit"
        },
        "sklearn/sklearn.preprocessing._label/LabelEncoder/fit_transform": {
            "target": "sklearn/sklearn.preprocessing._label/LabelEncoder/fit_transform"
        },
        "sklearn/sklearn.preprocessing._label/LabelEncoder/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._label/LabelEncoder/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._label/LabelEncoder/transform": {
            "target": "sklearn/sklearn.preprocessing._label/LabelEncoder/transform"
        },
        "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/__init__": {
            "target": "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/__init__"
        },
        "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/_build_cache": {
            "target": "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/_build_cache"
        },
        "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/_more_tags": {
            "target": "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/_more_tags"
        },
        "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/_transform": {
            "target": "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/_transform"
        },
        "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/fit": {
            "target": "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/fit"
        },
        "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/fit_transform": {
            "target": "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/fit_transform"
        },
        "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/inverse_transform": {
            "target": "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/inverse_transform"
        },
        "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/transform": {
            "target": "sklearn/sklearn.preprocessing._label/MultiLabelBinarizer/transform"
        },
        "sklearn/sklearn.preprocessing._label/_inverse_binarize_multiclass": {
            "target": "sklearn/sklearn.preprocessing._label/_inverse_binarize_multiclass"
        },
        "sklearn/sklearn.preprocessing._label/_inverse_binarize_thresholding": {
            "target": "sklearn/sklearn.preprocessing._label/_inverse_binarize_thresholding"
        },
        "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/__init__": {
            "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/__init__"
        },
        "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/_combinations": {
            "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/_combinations"
        },
        "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/_num_combinations": {
            "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/_num_combinations"
        },
        "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/fit": {
            "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/fit"
        },
        "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/get_feature_names": {
            "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/get_feature_names"
        },
        "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/get_feature_names_out": {
            "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/get_feature_names_out"
        },
        "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/n_input_features_@getter": {
            "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/n_input_features_@getter"
        },
        "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/powers_@getter": {
            "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/powers_@getter"
        },
        "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/transform": {
            "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/transform"
        },
        "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__": {
            "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__"
        },
        "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/_get_base_knot_positions": {
            "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/_get_base_knot_positions"
        },
        "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/fit": {
            "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/fit"
        },
        "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/get_feature_names": {
            "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/get_feature_names"
        },
        "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/get_feature_names_out": {
            "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/get_feature_names_out"
        },
        "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/transform": {
            "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/transform"
        },
        "sklearn/sklearn.preprocessing.setup/configuration": {
            "target": "sklearn/sklearn.preprocessing.setup/configuration"
        },
        "sklearn/sklearn.random_projection/BaseRandomProjection/__init__": {
            "target": "sklearn/sklearn.random_projection/BaseRandomProjection/__init__"
        },
        "sklearn/sklearn.random_projection/BaseRandomProjection/_compute_inverse_components": {
            "target": "sklearn/sklearn.random_projection/BaseRandomProjection/_compute_inverse_components"
        },
        "sklearn/sklearn.random_projection/BaseRandomProjection/_make_random_matrix": {
            "target": "sklearn/sklearn.random_projection/BaseRandomProjection/_make_random_matrix"
        },
        "sklearn/sklearn.random_projection/BaseRandomProjection/_more_tags": {
            "target": "sklearn/sklearn.random_projection/BaseRandomProjection/_more_tags"
        },
        "sklearn/sklearn.random_projection/BaseRandomProjection/_n_features_out@getter": {
            "target": "sklearn/sklearn.random_projection/BaseRandomProjection/_n_features_out@getter"
        },
        "sklearn/sklearn.random_projection/BaseRandomProjection/inverse_transform": {
            "target": "sklearn/sklearn.random_projection/BaseRandomProjection/inverse_transform"
        },
        "sklearn/sklearn.random_projection/GaussianRandomProjection/_make_random_matrix": {
            "target": "sklearn/sklearn.random_projection/GaussianRandomProjection/_make_random_matrix"
        },
        "sklearn/sklearn.random_projection/SparseRandomProjection/_make_random_matrix": {
            "target": "sklearn/sklearn.random_projection/SparseRandomProjection/_make_random_matrix"
        },
        "sklearn/sklearn.random_projection/_check_density": {
            "target": "sklearn/sklearn.random_projection/_check_density"
        },
        "sklearn/sklearn.random_projection/_check_input_size": {
            "target": "sklearn/sklearn.random_projection/_check_input_size"
        },
        "sklearn/sklearn.random_projection/_gaussian_random_matrix": {
            "target": "sklearn/sklearn.random_projection/_gaussian_random_matrix"
        },
        "sklearn/sklearn.random_projection/_sparse_random_matrix": {
            "target": "sklearn/sklearn.random_projection/_sparse_random_matrix"
        },
        "sklearn/sklearn.random_projection/johnson_lindenstrauss_min_dim": {
            "target": "sklearn/sklearn.random_projection/johnson_lindenstrauss_min_dim"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/__init__": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/__init__"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/_build_graph": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/_build_graph"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/_get_kernel": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/_get_kernel"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/fit": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/fit"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/predict": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/predict"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/predict_proba": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/predict_proba"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/LabelPropagation/__init__": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/LabelPropagation/__init__"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/LabelPropagation/_build_graph": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/LabelPropagation/_build_graph"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/LabelPropagation/fit": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/LabelPropagation/fit"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/LabelSpreading/__init__": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/LabelSpreading/__init__"
        },
        "sklearn/sklearn.semi_supervised._label_propagation/LabelSpreading/_build_graph": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/LabelSpreading/_build_graph"
        },
        "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/__init__": {
            "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/__init__"
        },
        "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/decision_function": {
            "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/decision_function"
        },
        "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/fit": {
            "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/fit"
        },
        "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict": {
            "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict"
        },
        "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict_log_proba": {
            "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict_log_proba"
        },
        "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict_proba": {
            "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/predict_proba"
        },
        "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/score": {
            "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/score"
        },
        "sklearn/sklearn.semi_supervised._self_training/_estimator_has": {
            "target": "sklearn/sklearn.semi_supervised._self_training/_estimator_has"
        },
        "sklearn/sklearn.setup/configuration": {
            "target": "sklearn/sklearn.setup/configuration"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/__init__": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/__init__"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_compute_kernel": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_compute_kernel"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_decision_function": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_decision_function"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_dense_decision_function": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_dense_decision_function"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_dense_fit": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_dense_fit"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_dense_predict": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_dense_predict"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_get_coef": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_get_coef"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_more_tags": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_more_tags"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_sparse_decision_function": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_sparse_decision_function"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_sparse_fit": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_sparse_fit"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_sparse_predict": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_sparse_predict"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_validate_for_predict": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_validate_for_predict"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_validate_targets": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_validate_targets"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/_warn_from_fit_status": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/_warn_from_fit_status"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/coef_@getter": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/coef_@getter"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/fit": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/fit"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/n_support_@getter": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/n_support_@getter"
        },
        "sklearn/sklearn.svm._base/BaseLibSVM/predict": {
            "target": "sklearn/sklearn.svm._base/BaseLibSVM/predict"
        },
        "sklearn/sklearn.svm._base/BaseSVC/__init__": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/__init__"
        },
        "sklearn/sklearn.svm._base/BaseSVC/_check_proba": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/_check_proba"
        },
        "sklearn/sklearn.svm._base/BaseSVC/_class_weight@getter": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/_class_weight@getter"
        },
        "sklearn/sklearn.svm._base/BaseSVC/_dense_predict_proba": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/_dense_predict_proba"
        },
        "sklearn/sklearn.svm._base/BaseSVC/_get_coef": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/_get_coef"
        },
        "sklearn/sklearn.svm._base/BaseSVC/_sparse_predict_proba": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/_sparse_predict_proba"
        },
        "sklearn/sklearn.svm._base/BaseSVC/_validate_targets": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/_validate_targets"
        },
        "sklearn/sklearn.svm._base/BaseSVC/decision_function": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/decision_function"
        },
        "sklearn/sklearn.svm._base/BaseSVC/predict": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/predict"
        },
        "sklearn/sklearn.svm._base/BaseSVC/predict_log_proba": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/predict_log_proba"
        },
        "sklearn/sklearn.svm._base/BaseSVC/predict_proba": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/predict_proba"
        },
        "sklearn/sklearn.svm._base/BaseSVC/probA_@getter": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/probA_@getter"
        },
        "sklearn/sklearn.svm._base/BaseSVC/probB_@getter": {
            "target": "sklearn/sklearn.svm._base/BaseSVC/probB_@getter"
        },
        "sklearn/sklearn.svm._base/_fit_liblinear": {
            "target": "sklearn/sklearn.svm._base/_fit_liblinear"
        },
        "sklearn/sklearn.svm._base/_get_liblinear_solver_type": {
            "target": "sklearn/sklearn.svm._base/_get_liblinear_solver_type"
        },
        "sklearn/sklearn.svm._base/_one_vs_one_coef": {
            "target": "sklearn/sklearn.svm._base/_one_vs_one_coef"
        },
        "sklearn/sklearn.svm._bounds/l1_min_c": {
            "target": "sklearn/sklearn.svm._bounds/l1_min_c"
        },
        "sklearn/sklearn.svm._classes/LinearSVC/__init__": {
            "target": "sklearn/sklearn.svm._classes/LinearSVC/__init__"
        },
        "sklearn/sklearn.svm._classes/LinearSVC/_more_tags": {
            "target": "sklearn/sklearn.svm._classes/LinearSVC/_more_tags"
        },
        "sklearn/sklearn.svm._classes/LinearSVC/fit": {
            "target": "sklearn/sklearn.svm._classes/LinearSVC/fit"
        },
        "sklearn/sklearn.svm._classes/LinearSVR/__init__": {
            "target": "sklearn/sklearn.svm._classes/LinearSVR/__init__"
        },
        "sklearn/sklearn.svm._classes/LinearSVR/_more_tags": {
            "target": "sklearn/sklearn.svm._classes/LinearSVR/_more_tags"
        },
        "sklearn/sklearn.svm._classes/LinearSVR/fit": {
            "target": "sklearn/sklearn.svm._classes/LinearSVR/fit"
        },
        "sklearn/sklearn.svm._classes/NuSVC/__init__": {
            "target": "sklearn/sklearn.svm._classes/NuSVC/__init__"
        },
        "sklearn/sklearn.svm._classes/NuSVC/_more_tags": {
            "target": "sklearn/sklearn.svm._classes/NuSVC/_more_tags"
        },
        "sklearn/sklearn.svm._classes/NuSVR/__init__": {
            "target": "sklearn/sklearn.svm._classes/NuSVR/__init__"
        },
        "sklearn/sklearn.svm._classes/NuSVR/_more_tags": {
            "target": "sklearn/sklearn.svm._classes/NuSVR/_more_tags"
        },
        "sklearn/sklearn.svm._classes/NuSVR/class_weight_@getter": {
            "target": "sklearn/sklearn.svm._classes/NuSVR/class_weight_@getter"
        },
        "sklearn/sklearn.svm._classes/OneClassSVM/__init__": {
            "target": "sklearn/sklearn.svm._classes/OneClassSVM/__init__"
        },
        "sklearn/sklearn.svm._classes/OneClassSVM/_more_tags": {
            "target": "sklearn/sklearn.svm._classes/OneClassSVM/_more_tags"
        },
        "sklearn/sklearn.svm._classes/OneClassSVM/class_weight_@getter": {
            "target": "sklearn/sklearn.svm._classes/OneClassSVM/class_weight_@getter"
        },
        "sklearn/sklearn.svm._classes/OneClassSVM/decision_function": {
            "target": "sklearn/sklearn.svm._classes/OneClassSVM/decision_function"
        },
        "sklearn/sklearn.svm._classes/OneClassSVM/fit": {
            "target": "sklearn/sklearn.svm._classes/OneClassSVM/fit"
        },
        "sklearn/sklearn.svm._classes/OneClassSVM/predict": {
            "target": "sklearn/sklearn.svm._classes/OneClassSVM/predict"
        },
        "sklearn/sklearn.svm._classes/OneClassSVM/score_samples": {
            "target": "sklearn/sklearn.svm._classes/OneClassSVM/score_samples"
        },
        "sklearn/sklearn.svm._classes/SVC/__init__": {
            "target": "sklearn/sklearn.svm._classes/SVC/__init__"
        },
        "sklearn/sklearn.svm._classes/SVC/_more_tags": {
            "target": "sklearn/sklearn.svm._classes/SVC/_more_tags"
        },
        "sklearn/sklearn.svm._classes/SVR/__init__": {
            "target": "sklearn/sklearn.svm._classes/SVR/__init__"
        },
        "sklearn/sklearn.svm._classes/SVR/_more_tags": {
            "target": "sklearn/sklearn.svm._classes/SVR/_more_tags"
        },
        "sklearn/sklearn.svm._classes/SVR/class_weight_@getter": {
            "target": "sklearn/sklearn.svm._classes/SVR/class_weight_@getter"
        },
        "sklearn/sklearn.svm.setup/configuration": {
            "target": "sklearn/sklearn.svm.setup/configuration"
        },
        "sklearn/sklearn.tree._classes/BaseDecisionTree/__init__": {
            "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/__init__"
        },
        "sklearn/sklearn.tree._classes/BaseDecisionTree/_prune_tree": {
            "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/_prune_tree"
        },
        "sklearn/sklearn.tree._classes/BaseDecisionTree/_validate_X_predict": {
            "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/_validate_X_predict"
        },
        "sklearn/sklearn.tree._classes/BaseDecisionTree/apply": {
            "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/apply"
        },
        "sklearn/sklearn.tree._classes/BaseDecisionTree/cost_complexity_pruning_path": {
            "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/cost_complexity_pruning_path"
        },
        "sklearn/sklearn.tree._classes/BaseDecisionTree/decision_path": {
            "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/decision_path"
        },
        "sklearn/sklearn.tree._classes/BaseDecisionTree/feature_importances_@getter": {
            "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/feature_importances_@getter"
        },
        "sklearn/sklearn.tree._classes/BaseDecisionTree/fit": {
            "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/fit"
        },
        "sklearn/sklearn.tree._classes/BaseDecisionTree/get_depth": {
            "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/get_depth"
        },
        "sklearn/sklearn.tree._classes/BaseDecisionTree/get_n_leaves": {
            "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/get_n_leaves"
        },
        "sklearn/sklearn.tree._classes/BaseDecisionTree/predict": {
            "target": "sklearn/sklearn.tree._classes/BaseDecisionTree/predict"
        },
        "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__"
        },
        "sklearn/sklearn.tree._classes/DecisionTreeClassifier/_more_tags": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/_more_tags"
        },
        "sklearn/sklearn.tree._classes/DecisionTreeClassifier/fit": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/fit"
        },
        "sklearn/sklearn.tree._classes/DecisionTreeClassifier/n_features_@getter": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/n_features_@getter"
        },
        "sklearn/sklearn.tree._classes/DecisionTreeClassifier/predict_log_proba": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/predict_log_proba"
        },
        "sklearn/sklearn.tree._classes/DecisionTreeClassifier/predict_proba": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/predict_proba"
        },
        "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__"
        },
        "sklearn/sklearn.tree._classes/DecisionTreeRegressor/_compute_partial_dependence_recursion": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeRegressor/_compute_partial_dependence_recursion"
        },
        "sklearn/sklearn.tree._classes/DecisionTreeRegressor/fit": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeRegressor/fit"
        },
        "sklearn/sklearn.tree._classes/DecisionTreeRegressor/n_features_@getter": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeRegressor/n_features_@getter"
        },
        "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__": {
            "target": "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__"
        },
        "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__": {
            "target": "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__"
        },
        "sklearn/sklearn.tree._export/Sentinel/__repr__": {
            "target": "sklearn/sklearn.tree._export/Sentinel/__repr__"
        },
        "sklearn/sklearn.tree._export/_BaseTreeExporter/__init__": {
            "target": "sklearn/sklearn.tree._export/_BaseTreeExporter/__init__"
        },
        "sklearn/sklearn.tree._export/_BaseTreeExporter/get_color": {
            "target": "sklearn/sklearn.tree._export/_BaseTreeExporter/get_color"
        },
        "sklearn/sklearn.tree._export/_BaseTreeExporter/get_fill_color": {
            "target": "sklearn/sklearn.tree._export/_BaseTreeExporter/get_fill_color"
        },
        "sklearn/sklearn.tree._export/_BaseTreeExporter/node_to_str": {
            "target": "sklearn/sklearn.tree._export/_BaseTreeExporter/node_to_str"
        },
        "sklearn/sklearn.tree._export/_DOTTreeExporter/__init__": {
            "target": "sklearn/sklearn.tree._export/_DOTTreeExporter/__init__"
        },
        "sklearn/sklearn.tree._export/_DOTTreeExporter/export": {
            "target": "sklearn/sklearn.tree._export/_DOTTreeExporter/export"
        },
        "sklearn/sklearn.tree._export/_DOTTreeExporter/head": {
            "target": "sklearn/sklearn.tree._export/_DOTTreeExporter/head"
        },
        "sklearn/sklearn.tree._export/_DOTTreeExporter/recurse": {
            "target": "sklearn/sklearn.tree._export/_DOTTreeExporter/recurse"
        },
        "sklearn/sklearn.tree._export/_DOTTreeExporter/tail": {
            "target": "sklearn/sklearn.tree._export/_DOTTreeExporter/tail"
        },
        "sklearn/sklearn.tree._export/_MPLTreeExporter/__init__": {
            "target": "sklearn/sklearn.tree._export/_MPLTreeExporter/__init__"
        },
        "sklearn/sklearn.tree._export/_MPLTreeExporter/_make_tree": {
            "target": "sklearn/sklearn.tree._export/_MPLTreeExporter/_make_tree"
        },
        "sklearn/sklearn.tree._export/_MPLTreeExporter/export": {
            "target": "sklearn/sklearn.tree._export/_MPLTreeExporter/export"
        },
        "sklearn/sklearn.tree._export/_MPLTreeExporter/recurse": {
            "target": "sklearn/sklearn.tree._export/_MPLTreeExporter/recurse"
        },
        "sklearn/sklearn.tree._export/_color_brew": {
            "target": "sklearn/sklearn.tree._export/_color_brew"
        },
        "sklearn/sklearn.tree._export/_compute_depth": {
            "target": "sklearn/sklearn.tree._export/_compute_depth"
        },
        "sklearn/sklearn.tree._reingold_tilford/DrawTree/__init__": {
            "target": "sklearn/sklearn.tree._reingold_tilford/DrawTree/__init__"
        },
        "sklearn/sklearn.tree._reingold_tilford/DrawTree/__repr__": {
            "target": "sklearn/sklearn.tree._reingold_tilford/DrawTree/__repr__"
        },
        "sklearn/sklearn.tree._reingold_tilford/DrawTree/__str__": {
            "target": "sklearn/sklearn.tree._reingold_tilford/DrawTree/__str__"
        },
        "sklearn/sklearn.tree._reingold_tilford/DrawTree/get_lmost_sibling": {
            "target": "sklearn/sklearn.tree._reingold_tilford/DrawTree/get_lmost_sibling"
        },
        "sklearn/sklearn.tree._reingold_tilford/DrawTree/lbrother": {
            "target": "sklearn/sklearn.tree._reingold_tilford/DrawTree/lbrother"
        },
        "sklearn/sklearn.tree._reingold_tilford/DrawTree/left": {
            "target": "sklearn/sklearn.tree._reingold_tilford/DrawTree/left"
        },
        "sklearn/sklearn.tree._reingold_tilford/DrawTree/max_extents": {
            "target": "sklearn/sklearn.tree._reingold_tilford/DrawTree/max_extents"
        },
        "sklearn/sklearn.tree._reingold_tilford/DrawTree/right": {
            "target": "sklearn/sklearn.tree._reingold_tilford/DrawTree/right"
        },
        "sklearn/sklearn.tree._reingold_tilford/Tree/__init__": {
            "target": "sklearn/sklearn.tree._reingold_tilford/Tree/__init__"
        },
        "sklearn/sklearn.tree._reingold_tilford/ancestor": {
            "target": "sklearn/sklearn.tree._reingold_tilford/ancestor"
        },
        "sklearn/sklearn.tree._reingold_tilford/apportion": {
            "target": "sklearn/sklearn.tree._reingold_tilford/apportion"
        },
        "sklearn/sklearn.tree._reingold_tilford/buchheim": {
            "target": "sklearn/sklearn.tree._reingold_tilford/buchheim"
        },
        "sklearn/sklearn.tree._reingold_tilford/execute_shifts": {
            "target": "sklearn/sklearn.tree._reingold_tilford/execute_shifts"
        },
        "sklearn/sklearn.tree._reingold_tilford/first_walk": {
            "target": "sklearn/sklearn.tree._reingold_tilford/first_walk"
        },
        "sklearn/sklearn.tree._reingold_tilford/move_subtree": {
            "target": "sklearn/sklearn.tree._reingold_tilford/move_subtree"
        },
        "sklearn/sklearn.tree._reingold_tilford/second_walk": {
            "target": "sklearn/sklearn.tree._reingold_tilford/second_walk"
        },
        "sklearn/sklearn.tree._reingold_tilford/third_walk": {
            "target": "sklearn/sklearn.tree._reingold_tilford/third_walk"
        },
        "sklearn/sklearn.tree.setup/configuration": {
            "target": "sklearn/sklearn.tree.setup/configuration"
        },
        "sklearn/sklearn.utils._arpack/_init_arpack_v0": {
            "target": "sklearn/sklearn.utils._arpack/_init_arpack_v0"
        },
        "sklearn/sklearn.utils._bunch/Bunch/__dir__": {
            "target": "sklearn/sklearn.utils._bunch/Bunch/__dir__"
        },
        "sklearn/sklearn.utils._bunch/Bunch/__getattr__": {
            "target": "sklearn/sklearn.utils._bunch/Bunch/__getattr__"
        },
        "sklearn/sklearn.utils._bunch/Bunch/__init__": {
            "target": "sklearn/sklearn.utils._bunch/Bunch/__init__"
        },
        "sklearn/sklearn.utils._bunch/Bunch/__setattr__": {
            "target": "sklearn/sklearn.utils._bunch/Bunch/__setattr__"
        },
        "sklearn/sklearn.utils._bunch/Bunch/__setstate__": {
            "target": "sklearn/sklearn.utils._bunch/Bunch/__setstate__"
        },
        "sklearn/sklearn.utils._encode/MissingValues/to_list": {
            "target": "sklearn/sklearn.utils._encode/MissingValues/to_list"
        },
        "sklearn/sklearn.utils._encode/_NaNCounter/__init__": {
            "target": "sklearn/sklearn.utils._encode/_NaNCounter/__init__"
        },
        "sklearn/sklearn.utils._encode/_NaNCounter/__missing__": {
            "target": "sklearn/sklearn.utils._encode/_NaNCounter/__missing__"
        },
        "sklearn/sklearn.utils._encode/_NaNCounter/_generate_items": {
            "target": "sklearn/sklearn.utils._encode/_NaNCounter/_generate_items"
        },
        "sklearn/sklearn.utils._encode/_check_unknown": {
            "target": "sklearn/sklearn.utils._encode/_check_unknown"
        },
        "sklearn/sklearn.utils._encode/_encode": {
            "target": "sklearn/sklearn.utils._encode/_encode"
        },
        "sklearn/sklearn.utils._encode/_extract_missing": {
            "target": "sklearn/sklearn.utils._encode/_extract_missing"
        },
        "sklearn/sklearn.utils._encode/_get_counts": {
            "target": "sklearn/sklearn.utils._encode/_get_counts"
        },
        "sklearn/sklearn.utils._encode/_map_to_integer": {
            "target": "sklearn/sklearn.utils._encode/_map_to_integer"
        },
        "sklearn/sklearn.utils._encode/_nandict/__init__": {
            "target": "sklearn/sklearn.utils._encode/_nandict/__init__"
        },
        "sklearn/sklearn.utils._encode/_nandict/__missing__": {
            "target": "sklearn/sklearn.utils._encode/_nandict/__missing__"
        },
        "sklearn/sklearn.utils._encode/_unique": {
            "target": "sklearn/sklearn.utils._encode/_unique"
        },
        "sklearn/sklearn.utils._encode/_unique_np": {
            "target": "sklearn/sklearn.utils._encode/_unique_np"
        },
        "sklearn/sklearn.utils._encode/_unique_python": {
            "target": "sklearn/sklearn.utils._encode/_unique_python"
        },
        "sklearn/sklearn.utils._estimator_html_repr/_IDCounter/__init__": {
            "target": "sklearn/sklearn.utils._estimator_html_repr/_IDCounter/__init__"
        },
        "sklearn/sklearn.utils._estimator_html_repr/_IDCounter/get_id": {
            "target": "sklearn/sklearn.utils._estimator_html_repr/_IDCounter/get_id"
        },
        "sklearn/sklearn.utils._estimator_html_repr/_VisualBlock/__init__": {
            "target": "sklearn/sklearn.utils._estimator_html_repr/_VisualBlock/__init__"
        },
        "sklearn/sklearn.utils._estimator_html_repr/_VisualBlock/_sk_visual_block_": {
            "target": "sklearn/sklearn.utils._estimator_html_repr/_VisualBlock/_sk_visual_block_"
        },
        "sklearn/sklearn.utils._estimator_html_repr/_get_visual_block": {
            "target": "sklearn/sklearn.utils._estimator_html_repr/_get_visual_block"
        },
        "sklearn/sklearn.utils._estimator_html_repr/_write_estimator_html": {
            "target": "sklearn/sklearn.utils._estimator_html_repr/_write_estimator_html"
        },
        "sklearn/sklearn.utils._estimator_html_repr/_write_label_html": {
            "target": "sklearn/sklearn.utils._estimator_html_repr/_write_label_html"
        },
        "sklearn/sklearn.utils._estimator_html_repr/estimator_html_repr": {
            "target": "sklearn/sklearn.utils._estimator_html_repr/estimator_html_repr"
        },
        "sklearn/sklearn.utils._mask/_get_dense_mask": {
            "target": "sklearn/sklearn.utils._mask/_get_dense_mask"
        },
        "sklearn/sklearn.utils._mask/_get_mask": {
            "target": "sklearn/sklearn.utils._mask/_get_mask"
        },
        "sklearn/sklearn.utils._mocking/ArraySlicingWrapper/__getitem__": {
            "target": "sklearn/sklearn.utils._mocking/ArraySlicingWrapper/__getitem__"
        },
        "sklearn/sklearn.utils._mocking/ArraySlicingWrapper/__init__": {
            "target": "sklearn/sklearn.utils._mocking/ArraySlicingWrapper/__init__"
        },
        "sklearn/sklearn.utils._mocking/CheckingClassifier/__init__": {
            "target": "sklearn/sklearn.utils._mocking/CheckingClassifier/__init__"
        },
        "sklearn/sklearn.utils._mocking/CheckingClassifier/_check_X_y": {
            "target": "sklearn/sklearn.utils._mocking/CheckingClassifier/_check_X_y"
        },
        "sklearn/sklearn.utils._mocking/CheckingClassifier/_more_tags": {
            "target": "sklearn/sklearn.utils._mocking/CheckingClassifier/_more_tags"
        },
        "sklearn/sklearn.utils._mocking/CheckingClassifier/decision_function": {
            "target": "sklearn/sklearn.utils._mocking/CheckingClassifier/decision_function"
        },
        "sklearn/sklearn.utils._mocking/CheckingClassifier/fit": {
            "target": "sklearn/sklearn.utils._mocking/CheckingClassifier/fit"
        },
        "sklearn/sklearn.utils._mocking/CheckingClassifier/predict": {
            "target": "sklearn/sklearn.utils._mocking/CheckingClassifier/predict"
        },
        "sklearn/sklearn.utils._mocking/CheckingClassifier/predict_proba": {
            "target": "sklearn/sklearn.utils._mocking/CheckingClassifier/predict_proba"
        },
        "sklearn/sklearn.utils._mocking/CheckingClassifier/score": {
            "target": "sklearn/sklearn.utils._mocking/CheckingClassifier/score"
        },
        "sklearn/sklearn.utils._mocking/MockDataFrame/__array__": {
            "target": "sklearn/sklearn.utils._mocking/MockDataFrame/__array__"
        },
        "sklearn/sklearn.utils._mocking/MockDataFrame/__eq__": {
            "target": "sklearn/sklearn.utils._mocking/MockDataFrame/__eq__"
        },
        "sklearn/sklearn.utils._mocking/MockDataFrame/__init__": {
            "target": "sklearn/sklearn.utils._mocking/MockDataFrame/__init__"
        },
        "sklearn/sklearn.utils._mocking/MockDataFrame/__len__": {
            "target": "sklearn/sklearn.utils._mocking/MockDataFrame/__len__"
        },
        "sklearn/sklearn.utils._mocking/MockDataFrame/__ne__": {
            "target": "sklearn/sklearn.utils._mocking/MockDataFrame/__ne__"
        },
        "sklearn/sklearn.utils._mocking/MockDataFrame/take": {
            "target": "sklearn/sklearn.utils._mocking/MockDataFrame/take"
        },
        "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper/__init__": {
            "target": "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper/__init__"
        },
        "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper/_more_tags": {
            "target": "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper/_more_tags"
        },
        "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper/fit": {
            "target": "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper/fit"
        },
        "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper/predict": {
            "target": "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper/predict"
        },
        "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper/predict_proba": {
            "target": "sklearn/sklearn.utils._mocking/NoSampleWeightWrapper/predict_proba"
        },
        "sklearn/sklearn.utils._param_validation/Interval/__contains__": {
            "target": "sklearn/sklearn.utils._param_validation/Interval/__contains__"
        },
        "sklearn/sklearn.utils._param_validation/Interval/__init__": {
            "target": "sklearn/sklearn.utils._param_validation/Interval/__init__"
        },
        "sklearn/sklearn.utils._param_validation/Interval/__str__": {
            "target": "sklearn/sklearn.utils._param_validation/Interval/__str__"
        },
        "sklearn/sklearn.utils._param_validation/Interval/_check_params": {
            "target": "sklearn/sklearn.utils._param_validation/Interval/_check_params"
        },
        "sklearn/sklearn.utils._param_validation/Interval/is_satisfied_by": {
            "target": "sklearn/sklearn.utils._param_validation/Interval/is_satisfied_by"
        },
        "sklearn/sklearn.utils._param_validation/StrOptions/__init__": {
            "target": "sklearn/sklearn.utils._param_validation/StrOptions/__init__"
        },
        "sklearn/sklearn.utils._param_validation/StrOptions/__str__": {
            "target": "sklearn/sklearn.utils._param_validation/StrOptions/__str__"
        },
        "sklearn/sklearn.utils._param_validation/StrOptions/_mark_if_deprecated": {
            "target": "sklearn/sklearn.utils._param_validation/StrOptions/_mark_if_deprecated"
        },
        "sklearn/sklearn.utils._param_validation/StrOptions/is_satisfied_by": {
            "target": "sklearn/sklearn.utils._param_validation/StrOptions/is_satisfied_by"
        },
        "sklearn/sklearn.utils._param_validation/_ArrayLikes/__str__": {
            "target": "sklearn/sklearn.utils._param_validation/_ArrayLikes/__str__"
        },
        "sklearn/sklearn.utils._param_validation/_ArrayLikes/is_satisfied_by": {
            "target": "sklearn/sklearn.utils._param_validation/_ArrayLikes/is_satisfied_by"
        },
        "sklearn/sklearn.utils._param_validation/_Callables/__str__": {
            "target": "sklearn/sklearn.utils._param_validation/_Callables/__str__"
        },
        "sklearn/sklearn.utils._param_validation/_Callables/is_satisfied_by": {
            "target": "sklearn/sklearn.utils._param_validation/_Callables/is_satisfied_by"
        },
        "sklearn/sklearn.utils._param_validation/_Constraint/__str__": {
            "target": "sklearn/sklearn.utils._param_validation/_Constraint/__str__"
        },
        "sklearn/sklearn.utils._param_validation/_Constraint/is_satisfied_by": {
            "target": "sklearn/sklearn.utils._param_validation/_Constraint/is_satisfied_by"
        },
        "sklearn/sklearn.utils._param_validation/_InstancesOf/__init__": {
            "target": "sklearn/sklearn.utils._param_validation/_InstancesOf/__init__"
        },
        "sklearn/sklearn.utils._param_validation/_InstancesOf/__str__": {
            "target": "sklearn/sklearn.utils._param_validation/_InstancesOf/__str__"
        },
        "sklearn/sklearn.utils._param_validation/_InstancesOf/_type_name": {
            "target": "sklearn/sklearn.utils._param_validation/_InstancesOf/_type_name"
        },
        "sklearn/sklearn.utils._param_validation/_InstancesOf/is_satisfied_by": {
            "target": "sklearn/sklearn.utils._param_validation/_InstancesOf/is_satisfied_by"
        },
        "sklearn/sklearn.utils._param_validation/_NoneConstraint/__str__": {
            "target": "sklearn/sklearn.utils._param_validation/_NoneConstraint/__str__"
        },
        "sklearn/sklearn.utils._param_validation/_NoneConstraint/is_satisfied_by": {
            "target": "sklearn/sklearn.utils._param_validation/_NoneConstraint/is_satisfied_by"
        },
        "sklearn/sklearn.utils._param_validation/_RandomStates/__init__": {
            "target": "sklearn/sklearn.utils._param_validation/_RandomStates/__init__"
        },
        "sklearn/sklearn.utils._param_validation/_RandomStates/__str__": {
            "target": "sklearn/sklearn.utils._param_validation/_RandomStates/__str__"
        },
        "sklearn/sklearn.utils._param_validation/_RandomStates/is_satisfied_by": {
            "target": "sklearn/sklearn.utils._param_validation/_RandomStates/is_satisfied_by"
        },
        "sklearn/sklearn.utils._param_validation/_SparseMatrices/__str__": {
            "target": "sklearn/sklearn.utils._param_validation/_SparseMatrices/__str__"
        },
        "sklearn/sklearn.utils._param_validation/_SparseMatrices/is_satisfied_by": {
            "target": "sklearn/sklearn.utils._param_validation/_SparseMatrices/is_satisfied_by"
        },
        "sklearn/sklearn.utils._param_validation/generate_invalid_param_val": {
            "target": "sklearn/sklearn.utils._param_validation/generate_invalid_param_val"
        },
        "sklearn/sklearn.utils._param_validation/make_constraint": {
            "target": "sklearn/sklearn.utils._param_validation/make_constraint"
        },
        "sklearn/sklearn.utils._param_validation/validate_parameter_constraints": {
            "target": "sklearn/sklearn.utils._param_validation/validate_parameter_constraints"
        },
        "sklearn/sklearn.utils._param_validation/validate_params": {
            "target": "sklearn/sklearn.utils._param_validation/validate_params"
        },
        "sklearn/sklearn.utils._pprint/KeyValTuple/__repr__": {
            "target": "sklearn/sklearn.utils._pprint/KeyValTuple/__repr__"
        },
        "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/__init__": {
            "target": "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/__init__"
        },
        "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_format_dict_items": {
            "target": "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_format_dict_items"
        },
        "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_format_items": {
            "target": "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_format_items"
        },
        "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_format_params": {
            "target": "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_format_params"
        },
        "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_format_params_or_dict_items": {
            "target": "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_format_params_or_dict_items"
        },
        "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_pprint_estimator": {
            "target": "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_pprint_estimator"
        },
        "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_pprint_key_val_tuple": {
            "target": "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/_pprint_key_val_tuple"
        },
        "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/format": {
            "target": "sklearn/sklearn.utils._pprint/_EstimatorPrettyPrinter/format"
        },
        "sklearn/sklearn.utils._pprint/_changed_params": {
            "target": "sklearn/sklearn.utils._pprint/_changed_params"
        },
        "sklearn/sklearn.utils._pprint/_safe_repr": {
            "target": "sklearn/sklearn.utils._pprint/_safe_repr"
        },
        "sklearn/sklearn.utils._show_versions/_get_deps_info": {
            "target": "sklearn/sklearn.utils._show_versions/_get_deps_info"
        },
        "sklearn/sklearn.utils._show_versions/_get_sys_info": {
            "target": "sklearn/sklearn.utils._show_versions/_get_sys_info"
        },
        "sklearn/sklearn.utils._show_versions/show_versions": {
            "target": "sklearn/sklearn.utils._show_versions/show_versions"
        },
        "sklearn/sklearn.utils._tags/_safe_tags": {
            "target": "sklearn/sklearn.utils._tags/_safe_tags"
        },
        "sklearn/sklearn.utils._testing/MinimalClassifier/__init__": {
            "target": "sklearn/sklearn.utils._testing/MinimalClassifier/__init__"
        },
        "sklearn/sklearn.utils._testing/MinimalClassifier/fit": {
            "target": "sklearn/sklearn.utils._testing/MinimalClassifier/fit"
        },
        "sklearn/sklearn.utils._testing/MinimalClassifier/get_params": {
            "target": "sklearn/sklearn.utils._testing/MinimalClassifier/get_params"
        },
        "sklearn/sklearn.utils._testing/MinimalClassifier/predict": {
            "target": "sklearn/sklearn.utils._testing/MinimalClassifier/predict"
        },
        "sklearn/sklearn.utils._testing/MinimalClassifier/predict_proba": {
            "target": "sklearn/sklearn.utils._testing/MinimalClassifier/predict_proba"
        },
        "sklearn/sklearn.utils._testing/MinimalClassifier/score": {
            "target": "sklearn/sklearn.utils._testing/MinimalClassifier/score"
        },
        "sklearn/sklearn.utils._testing/MinimalClassifier/set_params": {
            "target": "sklearn/sklearn.utils._testing/MinimalClassifier/set_params"
        },
        "sklearn/sklearn.utils._testing/MinimalRegressor/__init__": {
            "target": "sklearn/sklearn.utils._testing/MinimalRegressor/__init__"
        },
        "sklearn/sklearn.utils._testing/MinimalRegressor/fit": {
            "target": "sklearn/sklearn.utils._testing/MinimalRegressor/fit"
        },
        "sklearn/sklearn.utils._testing/MinimalRegressor/get_params": {
            "target": "sklearn/sklearn.utils._testing/MinimalRegressor/get_params"
        },
        "sklearn/sklearn.utils._testing/MinimalRegressor/predict": {
            "target": "sklearn/sklearn.utils._testing/MinimalRegressor/predict"
        },
        "sklearn/sklearn.utils._testing/MinimalRegressor/score": {
            "target": "sklearn/sklearn.utils._testing/MinimalRegressor/score"
        },
        "sklearn/sklearn.utils._testing/MinimalRegressor/set_params": {
            "target": "sklearn/sklearn.utils._testing/MinimalRegressor/set_params"
        },
        "sklearn/sklearn.utils._testing/MinimalTransformer/__init__": {
            "target": "sklearn/sklearn.utils._testing/MinimalTransformer/__init__"
        },
        "sklearn/sklearn.utils._testing/MinimalTransformer/fit": {
            "target": "sklearn/sklearn.utils._testing/MinimalTransformer/fit"
        },
        "sklearn/sklearn.utils._testing/MinimalTransformer/fit_transform": {
            "target": "sklearn/sklearn.utils._testing/MinimalTransformer/fit_transform"
        },
        "sklearn/sklearn.utils._testing/MinimalTransformer/get_params": {
            "target": "sklearn/sklearn.utils._testing/MinimalTransformer/get_params"
        },
        "sklearn/sklearn.utils._testing/MinimalTransformer/set_params": {
            "target": "sklearn/sklearn.utils._testing/MinimalTransformer/set_params"
        },
        "sklearn/sklearn.utils._testing/MinimalTransformer/transform": {
            "target": "sklearn/sklearn.utils._testing/MinimalTransformer/transform"
        },
        "sklearn/sklearn.utils._testing/TempMemmap/__enter__": {
            "target": "sklearn/sklearn.utils._testing/TempMemmap/__enter__"
        },
        "sklearn/sklearn.utils._testing/TempMemmap/__exit__": {
            "target": "sklearn/sklearn.utils._testing/TempMemmap/__exit__"
        },
        "sklearn/sklearn.utils._testing/TempMemmap/__init__": {
            "target": "sklearn/sklearn.utils._testing/TempMemmap/__init__"
        },
        "sklearn/sklearn.utils._testing/_IgnoreWarnings/__call__": {
            "target": "sklearn/sklearn.utils._testing/_IgnoreWarnings/__call__"
        },
        "sklearn/sklearn.utils._testing/_IgnoreWarnings/__enter__": {
            "target": "sklearn/sklearn.utils._testing/_IgnoreWarnings/__enter__"
        },
        "sklearn/sklearn.utils._testing/_IgnoreWarnings/__exit__": {
            "target": "sklearn/sklearn.utils._testing/_IgnoreWarnings/__exit__"
        },
        "sklearn/sklearn.utils._testing/_IgnoreWarnings/__init__": {
            "target": "sklearn/sklearn.utils._testing/_IgnoreWarnings/__init__"
        },
        "sklearn/sklearn.utils._testing/_IgnoreWarnings/__repr__": {
            "target": "sklearn/sklearn.utils._testing/_IgnoreWarnings/__repr__"
        },
        "sklearn/sklearn.utils._testing/_Raises/__exit__": {
            "target": "sklearn/sklearn.utils._testing/_Raises/__exit__"
        },
        "sklearn/sklearn.utils._testing/_Raises/__init__": {
            "target": "sklearn/sklearn.utils._testing/_Raises/__init__"
        },
        "sklearn/sklearn.utils._testing/_convert_container": {
            "target": "sklearn/sklearn.utils._testing/_convert_container"
        },
        "sklearn/sklearn.utils._testing/_delete_folder": {
            "target": "sklearn/sklearn.utils._testing/_delete_folder"
        },
        "sklearn/sklearn.utils._testing/_get_args": {
            "target": "sklearn/sklearn.utils._testing/_get_args"
        },
        "sklearn/sklearn.utils._testing/_get_func_name": {
            "target": "sklearn/sklearn.utils._testing/_get_func_name"
        },
        "sklearn/sklearn.utils._testing/assert_allclose": {
            "target": "sklearn/sklearn.utils._testing/assert_allclose"
        },
        "sklearn/sklearn.utils._testing/assert_allclose_dense_sparse": {
            "target": "sklearn/sklearn.utils._testing/assert_allclose_dense_sparse"
        },
        "sklearn/sklearn.utils._testing/assert_no_warnings": {
            "target": "sklearn/sklearn.utils._testing/assert_no_warnings"
        },
        "sklearn/sklearn.utils._testing/assert_raise_message": {
            "target": "sklearn/sklearn.utils._testing/assert_raise_message"
        },
        "sklearn/sklearn.utils._testing/assert_run_python_script": {
            "target": "sklearn/sklearn.utils._testing/assert_run_python_script"
        },
        "sklearn/sklearn.utils._testing/assert_warns": {
            "target": "sklearn/sklearn.utils._testing/assert_warns"
        },
        "sklearn/sklearn.utils._testing/assert_warns_message": {
            "target": "sklearn/sklearn.utils._testing/assert_warns_message"
        },
        "sklearn/sklearn.utils._testing/check_docstring_parameters": {
            "target": "sklearn/sklearn.utils._testing/check_docstring_parameters"
        },
        "sklearn/sklearn.utils._testing/check_skip_network": {
            "target": "sklearn/sklearn.utils._testing/check_skip_network"
        },
        "sklearn/sklearn.utils._testing/create_memmap_backed_data": {
            "target": "sklearn/sklearn.utils._testing/create_memmap_backed_data"
        },
        "sklearn/sklearn.utils._testing/ignore_warnings": {
            "target": "sklearn/sklearn.utils._testing/ignore_warnings"
        },
        "sklearn/sklearn.utils._testing/raises": {
            "target": "sklearn/sklearn.utils._testing/raises"
        },
        "sklearn/sklearn.utils._testing/set_random_state": {
            "target": "sklearn/sklearn.utils._testing/set_random_state"
        },
        "sklearn/sklearn.utils.deprecation/_is_deprecated": {
            "target": "sklearn/sklearn.utils.deprecation/_is_deprecated"
        },
        "sklearn/sklearn.utils.deprecation/deprecated/__call__": {
            "target": "sklearn/sklearn.utils.deprecation/deprecated/__call__"
        },
        "sklearn/sklearn.utils.deprecation/deprecated/__init__": {
            "target": "sklearn/sklearn.utils.deprecation/deprecated/__init__"
        },
        "sklearn/sklearn.utils.deprecation/deprecated/_decorate_class": {
            "target": "sklearn/sklearn.utils.deprecation/deprecated/_decorate_class"
        },
        "sklearn/sklearn.utils.deprecation/deprecated/_decorate_fun": {
            "target": "sklearn/sklearn.utils.deprecation/deprecated/_decorate_fun"
        },
        "sklearn/sklearn.utils.deprecation/deprecated/_decorate_property": {
            "target": "sklearn/sklearn.utils.deprecation/deprecated/_decorate_property"
        },
        "sklearn/sklearn.utils.deprecation/deprecated/_update_doc": {
            "target": "sklearn/sklearn.utils.deprecation/deprecated/_update_doc"
        },
        "sklearn/sklearn.utils.estimator_checks/_NotAnArray/__array__": {
            "target": "sklearn/sklearn.utils.estimator_checks/_NotAnArray/__array__"
        },
        "sklearn/sklearn.utils.estimator_checks/_NotAnArray/__array_function__": {
            "target": "sklearn/sklearn.utils.estimator_checks/_NotAnArray/__array_function__"
        },
        "sklearn/sklearn.utils.estimator_checks/_NotAnArray/__init__": {
            "target": "sklearn/sklearn.utils.estimator_checks/_NotAnArray/__init__"
        },
        "sklearn/sklearn.utils.estimator_checks/_apply_on_subsets": {
            "target": "sklearn/sklearn.utils.estimator_checks/_apply_on_subsets"
        },
        "sklearn/sklearn.utils.estimator_checks/_check_transformer": {
            "target": "sklearn/sklearn.utils.estimator_checks/_check_transformer"
        },
        "sklearn/sklearn.utils.estimator_checks/_choose_check_classifiers_labels": {
            "target": "sklearn/sklearn.utils.estimator_checks/_choose_check_classifiers_labels"
        },
        "sklearn/sklearn.utils.estimator_checks/_construct_instance": {
            "target": "sklearn/sklearn.utils.estimator_checks/_construct_instance"
        },
        "sklearn/sklearn.utils.estimator_checks/_create_memmap_backed_data": {
            "target": "sklearn/sklearn.utils.estimator_checks/_create_memmap_backed_data"
        },
        "sklearn/sklearn.utils.estimator_checks/_enforce_estimator_tags_x": {
            "target": "sklearn/sklearn.utils.estimator_checks/_enforce_estimator_tags_x"
        },
        "sklearn/sklearn.utils.estimator_checks/_enforce_estimator_tags_y": {
            "target": "sklearn/sklearn.utils.estimator_checks/_enforce_estimator_tags_y"
        },
        "sklearn/sklearn.utils.estimator_checks/_generate_sparse_matrix": {
            "target": "sklearn/sklearn.utils.estimator_checks/_generate_sparse_matrix"
        },
        "sklearn/sklearn.utils.estimator_checks/_get_check_estimator_ids": {
            "target": "sklearn/sklearn.utils.estimator_checks/_get_check_estimator_ids"
        },
        "sklearn/sklearn.utils.estimator_checks/_is_pairwise_metric": {
            "target": "sklearn/sklearn.utils.estimator_checks/_is_pairwise_metric"
        },
        "sklearn/sklearn.utils.estimator_checks/_is_public_parameter": {
            "target": "sklearn/sklearn.utils.estimator_checks/_is_public_parameter"
        },
        "sklearn/sklearn.utils.estimator_checks/_maybe_mark_xfail": {
            "target": "sklearn/sklearn.utils.estimator_checks/_maybe_mark_xfail"
        },
        "sklearn/sklearn.utils.estimator_checks/_maybe_skip": {
            "target": "sklearn/sklearn.utils.estimator_checks/_maybe_skip"
        },
        "sklearn/sklearn.utils.estimator_checks/_pairwise_estimator_convert_X": {
            "target": "sklearn/sklearn.utils.estimator_checks/_pairwise_estimator_convert_X"
        },
        "sklearn/sklearn.utils.estimator_checks/_regression_dataset": {
            "target": "sklearn/sklearn.utils.estimator_checks/_regression_dataset"
        },
        "sklearn/sklearn.utils.estimator_checks/_set_checking_parameters": {
            "target": "sklearn/sklearn.utils.estimator_checks/_set_checking_parameters"
        },
        "sklearn/sklearn.utils.estimator_checks/_should_be_skipped_or_marked": {
            "target": "sklearn/sklearn.utils.estimator_checks/_should_be_skipped_or_marked"
        },
        "sklearn/sklearn.utils.estimator_checks/_yield_all_checks": {
            "target": "sklearn/sklearn.utils.estimator_checks/_yield_all_checks"
        },
        "sklearn/sklearn.utils.estimator_checks/_yield_checks": {
            "target": "sklearn/sklearn.utils.estimator_checks/_yield_checks"
        },
        "sklearn/sklearn.utils.estimator_checks/_yield_classifier_checks": {
            "target": "sklearn/sklearn.utils.estimator_checks/_yield_classifier_checks"
        },
        "sklearn/sklearn.utils.estimator_checks/_yield_clustering_checks": {
            "target": "sklearn/sklearn.utils.estimator_checks/_yield_clustering_checks"
        },
        "sklearn/sklearn.utils.estimator_checks/_yield_outliers_checks": {
            "target": "sklearn/sklearn.utils.estimator_checks/_yield_outliers_checks"
        },
        "sklearn/sklearn.utils.estimator_checks/_yield_regressor_checks": {
            "target": "sklearn/sklearn.utils.estimator_checks/_yield_regressor_checks"
        },
        "sklearn/sklearn.utils.estimator_checks/_yield_transformer_checks": {
            "target": "sklearn/sklearn.utils.estimator_checks/_yield_transformer_checks"
        },
        "sklearn/sklearn.utils.estimator_checks/check_class_weight_balanced_classifiers": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_class_weight_balanced_classifiers"
        },
        "sklearn/sklearn.utils.estimator_checks/check_class_weight_balanced_linear_classifier": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_class_weight_balanced_linear_classifier"
        },
        "sklearn/sklearn.utils.estimator_checks/check_class_weight_classifiers": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_class_weight_classifiers"
        },
        "sklearn/sklearn.utils.estimator_checks/check_classifier_data_not_an_array": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_classifier_data_not_an_array"
        },
        "sklearn/sklearn.utils.estimator_checks/check_classifier_multioutput": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_classifier_multioutput"
        },
        "sklearn/sklearn.utils.estimator_checks/check_classifiers_classes": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_classifiers_classes"
        },
        "sklearn/sklearn.utils.estimator_checks/check_classifiers_multilabel_output_format_decision_function": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_classifiers_multilabel_output_format_decision_function"
        },
        "sklearn/sklearn.utils.estimator_checks/check_classifiers_multilabel_output_format_predict": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_classifiers_multilabel_output_format_predict"
        },
        "sklearn/sklearn.utils.estimator_checks/check_classifiers_multilabel_output_format_predict_proba": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_classifiers_multilabel_output_format_predict_proba"
        },
        "sklearn/sklearn.utils.estimator_checks/check_classifiers_multilabel_representation_invariance": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_classifiers_multilabel_representation_invariance"
        },
        "sklearn/sklearn.utils.estimator_checks/check_classifiers_one_label": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_classifiers_one_label"
        },
        "sklearn/sklearn.utils.estimator_checks/check_classifiers_predictions": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_classifiers_predictions"
        },
        "sklearn/sklearn.utils.estimator_checks/check_classifiers_regression_target": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_classifiers_regression_target"
        },
        "sklearn/sklearn.utils.estimator_checks/check_classifiers_train": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_classifiers_train"
        },
        "sklearn/sklearn.utils.estimator_checks/check_clusterer_compute_labels_predict": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_clusterer_compute_labels_predict"
        },
        "sklearn/sklearn.utils.estimator_checks/check_clustering": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_clustering"
        },
        "sklearn/sklearn.utils.estimator_checks/check_complex_data": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_complex_data"
        },
        "sklearn/sklearn.utils.estimator_checks/check_dataframe_column_names_consistency": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_dataframe_column_names_consistency"
        },
        "sklearn/sklearn.utils.estimator_checks/check_decision_proba_consistency": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_decision_proba_consistency"
        },
        "sklearn/sklearn.utils.estimator_checks/check_dict_unchanged": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_dict_unchanged"
        },
        "sklearn/sklearn.utils.estimator_checks/check_dont_overwrite_parameters": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_dont_overwrite_parameters"
        },
        "sklearn/sklearn.utils.estimator_checks/check_dtype_object": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_dtype_object"
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimator_get_tags_default_keys": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimator_get_tags_default_keys"
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimator_sparse_data": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimator_sparse_data"
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimators_data_not_an_array": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimators_data_not_an_array"
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimators_dtypes": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimators_dtypes"
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimators_empty_data_messages": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimators_empty_data_messages"
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimators_fit_returns_self": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimators_fit_returns_self"
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimators_nan_inf": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimators_nan_inf"
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimators_overwrite_params": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimators_overwrite_params"
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimators_partial_fit_n_features": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimators_partial_fit_n_features"
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimators_pickle": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimators_pickle"
        },
        "sklearn/sklearn.utils.estimator_checks/check_estimators_unfitted": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_estimators_unfitted"
        },
        "sklearn/sklearn.utils.estimator_checks/check_fit1d": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_fit1d"
        },
        "sklearn/sklearn.utils.estimator_checks/check_fit2d_1feature": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_fit2d_1feature"
        },
        "sklearn/sklearn.utils.estimator_checks/check_fit2d_1sample": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_fit2d_1sample"
        },
        "sklearn/sklearn.utils.estimator_checks/check_fit2d_predict1d": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_fit2d_predict1d"
        },
        "sklearn/sklearn.utils.estimator_checks/check_fit_check_is_fitted": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_fit_check_is_fitted"
        },
        "sklearn/sklearn.utils.estimator_checks/check_fit_idempotent": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_fit_idempotent"
        },
        "sklearn/sklearn.utils.estimator_checks/check_fit_non_negative": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_fit_non_negative"
        },
        "sklearn/sklearn.utils.estimator_checks/check_fit_score_takes_y": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_fit_score_takes_y"
        },
        "sklearn/sklearn.utils.estimator_checks/check_get_params_invariance": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_get_params_invariance"
        },
        "sklearn/sklearn.utils.estimator_checks/check_methods_sample_order_invariance": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_methods_sample_order_invariance"
        },
        "sklearn/sklearn.utils.estimator_checks/check_methods_subset_invariance": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_methods_subset_invariance"
        },
        "sklearn/sklearn.utils.estimator_checks/check_n_features_in": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_n_features_in"
        },
        "sklearn/sklearn.utils.estimator_checks/check_n_features_in_after_fitting": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_n_features_in_after_fitting"
        },
        "sklearn/sklearn.utils.estimator_checks/check_no_attributes_set_in_init": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_no_attributes_set_in_init"
        },
        "sklearn/sklearn.utils.estimator_checks/check_non_transformer_estimators_n_iter": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_non_transformer_estimators_n_iter"
        },
        "sklearn/sklearn.utils.estimator_checks/check_nonsquare_error": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_nonsquare_error"
        },
        "sklearn/sklearn.utils.estimator_checks/check_outlier_corruption": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_outlier_corruption"
        },
        "sklearn/sklearn.utils.estimator_checks/check_outliers_fit_predict": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_outliers_fit_predict"
        },
        "sklearn/sklearn.utils.estimator_checks/check_outliers_train": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_outliers_train"
        },
        "sklearn/sklearn.utils.estimator_checks/check_param_validation": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_param_validation"
        },
        "sklearn/sklearn.utils.estimator_checks/check_parameters_default_constructible": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_parameters_default_constructible"
        },
        "sklearn/sklearn.utils.estimator_checks/check_pipeline_consistency": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_pipeline_consistency"
        },
        "sklearn/sklearn.utils.estimator_checks/check_regressor_data_not_an_array": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_regressor_data_not_an_array"
        },
        "sklearn/sklearn.utils.estimator_checks/check_regressor_multioutput": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_regressor_multioutput"
        },
        "sklearn/sklearn.utils.estimator_checks/check_regressors_int": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_regressors_int"
        },
        "sklearn/sklearn.utils.estimator_checks/check_regressors_no_decision_function": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_regressors_no_decision_function"
        },
        "sklearn/sklearn.utils.estimator_checks/check_regressors_train": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_regressors_train"
        },
        "sklearn/sklearn.utils.estimator_checks/check_requires_y_none": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_requires_y_none"
        },
        "sklearn/sklearn.utils.estimator_checks/check_sample_weights_invariance": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_sample_weights_invariance"
        },
        "sklearn/sklearn.utils.estimator_checks/check_sample_weights_list": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_sample_weights_list"
        },
        "sklearn/sklearn.utils.estimator_checks/check_sample_weights_not_an_array": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_sample_weights_not_an_array"
        },
        "sklearn/sklearn.utils.estimator_checks/check_sample_weights_not_overwritten": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_sample_weights_not_overwritten"
        },
        "sklearn/sklearn.utils.estimator_checks/check_sample_weights_pandas_series": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_sample_weights_pandas_series"
        },
        "sklearn/sklearn.utils.estimator_checks/check_sample_weights_shape": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_sample_weights_shape"
        },
        "sklearn/sklearn.utils.estimator_checks/check_set_params": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_set_params"
        },
        "sklearn/sklearn.utils.estimator_checks/check_sparsify_coefficients": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_sparsify_coefficients"
        },
        "sklearn/sklearn.utils.estimator_checks/check_supervised_y_2d": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_supervised_y_2d"
        },
        "sklearn/sklearn.utils.estimator_checks/check_supervised_y_no_nan": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_supervised_y_no_nan"
        },
        "sklearn/sklearn.utils.estimator_checks/check_transformer_data_not_an_array": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_transformer_data_not_an_array"
        },
        "sklearn/sklearn.utils.estimator_checks/check_transformer_general": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_transformer_general"
        },
        "sklearn/sklearn.utils.estimator_checks/check_transformer_get_feature_names_out": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_transformer_get_feature_names_out"
        },
        "sklearn/sklearn.utils.estimator_checks/check_transformer_get_feature_names_out_pandas": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_transformer_get_feature_names_out_pandas"
        },
        "sklearn/sklearn.utils.estimator_checks/check_transformer_n_iter": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_transformer_n_iter"
        },
        "sklearn/sklearn.utils.estimator_checks/check_transformer_preserve_dtypes": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_transformer_preserve_dtypes"
        },
        "sklearn/sklearn.utils.estimator_checks/check_transformers_unfitted": {
            "target": "sklearn/sklearn.utils.estimator_checks/check_transformers_unfitted"
        },
        "sklearn/sklearn.utils.estimator_checks/parametrize_with_checks": {
            "target": "sklearn/sklearn.utils.estimator_checks/parametrize_with_checks"
        },
        "sklearn/sklearn.utils.extmath/_deterministic_vector_sign_flip": {
            "target": "sklearn/sklearn.utils.extmath/_deterministic_vector_sign_flip"
        },
        "sklearn/sklearn.utils.extmath/_incremental_mean_and_var": {
            "target": "sklearn/sklearn.utils.extmath/_incremental_mean_and_var"
        },
        "sklearn/sklearn.utils.extmath/_randomized_eigsh": {
            "target": "sklearn/sklearn.utils.extmath/_randomized_eigsh"
        },
        "sklearn/sklearn.utils.extmath/_safe_accumulator_op": {
            "target": "sklearn/sklearn.utils.extmath/_safe_accumulator_op"
        },
        "sklearn/sklearn.utils.extmath/fast_logdet": {
            "target": "sklearn/sklearn.utils.extmath/fast_logdet"
        },
        "sklearn/sklearn.utils.extmath/log_logistic": {
            "target": "sklearn/sklearn.utils.extmath/log_logistic"
        },
        "sklearn/sklearn.utils.extmath/make_nonnegative": {
            "target": "sklearn/sklearn.utils.extmath/make_nonnegative"
        },
        "sklearn/sklearn.utils.extmath/randomized_range_finder": {
            "target": "sklearn/sklearn.utils.extmath/randomized_range_finder"
        },
        "sklearn/sklearn.utils.extmath/randomized_svd": {
            "target": "sklearn/sklearn.utils.extmath/randomized_svd"
        },
        "sklearn/sklearn.utils.extmath/row_norms": {
            "target": "sklearn/sklearn.utils.extmath/row_norms"
        },
        "sklearn/sklearn.utils.extmath/softmax": {
            "target": "sklearn/sklearn.utils.extmath/softmax"
        },
        "sklearn/sklearn.utils.extmath/squared_norm": {
            "target": "sklearn/sklearn.utils.extmath/squared_norm"
        },
        "sklearn/sklearn.utils.extmath/stable_cumsum": {
            "target": "sklearn/sklearn.utils.extmath/stable_cumsum"
        },
        "sklearn/sklearn.utils.extmath/svd_flip": {
            "target": "sklearn/sklearn.utils.extmath/svd_flip"
        },
        "sklearn/sklearn.utils.fixes/_FuncWrapper/__call__": {
            "target": "sklearn/sklearn.utils.fixes/_FuncWrapper/__call__"
        },
        "sklearn/sklearn.utils.fixes/_FuncWrapper/__init__": {
            "target": "sklearn/sklearn.utils.fixes/_FuncWrapper/__init__"
        },
        "sklearn/sklearn.utils.fixes/_get_threadpool_controller": {
            "target": "sklearn/sklearn.utils.fixes/_get_threadpool_controller"
        },
        "sklearn/sklearn.utils.fixes/_object_dtype_isnan": {
            "target": "sklearn/sklearn.utils.fixes/_object_dtype_isnan"
        },
        "sklearn/sklearn.utils.fixes/_percentile": {
            "target": "sklearn/sklearn.utils.fixes/_percentile"
        },
        "sklearn/sklearn.utils.fixes/delayed": {
            "target": "sklearn/sklearn.utils.fixes/delayed"
        },
        "sklearn/sklearn.utils.fixes/threadpool_info": {
            "target": "sklearn/sklearn.utils.fixes/threadpool_info"
        },
        "sklearn/sklearn.utils.fixes/threadpool_limits": {
            "target": "sklearn/sklearn.utils.fixes/threadpool_limits"
        },
        "sklearn/sklearn.utils.graph/_fix_connected_components": {
            "target": "sklearn/sklearn.utils.graph/_fix_connected_components"
        },
        "sklearn/sklearn.utils.graph/graph_shortest_path": {
            "target": "sklearn/sklearn.utils.graph/graph_shortest_path"
        },
        "sklearn/sklearn.utils.graph/single_source_shortest_path_length": {
            "target": "sklearn/sklearn.utils.graph/single_source_shortest_path_length"
        },
        "sklearn/sklearn.utils.metaestimators/_AvailableIfDescriptor/__get__": {
            "target": "sklearn/sklearn.utils.metaestimators/_AvailableIfDescriptor/__get__"
        },
        "sklearn/sklearn.utils.metaestimators/_AvailableIfDescriptor/__init__": {
            "target": "sklearn/sklearn.utils.metaestimators/_AvailableIfDescriptor/__init__"
        },
        "sklearn/sklearn.utils.metaestimators/_BaseComposition/__init__": {
            "target": "sklearn/sklearn.utils.metaestimators/_BaseComposition/__init__"
        },
        "sklearn/sklearn.utils.metaestimators/_BaseComposition/_get_params": {
            "target": "sklearn/sklearn.utils.metaestimators/_BaseComposition/_get_params"
        },
        "sklearn/sklearn.utils.metaestimators/_BaseComposition/_replace_estimator": {
            "target": "sklearn/sklearn.utils.metaestimators/_BaseComposition/_replace_estimator"
        },
        "sklearn/sklearn.utils.metaestimators/_BaseComposition/_set_params": {
            "target": "sklearn/sklearn.utils.metaestimators/_BaseComposition/_set_params"
        },
        "sklearn/sklearn.utils.metaestimators/_BaseComposition/_validate_names": {
            "target": "sklearn/sklearn.utils.metaestimators/_BaseComposition/_validate_names"
        },
        "sklearn/sklearn.utils.metaestimators/_IffHasAttrDescriptor/__init__": {
            "target": "sklearn/sklearn.utils.metaestimators/_IffHasAttrDescriptor/__init__"
        },
        "sklearn/sklearn.utils.metaestimators/_IffHasAttrDescriptor/_check": {
            "target": "sklearn/sklearn.utils.metaestimators/_IffHasAttrDescriptor/_check"
        },
        "sklearn/sklearn.utils.metaestimators/_safe_split": {
            "target": "sklearn/sklearn.utils.metaestimators/_safe_split"
        },
        "sklearn/sklearn.utils.metaestimators/available_if": {
            "target": "sklearn/sklearn.utils.metaestimators/available_if"
        },
        "sklearn/sklearn.utils.multiclass/_check_partial_fit_first_call": {
            "target": "sklearn/sklearn.utils.multiclass/_check_partial_fit_first_call"
        },
        "sklearn/sklearn.utils.multiclass/_is_integral_float": {
            "target": "sklearn/sklearn.utils.multiclass/_is_integral_float"
        },
        "sklearn/sklearn.utils.multiclass/_ovr_decision_function": {
            "target": "sklearn/sklearn.utils.multiclass/_ovr_decision_function"
        },
        "sklearn/sklearn.utils.multiclass/_unique_indicator": {
            "target": "sklearn/sklearn.utils.multiclass/_unique_indicator"
        },
        "sklearn/sklearn.utils.multiclass/_unique_multiclass": {
            "target": "sklearn/sklearn.utils.multiclass/_unique_multiclass"
        },
        "sklearn/sklearn.utils.multiclass/check_classification_targets": {
            "target": "sklearn/sklearn.utils.multiclass/check_classification_targets"
        },
        "sklearn/sklearn.utils.multiclass/class_distribution": {
            "target": "sklearn/sklearn.utils.multiclass/class_distribution"
        },
        "sklearn/sklearn.utils.multiclass/is_multilabel": {
            "target": "sklearn/sklearn.utils.multiclass/is_multilabel"
        },
        "sklearn/sklearn.utils.optimize/_cg": {
            "target": "sklearn/sklearn.utils.optimize/_cg"
        },
        "sklearn/sklearn.utils.optimize/_check_optimize_result": {
            "target": "sklearn/sklearn.utils.optimize/_check_optimize_result"
        },
        "sklearn/sklearn.utils.optimize/_line_search_wolfe12": {
            "target": "sklearn/sklearn.utils.optimize/_line_search_wolfe12"
        },
        "sklearn/sklearn.utils.optimize/_newton_cg": {
            "target": "sklearn/sklearn.utils.optimize/_newton_cg"
        },
        "sklearn/sklearn.utils.random/_random_choice_csc": {
            "target": "sklearn/sklearn.utils.random/_random_choice_csc"
        },
        "sklearn/sklearn.utils.setup/configuration": {
            "target": "sklearn/sklearn.utils.setup/configuration"
        },
        "sklearn/sklearn.utils.sparsefuncs/_get_elem_at_rank": {
            "target": "sklearn/sklearn.utils.sparsefuncs/_get_elem_at_rank"
        },
        "sklearn/sklearn.utils.sparsefuncs/_get_median": {
            "target": "sklearn/sklearn.utils.sparsefuncs/_get_median"
        },
        "sklearn/sklearn.utils.sparsefuncs/_min_or_max_axis": {
            "target": "sklearn/sklearn.utils.sparsefuncs/_min_or_max_axis"
        },
        "sklearn/sklearn.utils.sparsefuncs/_minor_reduce": {
            "target": "sklearn/sklearn.utils.sparsefuncs/_minor_reduce"
        },
        "sklearn/sklearn.utils.sparsefuncs/_raise_error_wrong_axis": {
            "target": "sklearn/sklearn.utils.sparsefuncs/_raise_error_wrong_axis"
        },
        "sklearn/sklearn.utils.sparsefuncs/_raise_typeerror": {
            "target": "sklearn/sklearn.utils.sparsefuncs/_raise_typeerror"
        },
        "sklearn/sklearn.utils.sparsefuncs/_sparse_min_max": {
            "target": "sklearn/sklearn.utils.sparsefuncs/_sparse_min_max"
        },
        "sklearn/sklearn.utils.sparsefuncs/_sparse_min_or_max": {
            "target": "sklearn/sklearn.utils.sparsefuncs/_sparse_min_or_max"
        },
        "sklearn/sklearn.utils.sparsefuncs/_sparse_nan_min_max": {
            "target": "sklearn/sklearn.utils.sparsefuncs/_sparse_nan_min_max"
        },
        "sklearn/sklearn.utils.sparsefuncs/count_nonzero": {
            "target": "sklearn/sklearn.utils.sparsefuncs/count_nonzero"
        },
        "sklearn/sklearn.utils.sparsefuncs/csc_median_axis_0": {
            "target": "sklearn/sklearn.utils.sparsefuncs/csc_median_axis_0"
        },
        "sklearn/sklearn.utils.sparsefuncs/incr_mean_variance_axis": {
            "target": "sklearn/sklearn.utils.sparsefuncs/incr_mean_variance_axis"
        },
        "sklearn/sklearn.utils.sparsefuncs/inplace_column_scale": {
            "target": "sklearn/sklearn.utils.sparsefuncs/inplace_column_scale"
        },
        "sklearn/sklearn.utils.sparsefuncs/inplace_csr_column_scale": {
            "target": "sklearn/sklearn.utils.sparsefuncs/inplace_csr_column_scale"
        },
        "sklearn/sklearn.utils.sparsefuncs/inplace_csr_row_scale": {
            "target": "sklearn/sklearn.utils.sparsefuncs/inplace_csr_row_scale"
        },
        "sklearn/sklearn.utils.sparsefuncs/inplace_row_scale": {
            "target": "sklearn/sklearn.utils.sparsefuncs/inplace_row_scale"
        },
        "sklearn/sklearn.utils.sparsefuncs/inplace_swap_column": {
            "target": "sklearn/sklearn.utils.sparsefuncs/inplace_swap_column"
        },
        "sklearn/sklearn.utils.sparsefuncs/inplace_swap_row": {
            "target": "sklearn/sklearn.utils.sparsefuncs/inplace_swap_row"
        },
        "sklearn/sklearn.utils.sparsefuncs/inplace_swap_row_csc": {
            "target": "sklearn/sklearn.utils.sparsefuncs/inplace_swap_row_csc"
        },
        "sklearn/sklearn.utils.sparsefuncs/inplace_swap_row_csr": {
            "target": "sklearn/sklearn.utils.sparsefuncs/inplace_swap_row_csr"
        },
        "sklearn/sklearn.utils.sparsefuncs/mean_variance_axis": {
            "target": "sklearn/sklearn.utils.sparsefuncs/mean_variance_axis"
        },
        "sklearn/sklearn.utils.sparsefuncs/min_max_axis": {
            "target": "sklearn/sklearn.utils.sparsefuncs/min_max_axis"
        },
        "sklearn/sklearn.utils.stats/_weighted_percentile": {
            "target": "sklearn/sklearn.utils.stats/_weighted_percentile"
        },
        "sklearn/sklearn.utils.validation/_allclose_dense_sparse": {
            "target": "sklearn/sklearn.utils.validation/_allclose_dense_sparse"
        },
        "sklearn/sklearn.utils.validation/_assert_all_finite": {
            "target": "sklearn/sklearn.utils.validation/_assert_all_finite"
        },
        "sklearn/sklearn.utils.validation/_check_estimator_name": {
            "target": "sklearn/sklearn.utils.validation/_check_estimator_name"
        },
        "sklearn/sklearn.utils.validation/_check_feature_names_in": {
            "target": "sklearn/sklearn.utils.validation/_check_feature_names_in"
        },
        "sklearn/sklearn.utils.validation/_check_fit_params": {
            "target": "sklearn/sklearn.utils.validation/_check_fit_params"
        },
        "sklearn/sklearn.utils.validation/_check_large_sparse": {
            "target": "sklearn/sklearn.utils.validation/_check_large_sparse"
        },
        "sklearn/sklearn.utils.validation/_check_psd_eigenvalues": {
            "target": "sklearn/sklearn.utils.validation/_check_psd_eigenvalues"
        },
        "sklearn/sklearn.utils.validation/_check_sample_weight": {
            "target": "sklearn/sklearn.utils.validation/_check_sample_weight"
        },
        "sklearn/sklearn.utils.validation/_check_y": {
            "target": "sklearn/sklearn.utils.validation/_check_y"
        },
        "sklearn/sklearn.utils.validation/_deprecate_positional_args": {
            "target": "sklearn/sklearn.utils.validation/_deprecate_positional_args"
        },
        "sklearn/sklearn.utils.validation/_ensure_no_complex_data": {
            "target": "sklearn/sklearn.utils.validation/_ensure_no_complex_data"
        },
        "sklearn/sklearn.utils.validation/_ensure_sparse_format": {
            "target": "sklearn/sklearn.utils.validation/_ensure_sparse_format"
        },
        "sklearn/sklearn.utils.validation/_generate_get_feature_names_out": {
            "target": "sklearn/sklearn.utils.validation/_generate_get_feature_names_out"
        },
        "sklearn/sklearn.utils.validation/_get_feature_names": {
            "target": "sklearn/sklearn.utils.validation/_get_feature_names"
        },
        "sklearn/sklearn.utils.validation/_is_arraylike": {
            "target": "sklearn/sklearn.utils.validation/_is_arraylike"
        },
        "sklearn/sklearn.utils.validation/_is_arraylike_not_scalar": {
            "target": "sklearn/sklearn.utils.validation/_is_arraylike_not_scalar"
        },
        "sklearn/sklearn.utils.validation/_make_indexable": {
            "target": "sklearn/sklearn.utils.validation/_make_indexable"
        },
        "sklearn/sklearn.utils.validation/_num_features": {
            "target": "sklearn/sklearn.utils.validation/_num_features"
        },
        "sklearn/sklearn.utils.validation/_num_samples": {
            "target": "sklearn/sklearn.utils.validation/_num_samples"
        },
        "sklearn/sklearn.utils.validation/_pandas_dtype_needs_early_conversion": {
            "target": "sklearn/sklearn.utils.validation/_pandas_dtype_needs_early_conversion"
        },
        "sklearn/sklearn.utils.validation/as_float_array": {
            "target": "sklearn/sklearn.utils.validation/as_float_array"
        },
        "sklearn/sklearn.utils.validation/assert_all_finite": {
            "target": "sklearn/sklearn.utils.validation/assert_all_finite"
        },
        "sklearn/sklearn.utils.validation/check_memory": {
            "target": "sklearn/sklearn.utils.validation/check_memory"
        },
        "sklearn/sklearn.utils.validation/check_non_negative": {
            "target": "sklearn/sklearn.utils.validation/check_non_negative"
        },
        "sklearn/sklearn.utils.validation/check_scalar": {
            "target": "sklearn/sklearn.utils.validation/check_scalar"
        },
        "sklearn/sklearn.utils.validation/check_symmetric": {
            "target": "sklearn/sklearn.utils.validation/check_symmetric"
        },
        "sklearn/sklearn.utils.validation/has_fit_parameter": {
            "target": "sklearn/sklearn.utils.validation/has_fit_parameter"
        },
        "sklearn/sklearn.utils/_approximate_mode": {
            "target": "sklearn/sklearn.utils/_approximate_mode"
        },
        "sklearn/sklearn.utils/_array_indexing": {
            "target": "sklearn/sklearn.utils/_array_indexing"
        },
        "sklearn/sklearn.utils/_chunk_generator": {
            "target": "sklearn/sklearn.utils/_chunk_generator"
        },
        "sklearn/sklearn.utils/_determine_key_type": {
            "target": "sklearn/sklearn.utils/_determine_key_type"
        },
        "sklearn/sklearn.utils/_get_column_indices": {
            "target": "sklearn/sklearn.utils/_get_column_indices"
        },
        "sklearn/sklearn.utils/_in_unstable_openblas_configuration": {
            "target": "sklearn/sklearn.utils/_in_unstable_openblas_configuration"
        },
        "sklearn/sklearn.utils/_is_pandas_na": {
            "target": "sklearn/sklearn.utils/_is_pandas_na"
        },
        "sklearn/sklearn.utils/_list_indexing": {
            "target": "sklearn/sklearn.utils/_list_indexing"
        },
        "sklearn/sklearn.utils/_message_with_time": {
            "target": "sklearn/sklearn.utils/_message_with_time"
        },
        "sklearn/sklearn.utils/_pandas_indexing": {
            "target": "sklearn/sklearn.utils/_pandas_indexing"
        },
        "sklearn/sklearn.utils/_print_elapsed_time": {
            "target": "sklearn/sklearn.utils/_print_elapsed_time"
        },
        "sklearn/sklearn.utils/_safe_indexing": {
            "target": "sklearn/sklearn.utils/_safe_indexing"
        },
        "sklearn/sklearn.utils/_to_object_array": {
            "target": "sklearn/sklearn.utils/_to_object_array"
        },
        "sklearn/sklearn.utils/axis0_safe_slice": {
            "target": "sklearn/sklearn.utils/axis0_safe_slice"
        },
        "sklearn/sklearn.utils/check_matplotlib_support": {
            "target": "sklearn/sklearn.utils/check_matplotlib_support"
        },
        "sklearn/sklearn.utils/check_pandas_support": {
            "target": "sklearn/sklearn.utils/check_pandas_support"
        },
        "sklearn/sklearn.utils/gen_batches": {
            "target": "sklearn/sklearn.utils/gen_batches"
        },
        "sklearn/sklearn.utils/gen_even_slices": {
            "target": "sklearn/sklearn.utils/gen_even_slices"
        },
        "sklearn/sklearn.utils/get_chunk_n_rows": {
            "target": "sklearn/sklearn.utils/get_chunk_n_rows"
        },
        "sklearn/sklearn.utils/indices_to_mask": {
            "target": "sklearn/sklearn.utils/indices_to_mask"
        },
        "sklearn/sklearn.utils/is_scalar_nan": {
            "target": "sklearn/sklearn.utils/is_scalar_nan"
        },
        "sklearn/sklearn.utils/tosequence": {
            "target": "sklearn/sklearn.utils/tosequence"
        },
        "sklearn/sklearn/setup_module": {
            "target": "sklearn/sklearn/setup_module"
        }
    },
    "requireds": {
        "sklearn/sklearn.base/RegressorMixin/score/sample_weight": {
            "target": "sklearn/sklearn.base/RegressorMixin/score/sample_weight"
        },
        "sklearn/sklearn.base/TransformerMixin/fit_transform/y": {
            "target": "sklearn/sklearn.base/TransformerMixin/fit_transform/y"
        },
        "sklearn/sklearn.calibration/CalibratedClassifierCV/__init__/base_estimator": {
            "target": "sklearn/sklearn.calibration/CalibratedClassifierCV/__init__/base_estimator"
        },
        "sklearn/sklearn.cluster._kmeans/k_means/max_iter": {
            "target": "sklearn/sklearn.cluster._kmeans/k_means/max_iter"
        },
        "sklearn/sklearn.cluster._kmeans/k_means/random_state": {
            "target": "sklearn/sklearn.cluster._kmeans/k_means/random_state"
        },
        "sklearn/sklearn.cluster._mean_shift/estimate_bandwidth/quantile": {
            "target": "sklearn/sklearn.cluster._mean_shift/estimate_bandwidth/quantile"
        },
        "sklearn/sklearn.cluster._mean_shift/estimate_bandwidth/n_samples": {
            "target": "sklearn/sklearn.cluster._mean_shift/estimate_bandwidth/n_samples"
        },
        "sklearn/sklearn.compose._column_transformer/make_column_transformer/remainder": {
            "target": "sklearn/sklearn.compose._column_transformer/make_column_transformer/remainder"
        },
        "sklearn/sklearn.datasets._base/load_breast_cancer/return_X_y": {
            "target": "sklearn/sklearn.datasets._base/load_breast_cancer/return_X_y"
        },
        "sklearn/sklearn.datasets._base/load_digits/return_X_y": {
            "target": "sklearn/sklearn.datasets._base/load_digits/return_X_y"
        },
        "sklearn/sklearn.datasets._base/load_files/encoding": {
            "target": "sklearn/sklearn.datasets._base/load_files/encoding"
        },
        "sklearn/sklearn.datasets._openml/fetch_openml/version": {
            "target": "sklearn/sklearn.datasets._openml/fetch_openml/version"
        },
        "sklearn/sklearn.datasets._openml/fetch_openml/as_frame": {
            "target": "sklearn/sklearn.datasets._openml/fetch_openml/as_frame"
        },
        "sklearn/sklearn.datasets._samples_generator/make_blobs/n_samples": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_blobs/n_samples"
        },
        "sklearn/sklearn.datasets._samples_generator/make_blobs/centers": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_blobs/centers"
        },
        "sklearn/sklearn.datasets._samples_generator/make_blobs/cluster_std": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_blobs/cluster_std"
        },
        "sklearn/sklearn.datasets._samples_generator/make_blobs/random_state": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_blobs/random_state"
        },
        "sklearn/sklearn.datasets._samples_generator/make_circles/n_samples": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_circles/n_samples"
        },
        "sklearn/sklearn.datasets._samples_generator/make_circles/noise": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_circles/noise"
        },
        "sklearn/sklearn.datasets._samples_generator/make_circles/random_state": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_circles/random_state"
        },
        "sklearn/sklearn.datasets._samples_generator/make_circles/factor": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_circles/factor"
        },
        "sklearn/sklearn.datasets._samples_generator/make_classification/n_features": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_classification/n_features"
        },
        "sklearn/sklearn.datasets._samples_generator/make_classification/n_clusters_per_class": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_classification/n_clusters_per_class"
        },
        "sklearn/sklearn.datasets._samples_generator/make_classification/weights": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_classification/weights"
        },
        "sklearn/sklearn.datasets._samples_generator/make_moons/n_samples": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_moons/n_samples"
        },
        "sklearn/sklearn.datasets._samples_generator/make_moons/noise": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_moons/noise"
        },
        "sklearn/sklearn.datasets._samples_generator/make_regression/n_samples": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_regression/n_samples"
        },
        "sklearn/sklearn.datasets._samples_generator/make_regression/n_features": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_regression/n_features"
        },
        "sklearn/sklearn.datasets._samples_generator/make_regression/bias": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_regression/bias"
        },
        "sklearn/sklearn.datasets._samples_generator/make_regression/noise": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_regression/noise"
        },
        "sklearn/sklearn.datasets._samples_generator/make_regression/random_state": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_regression/random_state"
        },
        "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/zero_based": {
            "target": "sklearn/sklearn.datasets._svmlight_format_io/dump_svmlight_file/zero_based"
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/subset": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/subset"
        },
        "sklearn/sklearn.dummy/DummyClassifier/__init__/strategy": {
            "target": "sklearn/sklearn.dummy/DummyClassifier/__init__/strategy"
        },
        "sklearn/sklearn.dummy/DummyRegressor/__init__/strategy": {
            "target": "sklearn/sklearn.dummy/DummyRegressor/__init__/strategy"
        },
        "sklearn/sklearn.dummy/DummyRegressor/__init__/constant": {
            "target": "sklearn/sklearn.dummy/DummyRegressor/__init__/constant"
        },
        "sklearn/sklearn.feature_extraction.image/PatchExtractor/__init__/patch_size": {
            "target": "sklearn/sklearn.feature_extraction.image/PatchExtractor/__init__/patch_size"
        },
        "sklearn/sklearn.feature_extraction.image/PatchExtractor/__init__/max_patches": {
            "target": "sklearn/sklearn.feature_extraction.image/PatchExtractor/__init__/max_patches"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/preprocessor": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/preprocessor"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/tokenizer": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/tokenizer"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/ngram_range": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/ngram_range"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/vocabulary": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/vocabulary"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/dtype": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/dtype"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/fit/y": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/fit/y"
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/fit_transform/y": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/fit_transform/y"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/lowercase": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/lowercase"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/preprocessor": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/preprocessor"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/tokenizer": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/tokenizer"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/stop_words": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/stop_words"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/ngram_range": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/ngram_range"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/n_features": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/n_features"
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/dtype": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/dtype"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/preprocessor": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/preprocessor"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/tokenizer": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/tokenizer"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/stop_words": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/stop_words"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/ngram_range": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/ngram_range"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/vocabulary": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/vocabulary"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/dtype": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/dtype"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/fit/y": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/fit/y"
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/fit_transform/y": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/fit_transform/y"
        },
        "sklearn/sklearn.feature_selection._mutual_info/mutual_info_regression/discrete_features": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/mutual_info_regression/discrete_features"
        },
        "sklearn/sklearn.gaussian_process.kernels/RBF/__init__/length_scale_bounds": {
            "target": "sklearn/sklearn.gaussian_process.kernels/RBF/__init__/length_scale_bounds"
        },
        "sklearn/sklearn.gaussian_process.kernels/WhiteKernel/__init__/noise_level": {
            "target": "sklearn/sklearn.gaussian_process.kernels/WhiteKernel/__init__/noise_level"
        },
        "sklearn/sklearn.inspection._permutation_importance/permutation_importance/scoring": {
            "target": "sklearn/sklearn.inspection._permutation_importance/permutation_importance/scoring"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/target": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/target"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/grid_resolution": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/grid_resolution"
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/ax": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/plot_partial_dependence/ax"
        },
        "sklearn/sklearn.kernel_approximation/Nystroem/__init__/random_state": {
            "target": "sklearn/sklearn.kernel_approximation/Nystroem/__init__/random_state"
        },
        "sklearn/sklearn.kernel_approximation/RBFSampler/__init__/gamma": {
            "target": "sklearn/sklearn.kernel_approximation/RBFSampler/__init__/gamma"
        },
        "sklearn/sklearn.kernel_approximation/RBFSampler/__init__/random_state": {
            "target": "sklearn/sklearn.kernel_approximation/RBFSampler/__init__/random_state"
        },
        "sklearn/sklearn.kernel_ridge/KernelRidge/__init__/degree": {
            "target": "sklearn/sklearn.kernel_ridge/KernelRidge/__init__/degree"
        },
        "sklearn/sklearn.kernel_ridge/KernelRidge/__init__/coef0": {
            "target": "sklearn/sklearn.kernel_ridge/KernelRidge/__init__/coef0"
        },
        "sklearn/sklearn.metrics._classification/accuracy_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/accuracy_score/sample_weight"
        },
        "sklearn/sklearn.metrics._classification/balanced_accuracy_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/balanced_accuracy_score/sample_weight"
        },
        "sklearn/sklearn.metrics._classification/classification_report/labels": {
            "target": "sklearn/sklearn.metrics._classification/classification_report/labels"
        },
        "sklearn/sklearn.metrics._classification/classification_report/target_names": {
            "target": "sklearn/sklearn.metrics._classification/classification_report/target_names"
        },
        "sklearn/sklearn.metrics._classification/cohen_kappa_score/labels": {
            "target": "sklearn/sklearn.metrics._classification/cohen_kappa_score/labels"
        },
        "sklearn/sklearn.metrics._classification/cohen_kappa_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/cohen_kappa_score/sample_weight"
        },
        "sklearn/sklearn.metrics._classification/confusion_matrix/labels": {
            "target": "sklearn/sklearn.metrics._classification/confusion_matrix/labels"
        },
        "sklearn/sklearn.metrics._classification/confusion_matrix/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/confusion_matrix/sample_weight"
        },
        "sklearn/sklearn.metrics._classification/f1_score/labels": {
            "target": "sklearn/sklearn.metrics._classification/f1_score/labels"
        },
        "sklearn/sklearn.metrics._classification/f1_score/average": {
            "target": "sklearn/sklearn.metrics._classification/f1_score/average"
        },
        "sklearn/sklearn.metrics._classification/jaccard_score/pos_label": {
            "target": "sklearn/sklearn.metrics._classification/jaccard_score/pos_label"
        },
        "sklearn/sklearn.metrics._classification/jaccard_score/average": {
            "target": "sklearn/sklearn.metrics._classification/jaccard_score/average"
        },
        "sklearn/sklearn.metrics._classification/log_loss/sample_weight": {
            "target": "sklearn/sklearn.metrics._classification/log_loss/sample_weight"
        },
        "sklearn/sklearn.metrics._classification/log_loss/labels": {
            "target": "sklearn/sklearn.metrics._classification/log_loss/labels"
        },
        "sklearn/sklearn.metrics._classification/multilabel_confusion_matrix/labels": {
            "target": "sklearn/sklearn.metrics._classification/multilabel_confusion_matrix/labels"
        },
        "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/labels": {
            "target": "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/labels"
        },
        "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/average": {
            "target": "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/average"
        },
        "sklearn/sklearn.metrics._classification/precision_score/labels": {
            "target": "sklearn/sklearn.metrics._classification/precision_score/labels"
        },
        "sklearn/sklearn.metrics._classification/precision_score/average": {
            "target": "sklearn/sklearn.metrics._classification/precision_score/average"
        },
        "sklearn/sklearn.metrics._classification/recall_score/labels": {
            "target": "sklearn/sklearn.metrics._classification/recall_score/labels"
        },
        "sklearn/sklearn.metrics._classification/recall_score/average": {
            "target": "sklearn/sklearn.metrics._classification/recall_score/average"
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/labels": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/labels"
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/display_labels": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/display_labels"
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/ax": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/ax"
        },
        "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/ax": {
            "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/plot_precision_recall_curve/ax"
        },
        "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/ax": {
            "target": "sklearn/sklearn.metrics._plot.roc_curve/plot_roc_curve/ax"
        },
        "sklearn/sklearn.metrics._ranking/label_ranking_average_precision_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._ranking/label_ranking_average_precision_score/sample_weight"
        },
        "sklearn/sklearn.metrics._ranking/roc_auc_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._ranking/roc_auc_score/sample_weight"
        },
        "sklearn/sklearn.metrics._ranking/roc_auc_score/labels": {
            "target": "sklearn/sklearn.metrics._ranking/roc_auc_score/labels"
        },
        "sklearn/sklearn.metrics._ranking/roc_curve/sample_weight": {
            "target": "sklearn/sklearn.metrics._ranking/roc_curve/sample_weight"
        },
        "sklearn/sklearn.metrics._regression/mean_absolute_error/sample_weight": {
            "target": "sklearn/sklearn.metrics._regression/mean_absolute_error/sample_weight"
        },
        "sklearn/sklearn.metrics._regression/mean_squared_error/sample_weight": {
            "target": "sklearn/sklearn.metrics._regression/mean_squared_error/sample_weight"
        },
        "sklearn/sklearn.metrics._regression/mean_tweedie_deviance/power": {
            "target": "sklearn/sklearn.metrics._regression/mean_tweedie_deviance/power"
        },
        "sklearn/sklearn.metrics._regression/r2_score/sample_weight": {
            "target": "sklearn/sklearn.metrics._regression/r2_score/sample_weight"
        },
        "sklearn/sklearn.metrics._scorer/make_scorer/greater_is_better": {
            "target": "sklearn/sklearn.metrics._scorer/make_scorer/greater_is_better"
        },
        "sklearn/sklearn.metrics.cluster._supervised/mutual_info_score/contingency": {
            "target": "sklearn/sklearn.metrics.cluster._supervised/mutual_info_score/contingency"
        },
        "sklearn/sklearn.metrics.pairwise/cosine_similarity/Y": {
            "target": "sklearn/sklearn.metrics.pairwise/cosine_similarity/Y"
        },
        "sklearn/sklearn.metrics.pairwise/euclidean_distances/Y": {
            "target": "sklearn/sklearn.metrics.pairwise/euclidean_distances/Y"
        },
        "sklearn/sklearn.metrics.pairwise/linear_kernel/Y": {
            "target": "sklearn/sklearn.metrics.pairwise/linear_kernel/Y"
        },
        "sklearn/sklearn.metrics.pairwise/manhattan_distances/Y": {
            "target": "sklearn/sklearn.metrics.pairwise/manhattan_distances/Y"
        },
        "sklearn/sklearn.metrics.pairwise/pairwise_distances/Y": {
            "target": "sklearn/sklearn.metrics.pairwise/pairwise_distances/Y"
        },
        "sklearn/sklearn.metrics.pairwise/polynomial_kernel/Y": {
            "target": "sklearn/sklearn.metrics.pairwise/polynomial_kernel/Y"
        },
        "sklearn/sklearn.metrics.pairwise/rbf_kernel/Y": {
            "target": "sklearn/sklearn.metrics.pairwise/rbf_kernel/Y"
        },
        "sklearn/sklearn.model_selection._split/check_cv/y": {
            "target": "sklearn/sklearn.model_selection._split/check_cv/y"
        },
        "sklearn/sklearn.model_selection._split/check_cv/classifier": {
            "target": "sklearn/sklearn.model_selection._split/check_cv/classifier"
        },
        "sklearn/sklearn.model_selection._split/train_test_split/stratify": {
            "target": "sklearn/sklearn.model_selection._split/train_test_split/stratify"
        },
        "sklearn/sklearn.model_selection._validation/cross_val_predict/y": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_predict/y"
        },
        "sklearn/sklearn.model_selection._validation/cross_val_predict/groups": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_predict/groups"
        },
        "sklearn/sklearn.model_selection._validation/cross_val_predict/cv": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_predict/cv"
        },
        "sklearn/sklearn.model_selection._validation/cross_val_predict/fit_params": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_predict/fit_params"
        },
        "sklearn/sklearn.model_selection._validation/cross_val_score/y": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_score/y"
        },
        "sklearn/sklearn.model_selection._validation/cross_val_score/groups": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_score/groups"
        },
        "sklearn/sklearn.model_selection._validation/cross_val_score/cv": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_score/cv"
        },
        "sklearn/sklearn.model_selection._validation/cross_val_score/fit_params": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_score/fit_params"
        },
        "sklearn/sklearn.model_selection._validation/cross_val_score/error_score": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_score/error_score"
        },
        "sklearn/sklearn.model_selection._validation/cross_validate/y": {
            "target": "sklearn/sklearn.model_selection._validation/cross_validate/y"
        },
        "sklearn/sklearn.model_selection._validation/cross_validate/groups": {
            "target": "sklearn/sklearn.model_selection._validation/cross_validate/groups"
        },
        "sklearn/sklearn.model_selection._validation/cross_validate/fit_params": {
            "target": "sklearn/sklearn.model_selection._validation/cross_validate/fit_params"
        },
        "sklearn/sklearn.model_selection._validation/cross_validate/return_train_score": {
            "target": "sklearn/sklearn.model_selection._validation/cross_validate/return_train_score"
        },
        "sklearn/sklearn.model_selection._validation/learning_curve/train_sizes": {
            "target": "sklearn/sklearn.model_selection._validation/learning_curve/train_sizes"
        },
        "sklearn/sklearn.model_selection._validation/learning_curve/cv": {
            "target": "sklearn/sklearn.model_selection._validation/learning_curve/cv"
        },
        "sklearn/sklearn.model_selection._validation/learning_curve/n_jobs": {
            "target": "sklearn/sklearn.model_selection._validation/learning_curve/n_jobs"
        },
        "sklearn/sklearn.model_selection._validation/learning_curve/fit_params": {
            "target": "sklearn/sklearn.model_selection._validation/learning_curve/fit_params"
        },
        "sklearn/sklearn.model_selection._validation/validation_curve/cv": {
            "target": "sklearn/sklearn.model_selection._validation/validation_curve/cv"
        },
        "sklearn/sklearn.model_selection._validation/validation_curve/scoring": {
            "target": "sklearn/sklearn.model_selection._validation/validation_curve/scoring"
        },
        "sklearn/sklearn.naive_bayes/BernoulliNB/__init__/class_prior": {
            "target": "sklearn/sklearn.naive_bayes/BernoulliNB/__init__/class_prior"
        },
        "sklearn/sklearn.naive_bayes/CategoricalNB/__init__/alpha": {
            "target": "sklearn/sklearn.naive_bayes/CategoricalNB/__init__/alpha"
        },
        "sklearn/sklearn.naive_bayes/ComplementNB/__init__/alpha": {
            "target": "sklearn/sklearn.naive_bayes/ComplementNB/__init__/alpha"
        },
        "sklearn/sklearn.naive_bayes/GaussianNB/__init__/priors": {
            "target": "sklearn/sklearn.naive_bayes/GaussianNB/__init__/priors"
        },
        "sklearn/sklearn.naive_bayes/GaussianNB/fit/sample_weight": {
            "target": "sklearn/sklearn.naive_bayes/GaussianNB/fit/sample_weight"
        },
        "sklearn/sklearn.naive_bayes/GaussianNB/partial_fit/classes": {
            "target": "sklearn/sklearn.naive_bayes/GaussianNB/partial_fit/classes"
        },
        "sklearn/sklearn.naive_bayes/MultinomialNB/__init__/class_prior": {
            "target": "sklearn/sklearn.naive_bayes/MultinomialNB/__init__/class_prior"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/__init__/n_jobs": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/__init__/n_jobs"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/__init__/transformer_weights": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/__init__/transformer_weights"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/fit/y": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/fit/y"
        },
        "sklearn/sklearn.pipeline/FeatureUnion/fit_transform/y": {
            "target": "sklearn/sklearn.pipeline/FeatureUnion/fit_transform/y"
        },
        "sklearn/sklearn.pipeline/Pipeline/fit/y": {
            "target": "sklearn/sklearn.pipeline/Pipeline/fit/y"
        },
        "sklearn/sklearn.pipeline/Pipeline/fit_transform/y": {
            "target": "sklearn/sklearn.pipeline/Pipeline/fit_transform/y"
        },
        "sklearn/sklearn.pipeline/Pipeline/score/y": {
            "target": "sklearn/sklearn.pipeline/Pipeline/score/y"
        },
        "sklearn/sklearn.preprocessing._data/binarize/threshold": {
            "target": "sklearn/sklearn.preprocessing._data/binarize/threshold"
        },
        "sklearn/sklearn.preprocessing._data/minmax_scale/feature_range": {
            "target": "sklearn/sklearn.preprocessing._data/minmax_scale/feature_range"
        },
        "sklearn/sklearn.preprocessing._data/normalize/axis": {
            "target": "sklearn/sklearn.preprocessing._data/normalize/axis"
        },
        "sklearn/sklearn.preprocessing._data/quantile_transform/n_quantiles": {
            "target": "sklearn/sklearn.preprocessing._data/quantile_transform/n_quantiles"
        },
        "sklearn/sklearn.preprocessing._data/quantile_transform/random_state": {
            "target": "sklearn/sklearn.preprocessing._data/quantile_transform/random_state"
        },
        "sklearn/sklearn.random_projection/GaussianRandomProjection/__init__/n_components": {
            "target": "sklearn/sklearn.random_projection/GaussianRandomProjection/__init__/n_components"
        },
        "sklearn/sklearn.random_projection/SparseRandomProjection/__init__/n_components": {
            "target": "sklearn/sklearn.random_projection/SparseRandomProjection/__init__/n_components"
        },
        "sklearn/sklearn.tree._export/export_graphviz/feature_names": {
            "target": "sklearn/sklearn.tree._export/export_graphviz/feature_names"
        },
        "sklearn/sklearn.tree._export/export_graphviz/filled": {
            "target": "sklearn/sklearn.tree._export/export_graphviz/filled"
        },
        "sklearn/sklearn.tree._export/export_graphviz/rounded": {
            "target": "sklearn/sklearn.tree._export/export_graphviz/rounded"
        },
        "sklearn/sklearn.tree._export/export_graphviz/special_characters": {
            "target": "sklearn/sklearn.tree._export/export_graphviz/special_characters"
        },
        "sklearn/sklearn.tree._export/export_text/feature_names": {
            "target": "sklearn/sklearn.tree._export/export_text/feature_names"
        },
        "sklearn/sklearn.tree._export/plot_tree/feature_names": {
            "target": "sklearn/sklearn.tree._export/plot_tree/feature_names"
        },
        "sklearn/sklearn.tree._export/plot_tree/class_names": {
            "target": "sklearn/sklearn.tree._export/plot_tree/class_names"
        },
        "sklearn/sklearn.tree._export/plot_tree/rounded": {
            "target": "sklearn/sklearn.tree._export/plot_tree/rounded"
        },
        "sklearn/sklearn.tree._export/plot_tree/ax": {
            "target": "sklearn/sklearn.tree._export/plot_tree/ax"
        },
        "sklearn/sklearn.utils.validation/check_array/dtype": {
            "target": "sklearn/sklearn.utils.validation/check_array/dtype"
        },
        "sklearn/sklearn.utils.validation/check_array/estimator": {
            "target": "sklearn/sklearn.utils.validation/check_array/estimator"
        },
        "sklearn/sklearn.utils.validation/check_is_fitted/attributes": {
            "target": "sklearn/sklearn.utils.validation/check_is_fitted/attributes"
        },
        "sklearn/sklearn.utils.validation/column_or_1d/warn": {
            "target": "sklearn/sklearn.utils.validation/column_or_1d/warn"
        },
        "sklearn/sklearn.utils/resample/replace": {
            "target": "sklearn/sklearn.utils/resample/replace"
        }
    },
    "optionals": {
        "sklearn/sklearn._config/set_config/display": {
            "target": "sklearn/sklearn._config/set_config/display",
            "defaultType": "string",
            "defaultValue": "diagram"
        },
        "sklearn/sklearn.calibration/calibration_curve/n_bins": {
            "target": "sklearn/sklearn.calibration/calibration_curve/n_bins",
            "defaultType": "number",
            "defaultValue": 10.0
        },
        "sklearn/sklearn.datasets._samples_generator/make_classification/n_redundant": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_classification/n_redundant",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.feature_selection._mutual_info/mutual_info_classif/random_state": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/mutual_info_classif/random_state",
            "defaultType": "number",
            "defaultValue": 0.0
        },
        "sklearn/sklearn.kernel_ridge/KernelRidge/__init__/alpha": {
            "target": "sklearn/sklearn.kernel_ridge/KernelRidge/__init__/alpha",
            "defaultType": "number",
            "defaultValue": 0.6
        },
        "sklearn/sklearn.kernel_ridge/KernelRidge/__init__/kernel": {
            "target": "sklearn/sklearn.kernel_ridge/KernelRidge/__init__/kernel",
            "defaultType": "string",
            "defaultValue": "polynomial"
        },
        "sklearn/sklearn.metrics._classification/cohen_kappa_score/weights": {
            "target": "sklearn/sklearn.metrics._classification/cohen_kappa_score/weights",
            "defaultType": "string",
            "defaultValue": "quadratic"
        },
        "sklearn/sklearn.metrics._classification/fbeta_score/beta": {
            "target": "sklearn/sklearn.metrics._classification/fbeta_score/beta",
            "defaultType": "number",
            "defaultValue": 2.0
        },
        "sklearn/sklearn.metrics._classification/fbeta_score/average": {
            "target": "sklearn/sklearn.metrics._classification/fbeta_score/average",
            "defaultType": "string",
            "defaultValue": "samples"
        },
        "sklearn/sklearn.metrics._scorer/get_scorer/scoring": {
            "target": "sklearn/sklearn.metrics._scorer/get_scorer/scoring",
            "defaultType": "string",
            "defaultValue": "f1_macro"
        },
        "sklearn/sklearn.model_selection._split/train_test_split/test_size": {
            "target": "sklearn/sklearn.model_selection._split/train_test_split/test_size",
            "defaultType": "number",
            "defaultValue": 0.2
        },
        "sklearn/sklearn.model_selection._split/train_test_split/random_state": {
            "target": "sklearn/sklearn.model_selection._split/train_test_split/random_state",
            "defaultType": "number",
            "defaultValue": 42.0
        },
        "sklearn/sklearn.model_selection._validation/cross_validate/cv": {
            "target": "sklearn/sklearn.model_selection._validation/cross_validate/cv",
            "defaultType": "number",
            "defaultValue": 5.0
        },
        "sklearn/sklearn.model_selection._validation/validation_curve/param_name": {
            "target": "sklearn/sklearn.model_selection._validation/validation_curve/param_name",
            "defaultType": "string",
            "defaultValue": "max_depth"
        },
        "sklearn/sklearn.random_projection/GaussianRandomProjection/__init__/random_state": {
            "target": "sklearn/sklearn.random_projection/GaussianRandomProjection/__init__/random_state",
            "defaultType": "number",
            "defaultValue": 420.0
        },
        "sklearn/sklearn.random_projection/SparseRandomProjection/__init__/dense_output": {
            "target": "sklearn/sklearn.random_projection/SparseRandomProjection/__init__/dense_output",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.random_projection/SparseRandomProjection/__init__/random_state": {
            "target": "sklearn/sklearn.random_projection/SparseRandomProjection/__init__/random_state",
            "defaultType": "number",
            "defaultValue": 420.0
        },
        "sklearn/sklearn.tree._export/plot_tree/filled": {
            "target": "sklearn/sklearn.tree._export/plot_tree/filled",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.utils.validation/check_X_y/accept_sparse": {
            "target": "sklearn/sklearn.utils.validation/check_X_y/accept_sparse",
            "defaultType": "boolean",
            "defaultValue": true
        },
        "sklearn/sklearn.utils/resample/n_samples": {
            "target": "sklearn/sklearn.utils/resample/n_samples",
            "defaultType": "number",
            "defaultValue": 700.0
        },
        "sklearn/sklearn.utils/resample/random_state": {
            "target": "sklearn/sklearn.utils/resample/random_state",
            "defaultType": "number",
            "defaultValue": 2020.0
        }
    },
    "boundaries": {
        "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/__init__/damping": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/__init__/damping",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.5,
                "lowerLimitType": 0,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 1
            }
        },
        "sklearn/sklearn.datasets._samples_generator/make_circles/factor": {
            "target": "sklearn/sklearn.datasets._samples_generator/make_circles/factor",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 1
            }
        },
        "sklearn/sklearn.decomposition._pca/PCA/__init__/tol": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/__init__/tol",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 0,
                "upperIntervalLimit": 0,
                "upperLimitType": 2
            }
        },
        "sklearn/sklearn.decomposition._pca/PCA/__init__/iterated_power": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/__init__/iterated_power",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 0,
                "upperIntervalLimit": 0,
                "upperLimitType": 2
            }
        },
        "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/max_samples": {
            "target": "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/max_samples",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__/max_samples": {
            "target": "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__/max_samples",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/max_samples": {
            "target": "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/max_samples",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__/max_samples": {
            "target": "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__/max_samples",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/subsample": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/subsample",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/min_samples_split": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/min_samples_split",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/min_samples_leaf": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/min_samples_leaf",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/min_weight_fraction_leaf": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/min_weight_fraction_leaf",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 0,
                "upperIntervalLimit": 0.5,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/max_features": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/max_features",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/validation_fraction": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/validation_fraction",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 1
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/subsample": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/subsample",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/min_samples_split": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/min_samples_split",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/min_samples_leaf": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/min_samples_leaf",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/min_weight_fraction_leaf": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/min_weight_fraction_leaf",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 0,
                "upperIntervalLimit": 0.5,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/max_features": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/max_features",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/alpha": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/alpha",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 1
            }
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/validation_fraction": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/validation_fraction",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 1
            }
        },
        "sklearn/sklearn.ensemble._iforest/IsolationForest/__init__/contamination": {
            "target": "sklearn/sklearn.ensemble._iforest/IsolationForest/__init__/contamination",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 0.5,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/max_df": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/max_df",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 0,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/min_df": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/min_df",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 0,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/l1_ratio": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/l1_ratio",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 0,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/validation_fraction": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/validation_fraction",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 1
            }
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/__init__/nu": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/__init__/nu",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.manifold._t_sne/TSNE/__init__/learning_rate": {
            "target": "sklearn/sklearn.manifold._t_sne/TSNE/__init__/learning_rate",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 10.0,
                "lowerLimitType": 0,
                "upperIntervalLimit": 1000.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.manifold._t_sne/_gradient_descent/learning_rate": {
            "target": "sklearn/sklearn.manifold._t_sne/_gradient_descent/learning_rate",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 10.0,
                "lowerLimitType": 0,
                "upperIntervalLimit": 1000.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/__init__/contamination": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/__init__/contamination",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 0.5,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.svm._classes/NuSVC/__init__/nu": {
            "target": "sklearn/sklearn.svm._classes/NuSVC/__init__/nu",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.svm._classes/NuSVR/__init__/nu": {
            "target": "sklearn/sklearn.svm._classes/NuSVR/__init__/nu",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        },
        "sklearn/sklearn.svm._classes/OneClassSVM/__init__/nu": {
            "target": "sklearn/sklearn.svm._classes/OneClassSVM/__init__/nu",
            "interval": {
                "isDiscrete": false,
                "lowerIntervalLimit": 0.0,
                "lowerLimitType": 1,
                "upperIntervalLimit": 1.0,
                "upperLimitType": 0
            }
        }
    },
    "enums": {
        "sklearn/sklearn._config/config_context/display": {
            "target": "sklearn/sklearn._config/config_context/display",
            "enumName": "Display",
            "pairs": [
                {
                    "stringValue": "diagram",
                    "instanceName": "Diagram"
                },
                {
                    "stringValue": "text",
                    "instanceName": "Text"
                }
            ]
        },
        "sklearn/sklearn._config/set_config/display": {
            "target": "sklearn/sklearn._config/set_config/display",
            "enumName": "Display",
            "pairs": [
                {
                    "stringValue": "diagram",
                    "instanceName": "Diagram"
                },
                {
                    "stringValue": "text",
                    "instanceName": "Text"
                }
            ]
        },
        "sklearn/sklearn._loss.loss/BaseLoss/init_gradient_and_hessian/order": {
            "target": "sklearn/sklearn._loss.loss/BaseLoss/init_gradient_and_hessian/order",
            "enumName": "Order",
            "pairs": [
                {
                    "stringValue": "C",
                    "instanceName": "C"
                },
                {
                    "stringValue": "F",
                    "instanceName": "F"
                }
            ]
        },
        "sklearn/sklearn.calibration/CalibratedClassifierCV/__init__/method": {
            "target": "sklearn/sklearn.calibration/CalibratedClassifierCV/__init__/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "isotonic",
                    "instanceName": "Isotonic"
                },
                {
                    "stringValue": "sigmoid",
                    "instanceName": "Sigmoid"
                }
            ]
        },
        "sklearn/sklearn.calibration/CalibrationDisplay/from_estimator/strategy": {
            "target": "sklearn/sklearn.calibration/CalibrationDisplay/from_estimator/strategy",
            "enumName": "Strategy",
            "pairs": [
                {
                    "stringValue": "quantile",
                    "instanceName": "Quantile"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.calibration/CalibrationDisplay/from_predictions/strategy": {
            "target": "sklearn/sklearn.calibration/CalibrationDisplay/from_predictions/strategy",
            "enumName": "Strategy",
            "pairs": [
                {
                    "stringValue": "quantile",
                    "instanceName": "Quantile"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.calibration/_CalibratedClassifier/__init__/method": {
            "target": "sklearn/sklearn.calibration/_CalibratedClassifier/__init__/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "isotonic",
                    "instanceName": "Isotonic"
                },
                {
                    "stringValue": "sigmoid",
                    "instanceName": "Sigmoid"
                }
            ]
        },
        "sklearn/sklearn.calibration/_fit_calibrator/method": {
            "target": "sklearn/sklearn.calibration/_fit_calibrator/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "isotonic",
                    "instanceName": "Isotonic"
                },
                {
                    "stringValue": "sigmoid",
                    "instanceName": "Sigmoid"
                }
            ]
        },
        "sklearn/sklearn.calibration/_fit_classifier_calibrator_pair/method": {
            "target": "sklearn/sklearn.calibration/_fit_classifier_calibrator_pair/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "isotonic",
                    "instanceName": "Isotonic"
                },
                {
                    "stringValue": "sigmoid",
                    "instanceName": "Sigmoid"
                }
            ]
        },
        "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/__init__/affinity": {
            "target": "sklearn/sklearn.cluster._affinity_propagation/AffinityPropagation/__init__/affinity",
            "enumName": "Affinity",
            "pairs": [
                {
                    "stringValue": "euclidean",
                    "instanceName": "Euclidean"
                },
                {
                    "stringValue": "precomputed",
                    "instanceName": "Precomputed"
                }
            ]
        },
        "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/__init__/linkage": {
            "target": "sklearn/sklearn.cluster._agglomerative/AgglomerativeClustering/__init__/linkage",
            "enumName": "Linkage",
            "pairs": [
                {
                    "stringValue": "average",
                    "instanceName": "Average"
                },
                {
                    "stringValue": "complete",
                    "instanceName": "Complete"
                },
                {
                    "stringValue": "single",
                    "instanceName": "Single"
                },
                {
                    "stringValue": "ward",
                    "instanceName": "Ward"
                }
            ]
        },
        "sklearn/sklearn.cluster._agglomerative/FeatureAgglomeration/__init__/linkage": {
            "target": "sklearn/sklearn.cluster._agglomerative/FeatureAgglomeration/__init__/linkage",
            "enumName": "Linkage",
            "pairs": [
                {
                    "stringValue": "average",
                    "instanceName": "Average"
                },
                {
                    "stringValue": "complete",
                    "instanceName": "Complete"
                },
                {
                    "stringValue": "single",
                    "instanceName": "Single"
                },
                {
                    "stringValue": "ward",
                    "instanceName": "Ward"
                }
            ]
        },
        "sklearn/sklearn.cluster._agglomerative/_fix_connectivity/affinity": {
            "target": "sklearn/sklearn.cluster._agglomerative/_fix_connectivity/affinity",
            "enumName": "Affinity",
            "pairs": [
                {
                    "stringValue": "euclidean",
                    "instanceName": "Euclidean"
                },
                {
                    "stringValue": "precomputed",
                    "instanceName": "Precomputed"
                }
            ]
        },
        "sklearn/sklearn.cluster._agglomerative/linkage_tree/linkage": {
            "target": "sklearn/sklearn.cluster._agglomerative/linkage_tree/linkage",
            "enumName": "Linkage",
            "pairs": [
                {
                    "stringValue": "average",
                    "instanceName": "Average"
                },
                {
                    "stringValue": "complete",
                    "instanceName": "Complete"
                },
                {
                    "stringValue": "single",
                    "instanceName": "Single"
                }
            ]
        },
        "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/method": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "bistochastic",
                    "instanceName": "Bistochastic"
                },
                {
                    "stringValue": "log",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "scale",
                    "instanceName": "Scale"
                }
            ]
        },
        "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/svd_method": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/svd_method",
            "enumName": "SvdMethod",
            "pairs": [
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "randomized",
                    "instanceName": "Randomized"
                }
            ]
        },
        "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/init": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralBiclustering/__init__/init",
            "enumName": "Init",
            "pairs": [
                {
                    "stringValue": "k-means++",
                    "instanceName": "Kmeans"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.cluster._bicluster/SpectralCoclustering/__init__/svd_method": {
            "target": "sklearn/sklearn.cluster._bicluster/SpectralCoclustering/__init__/svd_method",
            "enumName": "SvdMethod",
            "pairs": [
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "randomized",
                    "instanceName": "Randomized"
                }
            ]
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/__init__/init": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/__init__/init",
            "enumName": "Init",
            "pairs": [
                {
                    "stringValue": "k-means++",
                    "instanceName": "Kmeans"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/__init__/algorithm": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "elkan",
                    "instanceName": "Elkan"
                },
                {
                    "stringValue": "lloyd",
                    "instanceName": "Lloyd"
                }
            ]
        },
        "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/__init__/bisecting_strategy": {
            "target": "sklearn/sklearn.cluster._bisect_k_means/BisectingKMeans/__init__/bisecting_strategy",
            "enumName": "BisectingStrategy",
            "pairs": [
                {
                    "stringValue": "biggest_inertia",
                    "instanceName": "BiggestInertia"
                },
                {
                    "stringValue": "largest_cluster",
                    "instanceName": "LargestCluster"
                }
            ]
        },
        "sklearn/sklearn.cluster._dbscan/DBSCAN/__init__/algorithm": {
            "target": "sklearn/sklearn.cluster._dbscan/DBSCAN/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.cluster._kmeans/KMeans/__init__/init": {
            "target": "sklearn/sklearn.cluster._kmeans/KMeans/__init__/init",
            "enumName": "Init",
            "pairs": [
                {
                    "stringValue": "k-means++",
                    "instanceName": "Kmeans"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.cluster._kmeans/KMeans/__init__/algorithm": {
            "target": "sklearn/sklearn.cluster._kmeans/KMeans/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "elkan",
                    "instanceName": "Elkan"
                },
                {
                    "stringValue": "full",
                    "instanceName": "Full"
                },
                {
                    "stringValue": "lloyd",
                    "instanceName": "Lloyd"
                }
            ]
        },
        "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/__init__/init": {
            "target": "sklearn/sklearn.cluster._kmeans/MiniBatchKMeans/__init__/init",
            "enumName": "Init",
            "pairs": [
                {
                    "stringValue": "k-means++",
                    "instanceName": "Kmeans"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_init_centroids/init": {
            "target": "sklearn/sklearn.cluster._kmeans/_BaseKMeans/_init_centroids/init",
            "enumName": "Init",
            "pairs": [
                {
                    "stringValue": "k-means++",
                    "instanceName": "Kmeans"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.cluster._optics/OPTICS/__init__/algorithm": {
            "target": "sklearn/sklearn.cluster._optics/OPTICS/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.cluster._optics/compute_optics_graph/algorithm": {
            "target": "sklearn/sklearn.cluster._optics/compute_optics_graph/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.cluster._spectral/SpectralClustering/__init__/eigen_solver": {
            "target": "sklearn/sklearn.cluster._spectral/SpectralClustering/__init__/eigen_solver",
            "enumName": "EigenSolver",
            "pairs": [
                {
                    "stringValue": "amg",
                    "instanceName": "Amg"
                },
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "lobpcg",
                    "instanceName": "Lobpcg"
                }
            ]
        },
        "sklearn/sklearn.cluster._spectral/SpectralClustering/__init__/assign_labels": {
            "target": "sklearn/sklearn.cluster._spectral/SpectralClustering/__init__/assign_labels",
            "enumName": "AssignLabels",
            "pairs": [
                {
                    "stringValue": "cluster_qr",
                    "instanceName": "ClusterQr"
                },
                {
                    "stringValue": "discretize",
                    "instanceName": "Discretize"
                },
                {
                    "stringValue": "kmeans",
                    "instanceName": "Kmeans"
                }
            ]
        },
        "sklearn/sklearn.cluster._spectral/spectral_clustering/eigen_solver": {
            "target": "sklearn/sklearn.cluster._spectral/spectral_clustering/eigen_solver",
            "enumName": "EigenSolver",
            "pairs": [
                {
                    "stringValue": "amg",
                    "instanceName": "Amg"
                },
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "lobpcg",
                    "instanceName": "Lobpcg"
                }
            ]
        },
        "sklearn/sklearn.cluster._spectral/spectral_clustering/assign_labels": {
            "target": "sklearn/sklearn.cluster._spectral/spectral_clustering/assign_labels",
            "enumName": "AssignLabels",
            "pairs": [
                {
                    "stringValue": "cluster_qr",
                    "instanceName": "ClusterQr"
                },
                {
                    "stringValue": "discretize",
                    "instanceName": "Discretize"
                },
                {
                    "stringValue": "kmeans",
                    "instanceName": "Kmeans"
                }
            ]
        },
        "sklearn/sklearn.compose._column_transformer/ColumnTransformer/__init__/remainder": {
            "target": "sklearn/sklearn.compose._column_transformer/ColumnTransformer/__init__/remainder",
            "enumName": "Remainder",
            "pairs": [
                {
                    "stringValue": "drop",
                    "instanceName": "Drop"
                },
                {
                    "stringValue": "passthrough",
                    "instanceName": "Passthrough"
                }
            ]
        },
        "sklearn/sklearn.compose._column_transformer/make_column_transformer/remainder": {
            "target": "sklearn/sklearn.compose._column_transformer/make_column_transformer/remainder",
            "enumName": "Remainder",
            "pairs": [
                {
                    "stringValue": "drop",
                    "instanceName": "Drop"
                },
                {
                    "stringValue": "passthrough",
                    "instanceName": "Passthrough"
                }
            ]
        },
        "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/error_norm/norm": {
            "target": "sklearn/sklearn.covariance._empirical_covariance/EmpiricalCovariance/error_norm/norm",
            "enumName": "Norm",
            "pairs": [
                {
                    "stringValue": "frobenius",
                    "instanceName": "Frobenius"
                },
                {
                    "stringValue": "spectral",
                    "instanceName": "Spectral"
                }
            ]
        },
        "sklearn/sklearn.covariance._graph_lasso/GraphicalLasso/__init__/mode": {
            "target": "sklearn/sklearn.covariance._graph_lasso/GraphicalLasso/__init__/mode",
            "enumName": "Mode",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                }
            ]
        },
        "sklearn/sklearn.covariance._graph_lasso/GraphicalLassoCV/__init__/mode": {
            "target": "sklearn/sklearn.covariance._graph_lasso/GraphicalLassoCV/__init__/mode",
            "enumName": "Mode",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                }
            ]
        },
        "sklearn/sklearn.covariance._graph_lasso/graphical_lasso/mode": {
            "target": "sklearn/sklearn.covariance._graph_lasso/graphical_lasso/mode",
            "enumName": "Mode",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                }
            ]
        },
        "sklearn/sklearn.covariance._graph_lasso/graphical_lasso_path/mode": {
            "target": "sklearn/sklearn.covariance._graph_lasso/graphical_lasso_path/mode",
            "enumName": "Mode",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                }
            ]
        },
        "sklearn/sklearn.cross_decomposition._pls/PLSCanonical/__init__/algorithm": {
            "target": "sklearn/sklearn.cross_decomposition._pls/PLSCanonical/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "nipals",
                    "instanceName": "Nipals"
                },
                {
                    "stringValue": "svd",
                    "instanceName": "Svd"
                }
            ]
        },
        "sklearn/sklearn.datasets._arff_parser/_pandas_arff_parser/output_type": {
            "target": "sklearn/sklearn.datasets._arff_parser/_pandas_arff_parser/output_type",
            "enumName": "OutputType",
            "pairs": [
                {
                    "stringValue": "numpy",
                    "instanceName": "Numpy"
                },
                {
                    "stringValue": "pandas",
                    "instanceName": "Pandas"
                },
                {
                    "stringValue": "sparse",
                    "instanceName": "Sparse"
                }
            ]
        },
        "sklearn/sklearn.datasets._arff_parser/load_arff_from_gzip_file/parser": {
            "target": "sklearn/sklearn.datasets._arff_parser/load_arff_from_gzip_file/parser",
            "enumName": "Parser",
            "pairs": [
                {
                    "stringValue": "liac-arff",
                    "instanceName": "Liacarff"
                },
                {
                    "stringValue": "pandas",
                    "instanceName": "Pandas"
                }
            ]
        },
        "sklearn/sklearn.datasets._arff_parser/load_arff_from_gzip_file/output_type": {
            "target": "sklearn/sklearn.datasets._arff_parser/load_arff_from_gzip_file/output_type",
            "enumName": "OutputType",
            "pairs": [
                {
                    "stringValue": "numpy",
                    "instanceName": "Numpy"
                },
                {
                    "stringValue": "pandas",
                    "instanceName": "Pandas"
                },
                {
                    "stringValue": "sparse",
                    "instanceName": "Sparse"
                }
            ]
        },
        "sklearn/sklearn.datasets._kddcup99/fetch_kddcup99/subset": {
            "target": "sklearn/sklearn.datasets._kddcup99/fetch_kddcup99/subset",
            "enumName": "Subset",
            "pairs": [
                {
                    "stringValue": "SA",
                    "instanceName": "Sa"
                },
                {
                    "stringValue": "SF",
                    "instanceName": "Sf"
                },
                {
                    "stringValue": "http",
                    "instanceName": "Http"
                },
                {
                    "stringValue": "smtp",
                    "instanceName": "Smtp"
                }
            ]
        },
        "sklearn/sklearn.datasets._lfw/fetch_lfw_pairs/subset": {
            "target": "sklearn/sklearn.datasets._lfw/fetch_lfw_pairs/subset",
            "enumName": "Subset",
            "pairs": [
                {
                    "stringValue": "10_folds",
                    "instanceName": "Folds"
                },
                {
                    "stringValue": "test",
                    "instanceName": "Test"
                },
                {
                    "stringValue": "train",
                    "instanceName": "Train"
                }
            ]
        },
        "sklearn/sklearn.datasets._openml/_download_data_to_bunch/parser": {
            "target": "sklearn/sklearn.datasets._openml/_download_data_to_bunch/parser",
            "enumName": "Parser",
            "pairs": [
                {
                    "stringValue": "liac-arff",
                    "instanceName": "Liacarff"
                },
                {
                    "stringValue": "pandas",
                    "instanceName": "Pandas"
                }
            ]
        },
        "sklearn/sklearn.datasets._openml/_load_arff_response/parser": {
            "target": "sklearn/sklearn.datasets._openml/_load_arff_response/parser",
            "enumName": "Parser",
            "pairs": [
                {
                    "stringValue": "liac-arff",
                    "instanceName": "Liacarff"
                },
                {
                    "stringValue": "pandas",
                    "instanceName": "Pandas"
                }
            ]
        },
        "sklearn/sklearn.datasets._openml/_load_arff_response/output_type": {
            "target": "sklearn/sklearn.datasets._openml/_load_arff_response/output_type",
            "enumName": "OutputType",
            "pairs": [
                {
                    "stringValue": "numpy",
                    "instanceName": "Numpy"
                },
                {
                    "stringValue": "pandas",
                    "instanceName": "Pandas"
                },
                {
                    "stringValue": "sparse",
                    "instanceName": "Sparse"
                }
            ]
        },
        "sklearn/sklearn.datasets._rcv1/fetch_rcv1/subset": {
            "target": "sklearn/sklearn.datasets._rcv1/fetch_rcv1/subset",
            "enumName": "Subset",
            "pairs": [
                {
                    "stringValue": "all",
                    "instanceName": "All"
                },
                {
                    "stringValue": "test",
                    "instanceName": "Test"
                },
                {
                    "stringValue": "train",
                    "instanceName": "Train"
                }
            ]
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/subset": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups/subset",
            "enumName": "Subset",
            "pairs": [
                {
                    "stringValue": "all",
                    "instanceName": "All"
                },
                {
                    "stringValue": "test",
                    "instanceName": "Test"
                },
                {
                    "stringValue": "train",
                    "instanceName": "Train"
                }
            ]
        },
        "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups_vectorized/subset": {
            "target": "sklearn/sklearn.datasets._twenty_newsgroups/fetch_20newsgroups_vectorized/subset",
            "enumName": "Subset",
            "pairs": [
                {
                    "stringValue": "all",
                    "instanceName": "All"
                },
                {
                    "stringValue": "test",
                    "instanceName": "Test"
                },
                {
                    "stringValue": "train",
                    "instanceName": "Train"
                }
            ]
        },
        "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/__init__/fit_algorithm": {
            "target": "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/__init__/fit_algorithm",
            "enumName": "FitAlgorithm",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                }
            ]
        },
        "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/__init__/transform_algorithm": {
            "target": "sklearn/sklearn.decomposition._dict_learning/DictionaryLearning/__init__/transform_algorithm",
            "enumName": "TransformAlgorithm",
            "pairs": [
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                },
                {
                    "stringValue": "lasso_cd",
                    "instanceName": "LassoCd"
                },
                {
                    "stringValue": "lasso_lars",
                    "instanceName": "LassoLars"
                },
                {
                    "stringValue": "omp",
                    "instanceName": "Omp"
                },
                {
                    "stringValue": "threshold",
                    "instanceName": "Threshold"
                }
            ]
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/__init__/fit_algorithm": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/__init__/fit_algorithm",
            "enumName": "FitAlgorithm",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                }
            ]
        },
        "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/__init__/transform_algorithm": {
            "target": "sklearn/sklearn.decomposition._dict_learning/MiniBatchDictionaryLearning/__init__/transform_algorithm",
            "enumName": "TransformAlgorithm",
            "pairs": [
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                },
                {
                    "stringValue": "lasso_cd",
                    "instanceName": "LassoCd"
                },
                {
                    "stringValue": "lasso_lars",
                    "instanceName": "LassoLars"
                },
                {
                    "stringValue": "omp",
                    "instanceName": "Omp"
                },
                {
                    "stringValue": "threshold",
                    "instanceName": "Threshold"
                }
            ]
        },
        "sklearn/sklearn.decomposition._dict_learning/SparseCoder/__init__/transform_algorithm": {
            "target": "sklearn/sklearn.decomposition._dict_learning/SparseCoder/__init__/transform_algorithm",
            "enumName": "TransformAlgorithm",
            "pairs": [
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                },
                {
                    "stringValue": "lasso_cd",
                    "instanceName": "LassoCd"
                },
                {
                    "stringValue": "lasso_lars",
                    "instanceName": "LassoLars"
                },
                {
                    "stringValue": "omp",
                    "instanceName": "Omp"
                },
                {
                    "stringValue": "threshold",
                    "instanceName": "Threshold"
                }
            ]
        },
        "sklearn/sklearn.decomposition._dict_learning/_sparse_encode/algorithm": {
            "target": "sklearn/sklearn.decomposition._dict_learning/_sparse_encode/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                },
                {
                    "stringValue": "lasso_cd",
                    "instanceName": "LassoCd"
                },
                {
                    "stringValue": "lasso_lars",
                    "instanceName": "LassoLars"
                },
                {
                    "stringValue": "omp",
                    "instanceName": "Omp"
                },
                {
                    "stringValue": "threshold",
                    "instanceName": "Threshold"
                }
            ]
        },
        "sklearn/sklearn.decomposition._dict_learning/dict_learning/method": {
            "target": "sklearn/sklearn.decomposition._dict_learning/dict_learning/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                }
            ]
        },
        "sklearn/sklearn.decomposition._dict_learning/dict_learning_online/method": {
            "target": "sklearn/sklearn.decomposition._dict_learning/dict_learning_online/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                }
            ]
        },
        "sklearn/sklearn.decomposition._dict_learning/sparse_encode/algorithm": {
            "target": "sklearn/sklearn.decomposition._dict_learning/sparse_encode/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                },
                {
                    "stringValue": "lasso_cd",
                    "instanceName": "LassoCd"
                },
                {
                    "stringValue": "lasso_lars",
                    "instanceName": "LassoLars"
                },
                {
                    "stringValue": "omp",
                    "instanceName": "Omp"
                },
                {
                    "stringValue": "threshold",
                    "instanceName": "Threshold"
                }
            ]
        },
        "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/__init__/svd_method": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/__init__/svd_method",
            "enumName": "SvdMethod",
            "pairs": [
                {
                    "stringValue": "lapack",
                    "instanceName": "Lapack"
                },
                {
                    "stringValue": "randomized",
                    "instanceName": "Randomized"
                }
            ]
        },
        "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/__init__/rotation": {
            "target": "sklearn/sklearn.decomposition._factor_analysis/FactorAnalysis/__init__/rotation",
            "enumName": "Rotation",
            "pairs": [
                {
                    "stringValue": "quartimax",
                    "instanceName": "Quartimax"
                },
                {
                    "stringValue": "varimax",
                    "instanceName": "Varimax"
                }
            ]
        },
        "sklearn/sklearn.decomposition._fastica/FastICA/__init__/algorithm": {
            "target": "sklearn/sklearn.decomposition._fastica/FastICA/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "deflation",
                    "instanceName": "Deflation"
                },
                {
                    "stringValue": "parallel",
                    "instanceName": "Parallel"
                }
            ]
        },
        "sklearn/sklearn.decomposition._fastica/FastICA/__init__/fun": {
            "target": "sklearn/sklearn.decomposition._fastica/FastICA/__init__/fun",
            "enumName": "Fun",
            "pairs": [
                {
                    "stringValue": "cube",
                    "instanceName": "Cube"
                },
                {
                    "stringValue": "exp",
                    "instanceName": "Exp"
                },
                {
                    "stringValue": "logcosh",
                    "instanceName": "Logcosh"
                }
            ]
        },
        "sklearn/sklearn.decomposition._fastica/fastica/algorithm": {
            "target": "sklearn/sklearn.decomposition._fastica/fastica/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "deflation",
                    "instanceName": "Deflation"
                },
                {
                    "stringValue": "parallel",
                    "instanceName": "Parallel"
                }
            ]
        },
        "sklearn/sklearn.decomposition._fastica/fastica/fun": {
            "target": "sklearn/sklearn.decomposition._fastica/fastica/fun",
            "enumName": "Fun",
            "pairs": [
                {
                    "stringValue": "cube",
                    "instanceName": "Cube"
                },
                {
                    "stringValue": "exp",
                    "instanceName": "Exp"
                },
                {
                    "stringValue": "logcosh",
                    "instanceName": "Logcosh"
                }
            ]
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/__init__/kernel": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/__init__/kernel",
            "enumName": "Kernel",
            "pairs": [
                {
                    "stringValue": "cosine",
                    "instanceName": "Cosine"
                },
                {
                    "stringValue": "linear",
                    "instanceName": "Linear"
                },
                {
                    "stringValue": "poly",
                    "instanceName": "Poly"
                },
                {
                    "stringValue": "precomputed",
                    "instanceName": "Precomputed"
                },
                {
                    "stringValue": "rbf",
                    "instanceName": "Rbf"
                },
                {
                    "stringValue": "sigmoid",
                    "instanceName": "Sigmoid"
                }
            ]
        },
        "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/__init__/eigen_solver": {
            "target": "sklearn/sklearn.decomposition._kernel_pca/KernelPCA/__init__/eigen_solver",
            "enumName": "EigenSolver",
            "pairs": [
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "dense",
                    "instanceName": "Dense"
                },
                {
                    "stringValue": "randomized",
                    "instanceName": "Randomized"
                }
            ]
        },
        "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/__init__/learning_method": {
            "target": "sklearn/sklearn.decomposition._lda/LatentDirichletAllocation/__init__/learning_method",
            "enumName": "LearningMethod",
            "pairs": [
                {
                    "stringValue": "batch",
                    "instanceName": "Batch"
                },
                {
                    "stringValue": "online",
                    "instanceName": "Online"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/__init__/init": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/__init__/init",
            "enumName": "Init",
            "pairs": [
                {
                    "stringValue": "custom",
                    "instanceName": "Custom"
                },
                {
                    "stringValue": "nndsvd",
                    "instanceName": "Nndsvd"
                },
                {
                    "stringValue": "nndsvda",
                    "instanceName": "Nndsvda"
                },
                {
                    "stringValue": "nndsvdar",
                    "instanceName": "Nndsvdar"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/__init__/beta_loss": {
            "target": "sklearn/sklearn.decomposition._nmf/MiniBatchNMF/__init__/beta_loss",
            "enumName": "BetaLoss",
            "pairs": [
                {
                    "stringValue": "frobenius",
                    "instanceName": "Frobenius"
                },
                {
                    "stringValue": "itakura-saito",
                    "instanceName": "Itakurasaito"
                },
                {
                    "stringValue": "kullback-leibler",
                    "instanceName": "Kullbackleibler"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/NMF/__init__/init": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/__init__/init",
            "enumName": "Init",
            "pairs": [
                {
                    "stringValue": "custom",
                    "instanceName": "Custom"
                },
                {
                    "stringValue": "nndsvd",
                    "instanceName": "Nndsvd"
                },
                {
                    "stringValue": "nndsvda",
                    "instanceName": "Nndsvda"
                },
                {
                    "stringValue": "nndsvdar",
                    "instanceName": "Nndsvdar"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/NMF/__init__/solver": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/__init__/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "mu",
                    "instanceName": "Mu"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/NMF/__init__/beta_loss": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/__init__/beta_loss",
            "enumName": "BetaLoss",
            "pairs": [
                {
                    "stringValue": "frobenius",
                    "instanceName": "Frobenius"
                },
                {
                    "stringValue": "itakura-saito",
                    "instanceName": "Itakurasaito"
                },
                {
                    "stringValue": "kullback-leibler",
                    "instanceName": "Kullbackleibler"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/NMF/__init__/regularization": {
            "target": "sklearn/sklearn.decomposition._nmf/NMF/__init__/regularization",
            "enumName": "Regularization",
            "pairs": [
                {
                    "stringValue": "both",
                    "instanceName": "Both"
                },
                {
                    "stringValue": "components",
                    "instanceName": "Components"
                },
                {
                    "stringValue": "transformation",
                    "instanceName": "Transformation"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/_beta_divergence/beta": {
            "target": "sklearn/sklearn.decomposition._nmf/_beta_divergence/beta",
            "enumName": "Beta",
            "pairs": [
                {
                    "stringValue": "frobenius",
                    "instanceName": "Frobenius"
                },
                {
                    "stringValue": "itakura-saito",
                    "instanceName": "Itakurasaito"
                },
                {
                    "stringValue": "kullback-leibler",
                    "instanceName": "Kullbackleibler"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/_fit_multiplicative_update/beta_loss": {
            "target": "sklearn/sklearn.decomposition._nmf/_fit_multiplicative_update/beta_loss",
            "enumName": "BetaLoss",
            "pairs": [
                {
                    "stringValue": "frobenius",
                    "instanceName": "Frobenius"
                },
                {
                    "stringValue": "itakura-saito",
                    "instanceName": "Itakurasaito"
                },
                {
                    "stringValue": "kullback-leibler",
                    "instanceName": "Kullbackleibler"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/_initialize_nmf/init": {
            "target": "sklearn/sklearn.decomposition._nmf/_initialize_nmf/init",
            "enumName": "Init",
            "pairs": [
                {
                    "stringValue": "nndsvd",
                    "instanceName": "Nndsvd"
                },
                {
                    "stringValue": "nndsvda",
                    "instanceName": "Nndsvda"
                },
                {
                    "stringValue": "nndsvdar",
                    "instanceName": "Nndsvdar"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/non_negative_factorization/init": {
            "target": "sklearn/sklearn.decomposition._nmf/non_negative_factorization/init",
            "enumName": "Init",
            "pairs": [
                {
                    "stringValue": "custom",
                    "instanceName": "Custom"
                },
                {
                    "stringValue": "nndsvd",
                    "instanceName": "Nndsvd"
                },
                {
                    "stringValue": "nndsvda",
                    "instanceName": "Nndsvda"
                },
                {
                    "stringValue": "nndsvdar",
                    "instanceName": "Nndsvdar"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/non_negative_factorization/solver": {
            "target": "sklearn/sklearn.decomposition._nmf/non_negative_factorization/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "mu",
                    "instanceName": "Mu"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/non_negative_factorization/beta_loss": {
            "target": "sklearn/sklearn.decomposition._nmf/non_negative_factorization/beta_loss",
            "enumName": "BetaLoss",
            "pairs": [
                {
                    "stringValue": "frobenius",
                    "instanceName": "Frobenius"
                },
                {
                    "stringValue": "itakura-saito",
                    "instanceName": "Itakurasaito"
                },
                {
                    "stringValue": "kullback-leibler",
                    "instanceName": "Kullbackleibler"
                }
            ]
        },
        "sklearn/sklearn.decomposition._nmf/non_negative_factorization/regularization": {
            "target": "sklearn/sklearn.decomposition._nmf/non_negative_factorization/regularization",
            "enumName": "Regularization",
            "pairs": [
                {
                    "stringValue": "both",
                    "instanceName": "Both"
                },
                {
                    "stringValue": "components",
                    "instanceName": "Components"
                },
                {
                    "stringValue": "transformation",
                    "instanceName": "Transformation"
                }
            ]
        },
        "sklearn/sklearn.decomposition._pca/PCA/__init__/svd_solver": {
            "target": "sklearn/sklearn.decomposition._pca/PCA/__init__/svd_solver",
            "enumName": "SvdSolver",
            "pairs": [
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "full",
                    "instanceName": "Full"
                },
                {
                    "stringValue": "randomized",
                    "instanceName": "Randomized"
                }
            ]
        },
        "sklearn/sklearn.decomposition._sparse_pca/MiniBatchSparsePCA/__init__/method": {
            "target": "sklearn/sklearn.decomposition._sparse_pca/MiniBatchSparsePCA/__init__/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                }
            ]
        },
        "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/__init__/method": {
            "target": "sklearn/sklearn.decomposition._sparse_pca/SparsePCA/__init__/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "cd",
                    "instanceName": "Cd"
                },
                {
                    "stringValue": "lars",
                    "instanceName": "Lars"
                }
            ]
        },
        "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/__init__/algorithm": {
            "target": "sklearn/sklearn.decomposition._truncated_svd/TruncatedSVD/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "randomized",
                    "instanceName": "Randomized"
                }
            ]
        },
        "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/__init__/solver": {
            "target": "sklearn/sklearn.discriminant_analysis/LinearDiscriminantAnalysis/__init__/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "eigen",
                    "instanceName": "Eigen"
                },
                {
                    "stringValue": "lsqr",
                    "instanceName": "Lsqr"
                },
                {
                    "stringValue": "svd",
                    "instanceName": "Svd"
                }
            ]
        },
        "sklearn/sklearn.dummy/DummyClassifier/__init__/strategy": {
            "target": "sklearn/sklearn.dummy/DummyClassifier/__init__/strategy",
            "enumName": "Strategy",
            "pairs": [
                {
                    "stringValue": "constant",
                    "instanceName": "Constant"
                },
                {
                    "stringValue": "most_frequent",
                    "instanceName": "MostFrequent"
                },
                {
                    "stringValue": "prior",
                    "instanceName": "Prior"
                },
                {
                    "stringValue": "stratified",
                    "instanceName": "Stratified"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.dummy/DummyRegressor/__init__/strategy": {
            "target": "sklearn/sklearn.dummy/DummyRegressor/__init__/strategy",
            "enumName": "Strategy",
            "pairs": [
                {
                    "stringValue": "constant",
                    "instanceName": "Constant"
                },
                {
                    "stringValue": "mean",
                    "instanceName": "Mean"
                },
                {
                    "stringValue": "median",
                    "instanceName": "Median"
                },
                {
                    "stringValue": "quantile",
                    "instanceName": "Quantile"
                }
            ]
        },
        "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/criterion": {
            "target": "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "entropy",
                    "instanceName": "Entropy"
                },
                {
                    "stringValue": "gini",
                    "instanceName": "Gini"
                },
                {
                    "stringValue": "log_loss",
                    "instanceName": "LogLoss"
                }
            ]
        },
        "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/max_features": {
            "target": "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/max_features",
            "enumName": "MaxFeatures",
            "pairs": [
                {
                    "stringValue": "log2",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "sqrt",
                    "instanceName": "Sqrt"
                }
            ]
        },
        "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/class_weight": {
            "target": "sklearn/sklearn.ensemble._forest/ExtraTreesClassifier/__init__/class_weight",
            "enumName": "ClassWeight",
            "pairs": [
                {
                    "stringValue": "balanced",
                    "instanceName": "Balanced"
                },
                {
                    "stringValue": "balanced_subsample",
                    "instanceName": "BalancedSubsample"
                }
            ]
        },
        "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__/criterion": {
            "target": "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "absolute_error",
                    "instanceName": "AbsoluteError"
                },
                {
                    "stringValue": "squared_error",
                    "instanceName": "SquaredError"
                }
            ]
        },
        "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__/max_features": {
            "target": "sklearn/sklearn.ensemble._forest/ExtraTreesRegressor/__init__/max_features",
            "enumName": "MaxFeatures",
            "pairs": [
                {
                    "stringValue": "log2",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "sqrt",
                    "instanceName": "Sqrt"
                }
            ]
        },
        "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/criterion": {
            "target": "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "entropy",
                    "instanceName": "Entropy"
                },
                {
                    "stringValue": "gini",
                    "instanceName": "Gini"
                },
                {
                    "stringValue": "log_loss",
                    "instanceName": "LogLoss"
                }
            ]
        },
        "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/max_features": {
            "target": "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/max_features",
            "enumName": "MaxFeatures",
            "pairs": [
                {
                    "stringValue": "log2",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "sqrt",
                    "instanceName": "Sqrt"
                }
            ]
        },
        "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/class_weight": {
            "target": "sklearn/sklearn.ensemble._forest/RandomForestClassifier/__init__/class_weight",
            "enumName": "ClassWeight",
            "pairs": [
                {
                    "stringValue": "balanced",
                    "instanceName": "Balanced"
                },
                {
                    "stringValue": "balanced_subsample",
                    "instanceName": "BalancedSubsample"
                }
            ]
        },
        "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__/criterion": {
            "target": "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "absolute_error",
                    "instanceName": "AbsoluteError"
                },
                {
                    "stringValue": "poisson",
                    "instanceName": "Poisson"
                },
                {
                    "stringValue": "squared_error",
                    "instanceName": "SquaredError"
                }
            ]
        },
        "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__/max_features": {
            "target": "sklearn/sklearn.ensemble._forest/RandomForestRegressor/__init__/max_features",
            "enumName": "MaxFeatures",
            "pairs": [
                {
                    "stringValue": "log2",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "sqrt",
                    "instanceName": "Sqrt"
                }
            ]
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/loss": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "deviance",
                    "instanceName": "Deviance"
                },
                {
                    "stringValue": "exponential",
                    "instanceName": "Exponential"
                },
                {
                    "stringValue": "log_loss",
                    "instanceName": "LogLoss"
                }
            ]
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/criterion": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "friedman_mse",
                    "instanceName": "FriedmanMse"
                },
                {
                    "stringValue": "mse",
                    "instanceName": "Mse"
                },
                {
                    "stringValue": "squared_error",
                    "instanceName": "SquaredError"
                }
            ]
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/max_features": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingClassifier/__init__/max_features",
            "enumName": "MaxFeatures",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "log2",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "sqrt",
                    "instanceName": "Sqrt"
                }
            ]
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/loss": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "absolute_error",
                    "instanceName": "AbsoluteError"
                },
                {
                    "stringValue": "huber",
                    "instanceName": "Huber"
                },
                {
                    "stringValue": "quantile",
                    "instanceName": "Quantile"
                },
                {
                    "stringValue": "squared_error",
                    "instanceName": "SquaredError"
                }
            ]
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/criterion": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "friedman_mse",
                    "instanceName": "FriedmanMse"
                },
                {
                    "stringValue": "mse",
                    "instanceName": "Mse"
                },
                {
                    "stringValue": "squared_error",
                    "instanceName": "SquaredError"
                }
            ]
        },
        "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/max_features": {
            "target": "sklearn/sklearn.ensemble._gb/GradientBoostingRegressor/__init__/max_features",
            "enumName": "MaxFeatures",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "log2",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "sqrt",
                    "instanceName": "Sqrt"
                }
            ]
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/__init__/loss": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingClassifier/__init__/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "binary_crossentropy",
                    "instanceName": "BinaryCrossentropy"
                },
                {
                    "stringValue": "categorical_crossentropy",
                    "instanceName": "CategoricalCrossentropy"
                },
                {
                    "stringValue": "log_loss",
                    "instanceName": "LogLoss"
                }
            ]
        },
        "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/__init__/loss": {
            "target": "sklearn/sklearn.ensemble._hist_gradient_boosting.gradient_boosting/HistGradientBoostingRegressor/__init__/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "absolute_error",
                    "instanceName": "AbsoluteError"
                },
                {
                    "stringValue": "poisson",
                    "instanceName": "Poisson"
                },
                {
                    "stringValue": "quantile",
                    "instanceName": "Quantile"
                },
                {
                    "stringValue": "squared_error",
                    "instanceName": "SquaredError"
                }
            ]
        },
        "sklearn/sklearn.ensemble._stacking/StackingClassifier/__init__/stack_method": {
            "target": "sklearn/sklearn.ensemble._stacking/StackingClassifier/__init__/stack_method",
            "enumName": "StackMethod",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "decision_function",
                    "instanceName": "DecisionFunction"
                },
                {
                    "stringValue": "predict",
                    "instanceName": "Predict"
                },
                {
                    "stringValue": "predict_proba",
                    "instanceName": "PredictProba"
                }
            ]
        },
        "sklearn/sklearn.ensemble._voting/VotingClassifier/__init__/voting": {
            "target": "sklearn/sklearn.ensemble._voting/VotingClassifier/__init__/voting",
            "enumName": "Voting",
            "pairs": [
                {
                    "stringValue": "hard",
                    "instanceName": "Hard"
                },
                {
                    "stringValue": "soft",
                    "instanceName": "Soft"
                }
            ]
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/__init__/algorithm": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostClassifier/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "SAMME",
                    "instanceName": "Samme"
                },
                {
                    "stringValue": "SAMME.R",
                    "instanceName": "Sammer"
                }
            ]
        },
        "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/__init__/loss": {
            "target": "sklearn/sklearn.ensemble._weight_boosting/AdaBoostRegressor/__init__/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "exponential",
                    "instanceName": "Exponential"
                },
                {
                    "stringValue": "linear",
                    "instanceName": "Linear"
                },
                {
                    "stringValue": "square",
                    "instanceName": "Square"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/input": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/input",
            "enumName": "Input",
            "pairs": [
                {
                    "stringValue": "content",
                    "instanceName": "Content"
                },
                {
                    "stringValue": "file",
                    "instanceName": "File"
                },
                {
                    "stringValue": "filename",
                    "instanceName": "Filename"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/decode_error": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/decode_error",
            "enumName": "DecodeError",
            "pairs": [
                {
                    "stringValue": "ignore",
                    "instanceName": "Ignore"
                },
                {
                    "stringValue": "replace",
                    "instanceName": "Replace"
                },
                {
                    "stringValue": "strict",
                    "instanceName": "Strict"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/strip_accents": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/strip_accents",
            "enumName": "StripAccents",
            "pairs": [
                {
                    "stringValue": "ascii",
                    "instanceName": "Ascii"
                },
                {
                    "stringValue": "unicode",
                    "instanceName": "Unicode"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/stop_words": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/stop_words",
            "enumName": "StopWords",
            "pairs": [
                {
                    "stringValue": "english",
                    "instanceName": "English"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/analyzer": {
            "target": "sklearn/sklearn.feature_extraction.text/CountVectorizer/__init__/analyzer",
            "enumName": "Analyzer",
            "pairs": [
                {
                    "stringValue": "char",
                    "instanceName": "Char"
                },
                {
                    "stringValue": "char_wb",
                    "instanceName": "CharWb"
                },
                {
                    "stringValue": "word",
                    "instanceName": "Word"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/decode_error": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/decode_error",
            "enumName": "DecodeError",
            "pairs": [
                {
                    "stringValue": "ignore",
                    "instanceName": "Ignore"
                },
                {
                    "stringValue": "replace",
                    "instanceName": "Replace"
                },
                {
                    "stringValue": "strict",
                    "instanceName": "Strict"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/strip_accents": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/strip_accents",
            "enumName": "StripAccents",
            "pairs": [
                {
                    "stringValue": "ascii",
                    "instanceName": "Ascii"
                },
                {
                    "stringValue": "unicode",
                    "instanceName": "Unicode"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/stop_words": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/stop_words",
            "enumName": "StopWords",
            "pairs": [
                {
                    "stringValue": "english",
                    "instanceName": "English"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/analyzer": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/analyzer",
            "enumName": "Analyzer",
            "pairs": [
                {
                    "stringValue": "char",
                    "instanceName": "Char"
                },
                {
                    "stringValue": "char_wb",
                    "instanceName": "CharWb"
                },
                {
                    "stringValue": "word",
                    "instanceName": "Word"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/norm": {
            "target": "sklearn/sklearn.feature_extraction.text/HashingVectorizer/__init__/norm",
            "enumName": "Norm",
            "pairs": [
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/TfidfTransformer/__init__/norm": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfTransformer/__init__/norm",
            "enumName": "Norm",
            "pairs": [
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/decode_error": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/decode_error",
            "enumName": "DecodeError",
            "pairs": [
                {
                    "stringValue": "ignore",
                    "instanceName": "Ignore"
                },
                {
                    "stringValue": "replace",
                    "instanceName": "Replace"
                },
                {
                    "stringValue": "strict",
                    "instanceName": "Strict"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/strip_accents": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/strip_accents",
            "enumName": "StripAccents",
            "pairs": [
                {
                    "stringValue": "ascii",
                    "instanceName": "Ascii"
                },
                {
                    "stringValue": "unicode",
                    "instanceName": "Unicode"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/analyzer": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/analyzer",
            "enumName": "Analyzer",
            "pairs": [
                {
                    "stringValue": "char",
                    "instanceName": "Char"
                },
                {
                    "stringValue": "char_wb",
                    "instanceName": "CharWb"
                },
                {
                    "stringValue": "word",
                    "instanceName": "Word"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/stop_words": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/stop_words",
            "enumName": "StopWords",
            "pairs": [
                {
                    "stringValue": "english",
                    "instanceName": "English"
                }
            ]
        },
        "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/norm": {
            "target": "sklearn/sklearn.feature_extraction.text/TfidfVectorizer/__init__/norm",
            "enumName": "Norm",
            "pairs": [
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                }
            ]
        },
        "sklearn/sklearn.feature_selection._base/_get_feature_importances/transform_func": {
            "target": "sklearn/sklearn.feature_selection._base/_get_feature_importances/transform_func",
            "enumName": "TransformFunc",
            "pairs": [
                {
                    "stringValue": "norm",
                    "instanceName": "Norm"
                },
                {
                    "stringValue": "square",
                    "instanceName": "Square"
                }
            ]
        },
        "sklearn/sklearn.feature_selection._mutual_info/_estimate_mi/discrete_features": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/_estimate_mi/discrete_features",
            "enumName": "DiscreteFeatures",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                }
            ]
        },
        "sklearn/sklearn.feature_selection._mutual_info/mutual_info_classif/discrete_features": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/mutual_info_classif/discrete_features",
            "enumName": "DiscreteFeatures",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                }
            ]
        },
        "sklearn/sklearn.feature_selection._mutual_info/mutual_info_regression/discrete_features": {
            "target": "sklearn/sklearn.feature_selection._mutual_info/mutual_info_regression/discrete_features",
            "enumName": "DiscreteFeatures",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                }
            ]
        },
        "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/__init__/direction": {
            "target": "sklearn/sklearn.feature_selection._sequential/SequentialFeatureSelector/__init__/direction",
            "enumName": "Direction",
            "pairs": [
                {
                    "stringValue": "backward",
                    "instanceName": "Backward"
                },
                {
                    "stringValue": "forward",
                    "instanceName": "Forward"
                }
            ]
        },
        "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/__init__/mode": {
            "target": "sklearn/sklearn.feature_selection._univariate_selection/GenericUnivariateSelect/__init__/mode",
            "enumName": "Mode",
            "pairs": [
                {
                    "stringValue": "fdr",
                    "instanceName": "Fdr"
                },
                {
                    "stringValue": "fpr",
                    "instanceName": "Fpr"
                },
                {
                    "stringValue": "fwe",
                    "instanceName": "Fwe"
                },
                {
                    "stringValue": "k_best",
                    "instanceName": "KBest"
                },
                {
                    "stringValue": "percentile",
                    "instanceName": "Percentile"
                }
            ]
        },
        "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/__init__/multi_class": {
            "target": "sklearn/sklearn.gaussian_process._gpc/GaussianProcessClassifier/__init__/multi_class",
            "enumName": "MultiClass",
            "pairs": [
                {
                    "stringValue": "one_vs_one",
                    "instanceName": "OneVsOne"
                },
                {
                    "stringValue": "one_vs_rest",
                    "instanceName": "OneVsRest"
                }
            ]
        },
        "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/__init__/metric": {
            "target": "sklearn/sklearn.gaussian_process.kernels/PairwiseKernel/__init__/metric",
            "enumName": "Metric",
            "pairs": [
                {
                    "stringValue": "additive_chi2",
                    "instanceName": "AdditiveChi"
                },
                {
                    "stringValue": "chi2",
                    "instanceName": "Chi"
                },
                {
                    "stringValue": "cosine",
                    "instanceName": "Cosine"
                },
                {
                    "stringValue": "laplacian",
                    "instanceName": "Laplacian"
                },
                {
                    "stringValue": "linear",
                    "instanceName": "Linear"
                },
                {
                    "stringValue": "poly",
                    "instanceName": "Poly"
                },
                {
                    "stringValue": "polynomial",
                    "instanceName": "Polynomial"
                },
                {
                    "stringValue": "rbf",
                    "instanceName": "Rbf"
                },
                {
                    "stringValue": "sigmoid",
                    "instanceName": "Sigmoid"
                }
            ]
        },
        "sklearn/sklearn.impute._base/MissingIndicator/__init__/features": {
            "target": "sklearn/sklearn.impute._base/MissingIndicator/__init__/features",
            "enumName": "Features",
            "pairs": [
                {
                    "stringValue": "all",
                    "instanceName": "All"
                },
                {
                    "stringValue": "missing-only",
                    "instanceName": "Missingonly"
                }
            ]
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/__init__/initial_strategy": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/__init__/initial_strategy",
            "enumName": "InitialStrategy",
            "pairs": [
                {
                    "stringValue": "constant",
                    "instanceName": "Constant"
                },
                {
                    "stringValue": "mean",
                    "instanceName": "Mean"
                },
                {
                    "stringValue": "median",
                    "instanceName": "Median"
                },
                {
                    "stringValue": "most_frequent",
                    "instanceName": "MostFrequent"
                }
            ]
        },
        "sklearn/sklearn.impute._iterative/IterativeImputer/__init__/imputation_order": {
            "target": "sklearn/sklearn.impute._iterative/IterativeImputer/__init__/imputation_order",
            "enumName": "ImputationOrder",
            "pairs": [
                {
                    "stringValue": "arabic",
                    "instanceName": "Arabic"
                },
                {
                    "stringValue": "ascending",
                    "instanceName": "Ascending"
                },
                {
                    "stringValue": "descending",
                    "instanceName": "Descending"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                },
                {
                    "stringValue": "roman",
                    "instanceName": "Roman"
                }
            ]
        },
        "sklearn/sklearn.impute._knn/KNNImputer/__init__/weights": {
            "target": "sklearn/sklearn.impute._knn/KNNImputer/__init__/weights",
            "enumName": "Weights",
            "pairs": [
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.impute._knn/KNNImputer/__init__/metric": {
            "target": "sklearn/sklearn.impute._knn/KNNImputer/__init__/metric",
            "enumName": "Metric",
            "pairs": [
                {
                    "stringValue": "nan_euclidean",
                    "instanceName": "NanEuclidean"
                }
            ]
        },
        "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/from_estimator/plot_method": {
            "target": "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/from_estimator/plot_method",
            "enumName": "PlotMethod",
            "pairs": [
                {
                    "stringValue": "contour",
                    "instanceName": "Contour"
                },
                {
                    "stringValue": "contourf",
                    "instanceName": "Contourf"
                },
                {
                    "stringValue": "pcolormesh",
                    "instanceName": "Pcolormesh"
                }
            ]
        },
        "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/from_estimator/response_method": {
            "target": "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/from_estimator/response_method",
            "enumName": "ResponseMethod",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "decision_function",
                    "instanceName": "DecisionFunction"
                },
                {
                    "stringValue": "predict",
                    "instanceName": "Predict"
                },
                {
                    "stringValue": "predict_proba",
                    "instanceName": "PredictProba"
                }
            ]
        },
        "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/plot/plot_method": {
            "target": "sklearn/sklearn.inspection._plot.decision_boundary/DecisionBoundaryDisplay/plot/plot_method",
            "enumName": "PlotMethod",
            "pairs": [
                {
                    "stringValue": "contour",
                    "instanceName": "Contour"
                },
                {
                    "stringValue": "contourf",
                    "instanceName": "Contourf"
                },
                {
                    "stringValue": "pcolormesh",
                    "instanceName": "Pcolormesh"
                }
            ]
        },
        "sklearn/sklearn.inspection._plot.decision_boundary/_check_boundary_response_method/response_method": {
            "target": "sklearn/sklearn.inspection._plot.decision_boundary/_check_boundary_response_method/response_method",
            "enumName": "ResponseMethod",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "decision_function",
                    "instanceName": "DecisionFunction"
                },
                {
                    "stringValue": "predict",
                    "instanceName": "Predict"
                },
                {
                    "stringValue": "predict_proba",
                    "instanceName": "PredictProba"
                }
            ]
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/__init__/kind": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/__init__/kind",
            "enumName": "Kind",
            "pairs": [
                {
                    "stringValue": "average",
                    "instanceName": "Average"
                },
                {
                    "stringValue": "both",
                    "instanceName": "Both"
                },
                {
                    "stringValue": "individual",
                    "instanceName": "Individual"
                }
            ]
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/response_method": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/response_method",
            "enumName": "ResponseMethod",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "decision_function",
                    "instanceName": "DecisionFunction"
                },
                {
                    "stringValue": "predict_proba",
                    "instanceName": "PredictProba"
                }
            ]
        },
        "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/kind": {
            "target": "sklearn/sklearn.inspection._plot.partial_dependence/PartialDependenceDisplay/from_estimator/kind",
            "enumName": "Kind",
            "pairs": [
                {
                    "stringValue": "average",
                    "instanceName": "Average"
                },
                {
                    "stringValue": "both",
                    "instanceName": "Both"
                },
                {
                    "stringValue": "individual",
                    "instanceName": "Individual"
                }
            ]
        },
        "sklearn/sklearn.isotonic/IsotonicRegression/__init__/out_of_bounds": {
            "target": "sklearn/sklearn.isotonic/IsotonicRegression/__init__/out_of_bounds",
            "enumName": "OutOfBounds",
            "pairs": [
                {
                    "stringValue": "clip",
                    "instanceName": "Clip"
                },
                {
                    "stringValue": "nan",
                    "instanceName": "Nan"
                },
                {
                    "stringValue": "raise",
                    "instanceName": "Raise"
                }
            ]
        },
        "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/__init__/selection": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNet/__init__/selection",
            "enumName": "Selection",
            "pairs": [
                {
                    "stringValue": "cyclic",
                    "instanceName": "Cyclic"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/__init__/selection": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/ElasticNetCV/__init__/selection",
            "enumName": "Selection",
            "pairs": [
                {
                    "stringValue": "cyclic",
                    "instanceName": "Cyclic"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.linear_model._coordinate_descent/Lasso/__init__/selection": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/Lasso/__init__/selection",
            "enumName": "Selection",
            "pairs": [
                {
                    "stringValue": "cyclic",
                    "instanceName": "Cyclic"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/__init__/selection": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/LassoCV/__init__/selection",
            "enumName": "Selection",
            "pairs": [
                {
                    "stringValue": "cyclic",
                    "instanceName": "Cyclic"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNet/__init__/selection": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNet/__init__/selection",
            "enumName": "Selection",
            "pairs": [
                {
                    "stringValue": "cyclic",
                    "instanceName": "Cyclic"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/__init__/selection": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskElasticNetCV/__init__/selection",
            "enumName": "Selection",
            "pairs": [
                {
                    "stringValue": "cyclic",
                    "instanceName": "Cyclic"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLasso/__init__/selection": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLasso/__init__/selection",
            "enumName": "Selection",
            "pairs": [
                {
                    "stringValue": "cyclic",
                    "instanceName": "Cyclic"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/__init__/selection": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/MultiTaskLassoCV/__init__/selection",
            "enumName": "Selection",
            "pairs": [
                {
                    "stringValue": "cyclic",
                    "instanceName": "Cyclic"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.linear_model._coordinate_descent/_path_residuals/X_order": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/_path_residuals/X_order",
            "enumName": "XOrder",
            "pairs": [
                {
                    "stringValue": "C",
                    "instanceName": "C"
                },
                {
                    "stringValue": "F",
                    "instanceName": "F"
                }
            ]
        },
        "sklearn/sklearn.linear_model._coordinate_descent/_set_order/order": {
            "target": "sklearn/sklearn.linear_model._coordinate_descent/_set_order/order",
            "enumName": "Order",
            "pairs": [
                {
                    "stringValue": "C",
                    "instanceName": "C"
                },
                {
                    "stringValue": "F",
                    "instanceName": "F"
                }
            ]
        },
        "sklearn/sklearn.linear_model._glm.glm/TweedieRegressor/__init__/link": {
            "target": "sklearn/sklearn.linear_model._glm.glm/TweedieRegressor/__init__/link",
            "enumName": "Link",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "identity",
                    "instanceName": "Identity"
                },
                {
                    "stringValue": "log",
                    "instanceName": "Log"
                }
            ]
        },
        "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/__init__/criterion": {
            "target": "sklearn/sklearn.linear_model._least_angle/LassoLarsIC/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "aic",
                    "instanceName": "Aic"
                },
                {
                    "stringValue": "bic",
                    "instanceName": "Bic"
                }
            ]
        },
        "sklearn/sklearn.linear_model._least_angle/_lars_path_residues/method": {
            "target": "sklearn/sklearn.linear_model._least_angle/_lars_path_residues/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "lar",
                    "instanceName": "Lar"
                },
                {
                    "stringValue": "lasso",
                    "instanceName": "Lasso"
                }
            ]
        },
        "sklearn/sklearn.linear_model._least_angle/_lars_path_solver/method": {
            "target": "sklearn/sklearn.linear_model._least_angle/_lars_path_solver/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "lar",
                    "instanceName": "Lar"
                },
                {
                    "stringValue": "lasso",
                    "instanceName": "Lasso"
                }
            ]
        },
        "sklearn/sklearn.linear_model._least_angle/lars_path/method": {
            "target": "sklearn/sklearn.linear_model._least_angle/lars_path/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "lar",
                    "instanceName": "Lar"
                },
                {
                    "stringValue": "lasso",
                    "instanceName": "Lasso"
                }
            ]
        },
        "sklearn/sklearn.linear_model._least_angle/lars_path_gram/method": {
            "target": "sklearn/sklearn.linear_model._least_angle/lars_path_gram/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "lar",
                    "instanceName": "Lar"
                },
                {
                    "stringValue": "lasso",
                    "instanceName": "Lasso"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/penalty": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/penalty",
            "enumName": "Penalty",
            "pairs": [
                {
                    "stringValue": "elasticnet",
                    "instanceName": "Elasticnet"
                },
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                },
                {
                    "stringValue": "none",
                    "instanceName": "None"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/solver": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "lbfgs",
                    "instanceName": "Lbfgs"
                },
                {
                    "stringValue": "liblinear",
                    "instanceName": "Liblinear"
                },
                {
                    "stringValue": "newton-cg",
                    "instanceName": "Newtoncg"
                },
                {
                    "stringValue": "sag",
                    "instanceName": "Sag"
                },
                {
                    "stringValue": "saga",
                    "instanceName": "Saga"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/multi_class": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegression/__init__/multi_class",
            "enumName": "MultiClass",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "multinomial",
                    "instanceName": "Multinomial"
                },
                {
                    "stringValue": "ovr",
                    "instanceName": "Ovr"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/penalty": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/penalty",
            "enumName": "Penalty",
            "pairs": [
                {
                    "stringValue": "elasticnet",
                    "instanceName": "Elasticnet"
                },
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/solver": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "lbfgs",
                    "instanceName": "Lbfgs"
                },
                {
                    "stringValue": "liblinear",
                    "instanceName": "Liblinear"
                },
                {
                    "stringValue": "newton-cg",
                    "instanceName": "Newtoncg"
                },
                {
                    "stringValue": "sag",
                    "instanceName": "Sag"
                },
                {
                    "stringValue": "saga",
                    "instanceName": "Saga"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/multi_class": {
            "target": "sklearn/sklearn.linear_model._logistic/LogisticRegressionCV/__init__/multi_class",
            "enumName": "MultiClass",
            "pairs": [
                {
                    "stringValue": ", ",
                    "instanceName": ""
                },
                {
                    "stringValue": "auto, ",
                    "instanceName": "Auto"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/solver": {
            "target": "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "lbfgs",
                    "instanceName": "Lbfgs"
                },
                {
                    "stringValue": "liblinear",
                    "instanceName": "Liblinear"
                },
                {
                    "stringValue": "newton-cg",
                    "instanceName": "Newtoncg"
                },
                {
                    "stringValue": "sag",
                    "instanceName": "Sag"
                },
                {
                    "stringValue": "saga",
                    "instanceName": "Saga"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/penalty": {
            "target": "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/penalty",
            "enumName": "Penalty",
            "pairs": [
                {
                    "stringValue": "elasticnet",
                    "instanceName": "Elasticnet"
                },
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/multi_class": {
            "target": "sklearn/sklearn.linear_model._logistic/_log_reg_scoring_path/multi_class",
            "enumName": "MultiClass",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "multinomial",
                    "instanceName": "Multinomial"
                },
                {
                    "stringValue": "ovr",
                    "instanceName": "Ovr"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/solver": {
            "target": "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "lbfgs",
                    "instanceName": "Lbfgs"
                },
                {
                    "stringValue": "liblinear",
                    "instanceName": "Liblinear"
                },
                {
                    "stringValue": "newton-cg",
                    "instanceName": "Newtoncg"
                },
                {
                    "stringValue": "sag",
                    "instanceName": "Sag"
                },
                {
                    "stringValue": "saga",
                    "instanceName": "Saga"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/penalty": {
            "target": "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/penalty",
            "enumName": "Penalty",
            "pairs": [
                {
                    "stringValue": "elasticnet",
                    "instanceName": "Elasticnet"
                },
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                }
            ]
        },
        "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/multi_class": {
            "target": "sklearn/sklearn.linear_model._logistic/_logistic_regression_path/multi_class",
            "enumName": "MultiClass",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "multinomial",
                    "instanceName": "Multinomial"
                },
                {
                    "stringValue": "ovr",
                    "instanceName": "Ovr"
                }
            ]
        },
        "sklearn/sklearn.linear_model._perceptron/Perceptron/__init__/penalty": {
            "target": "sklearn/sklearn.linear_model._perceptron/Perceptron/__init__/penalty",
            "enumName": "Penalty",
            "pairs": [
                {
                    "stringValue": "elasticnet",
                    "instanceName": "Elasticnet"
                },
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                }
            ]
        },
        "sklearn/sklearn.linear_model._quantile/QuantileRegressor/__init__/solver": {
            "target": "sklearn/sklearn.linear_model._quantile/QuantileRegressor/__init__/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "highs",
                    "instanceName": "Highs"
                },
                {
                    "stringValue": "highs-ds",
                    "instanceName": "Highsds"
                },
                {
                    "stringValue": "highs-ipm",
                    "instanceName": "Highsipm"
                },
                {
                    "stringValue": "interior-point",
                    "instanceName": "Interiorpoint"
                },
                {
                    "stringValue": "revised simplex",
                    "instanceName": "Revisedsimplex"
                }
            ]
        },
        "sklearn/sklearn.linear_model._ridge/Ridge/__init__/solver": {
            "target": "sklearn/sklearn.linear_model._ridge/Ridge/__init__/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "cholesky",
                    "instanceName": "Cholesky"
                },
                {
                    "stringValue": "lbfgs",
                    "instanceName": "Lbfgs"
                },
                {
                    "stringValue": "lsqr",
                    "instanceName": "Lsqr"
                },
                {
                    "stringValue": "sag",
                    "instanceName": "Sag"
                },
                {
                    "stringValue": "saga",
                    "instanceName": "Saga"
                },
                {
                    "stringValue": "sparse_cg",
                    "instanceName": "SparseCg"
                },
                {
                    "stringValue": "svd",
                    "instanceName": "Svd"
                }
            ]
        },
        "sklearn/sklearn.linear_model._ridge/RidgeClassifier/__init__/solver": {
            "target": "sklearn/sklearn.linear_model._ridge/RidgeClassifier/__init__/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "cholesky",
                    "instanceName": "Cholesky"
                },
                {
                    "stringValue": "lbfgs",
                    "instanceName": "Lbfgs"
                },
                {
                    "stringValue": "lsqr",
                    "instanceName": "Lsqr"
                },
                {
                    "stringValue": "sag",
                    "instanceName": "Sag"
                },
                {
                    "stringValue": "saga",
                    "instanceName": "Saga"
                },
                {
                    "stringValue": "sparse_cg",
                    "instanceName": "SparseCg"
                },
                {
                    "stringValue": "svd",
                    "instanceName": "Svd"
                }
            ]
        },
        "sklearn/sklearn.linear_model._ridge/ridge_regression/solver": {
            "target": "sklearn/sklearn.linear_model._ridge/ridge_regression/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "cholesky",
                    "instanceName": "Cholesky"
                },
                {
                    "stringValue": "lbfgs",
                    "instanceName": "Lbfgs"
                },
                {
                    "stringValue": "lsqr",
                    "instanceName": "Lsqr"
                },
                {
                    "stringValue": "sag",
                    "instanceName": "Sag"
                },
                {
                    "stringValue": "saga",
                    "instanceName": "Saga"
                },
                {
                    "stringValue": "sparse_cg",
                    "instanceName": "SparseCg"
                },
                {
                    "stringValue": "svd",
                    "instanceName": "Svd"
                }
            ]
        },
        "sklearn/sklearn.linear_model._sag/get_auto_step_size/loss": {
            "target": "sklearn/sklearn.linear_model._sag/get_auto_step_size/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "log",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "multinomial",
                    "instanceName": "Multinomial"
                },
                {
                    "stringValue": "squared",
                    "instanceName": "Squared"
                }
            ]
        },
        "sklearn/sklearn.linear_model._sag/sag_solver/loss": {
            "target": "sklearn/sklearn.linear_model._sag/sag_solver/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "log",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "multinomial",
                    "instanceName": "Multinomial"
                },
                {
                    "stringValue": "squared",
                    "instanceName": "Squared"
                }
            ]
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/loss": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "epsilon_insensitive",
                    "instanceName": "EpsilonInsensitive"
                },
                {
                    "stringValue": "hinge",
                    "instanceName": "Hinge"
                },
                {
                    "stringValue": "huber",
                    "instanceName": "Huber"
                },
                {
                    "stringValue": "log",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "log_loss",
                    "instanceName": "LogLoss"
                },
                {
                    "stringValue": "modified_huber",
                    "instanceName": "ModifiedHuber"
                },
                {
                    "stringValue": "perceptron",
                    "instanceName": "Perceptron"
                },
                {
                    "stringValue": "squared_epsilon_insensitive",
                    "instanceName": "SquaredEpsilonInsensitive"
                },
                {
                    "stringValue": "squared_error",
                    "instanceName": "SquaredError"
                },
                {
                    "stringValue": "squared_hinge",
                    "instanceName": "SquaredHinge"
                }
            ]
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/penalty": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDClassifier/__init__/penalty",
            "enumName": "Penalty",
            "pairs": [
                {
                    "stringValue": "elasticnet",
                    "instanceName": "Elasticnet"
                },
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                }
            ]
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/__init__/learning_rate": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDOneClassSVM/__init__/learning_rate",
            "enumName": "LearningRate",
            "pairs": [
                {
                    "stringValue": "adaptive",
                    "instanceName": "Adaptive"
                },
                {
                    "stringValue": "constant",
                    "instanceName": "Constant"
                },
                {
                    "stringValue": "invscaling",
                    "instanceName": "Invscaling"
                },
                {
                    "stringValue": "optimal",
                    "instanceName": "Optimal"
                }
            ]
        },
        "sklearn/sklearn.linear_model._stochastic_gradient/SGDRegressor/__init__/penalty": {
            "target": "sklearn/sklearn.linear_model._stochastic_gradient/SGDRegressor/__init__/penalty",
            "enumName": "Penalty",
            "pairs": [
                {
                    "stringValue": "elasticnet",
                    "instanceName": "Elasticnet"
                },
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                }
            ]
        },
        "sklearn/sklearn.manifold._isomap/Isomap/__init__/eigen_solver": {
            "target": "sklearn/sklearn.manifold._isomap/Isomap/__init__/eigen_solver",
            "enumName": "EigenSolver",
            "pairs": [
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "dense",
                    "instanceName": "Dense"
                }
            ]
        },
        "sklearn/sklearn.manifold._isomap/Isomap/__init__/path_method": {
            "target": "sklearn/sklearn.manifold._isomap/Isomap/__init__/path_method",
            "enumName": "PathMethod",
            "pairs": [
                {
                    "stringValue": "D",
                    "instanceName": "D"
                },
                {
                    "stringValue": "FW",
                    "instanceName": "Fw"
                },
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                }
            ]
        },
        "sklearn/sklearn.manifold._isomap/Isomap/__init__/neighbors_algorithm": {
            "target": "sklearn/sklearn.manifold._isomap/Isomap/__init__/neighbors_algorithm",
            "enumName": "NeighborsAlgorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/eigen_solver": {
            "target": "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/eigen_solver",
            "enumName": "EigenSolver",
            "pairs": [
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "dense",
                    "instanceName": "Dense"
                }
            ]
        },
        "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/method": {
            "target": "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "hessian",
                    "instanceName": "Hessian"
                },
                {
                    "stringValue": "ltsa",
                    "instanceName": "Ltsa"
                },
                {
                    "stringValue": "modified",
                    "instanceName": "Modified"
                },
                {
                    "stringValue": "standard",
                    "instanceName": "Standard"
                }
            ]
        },
        "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/neighbors_algorithm": {
            "target": "sklearn/sklearn.manifold._locally_linear/LocallyLinearEmbedding/__init__/neighbors_algorithm",
            "enumName": "NeighborsAlgorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding/eigen_solver": {
            "target": "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding/eigen_solver",
            "enumName": "EigenSolver",
            "pairs": [
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "dense",
                    "instanceName": "Dense"
                }
            ]
        },
        "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding/method": {
            "target": "sklearn/sklearn.manifold._locally_linear/locally_linear_embedding/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "hessian",
                    "instanceName": "Hessian"
                },
                {
                    "stringValue": "ltsa",
                    "instanceName": "Ltsa"
                },
                {
                    "stringValue": "modified",
                    "instanceName": "Modified"
                },
                {
                    "stringValue": "standard",
                    "instanceName": "Standard"
                }
            ]
        },
        "sklearn/sklearn.manifold._locally_linear/null_space/eigen_solver": {
            "target": "sklearn/sklearn.manifold._locally_linear/null_space/eigen_solver",
            "enumName": "EigenSolver",
            "pairs": [
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "dense",
                    "instanceName": "Dense"
                }
            ]
        },
        "sklearn/sklearn.manifold._mds/MDS/__init__/dissimilarity": {
            "target": "sklearn/sklearn.manifold._mds/MDS/__init__/dissimilarity",
            "enumName": "Dissimilarity",
            "pairs": [
                {
                    "stringValue": "euclidean",
                    "instanceName": "Euclidean"
                },
                {
                    "stringValue": "precomputed",
                    "instanceName": "Precomputed"
                }
            ]
        },
        "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/__init__/affinity": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/__init__/affinity",
            "enumName": "Affinity",
            "pairs": [
                {
                    "stringValue": "nearest_neighbors",
                    "instanceName": "NearestNeighbors"
                },
                {
                    "stringValue": "precomputed",
                    "instanceName": "Precomputed"
                },
                {
                    "stringValue": "precomputed_nearest_neighbors",
                    "instanceName": "PrecomputedNearestNeighbors"
                },
                {
                    "stringValue": "rbf",
                    "instanceName": "Rbf"
                }
            ]
        },
        "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/__init__/eigen_solver": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/SpectralEmbedding/__init__/eigen_solver",
            "enumName": "EigenSolver",
            "pairs": [
                {
                    "stringValue": "amg",
                    "instanceName": "Amg"
                },
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "lobpcg",
                    "instanceName": "Lobpcg"
                }
            ]
        },
        "sklearn/sklearn.manifold._spectral_embedding/spectral_embedding/eigen_solver": {
            "target": "sklearn/sklearn.manifold._spectral_embedding/spectral_embedding/eigen_solver",
            "enumName": "EigenSolver",
            "pairs": [
                {
                    "stringValue": "amg",
                    "instanceName": "Amg"
                },
                {
                    "stringValue": "arpack",
                    "instanceName": "Arpack"
                },
                {
                    "stringValue": "lobpcg",
                    "instanceName": "Lobpcg"
                }
            ]
        },
        "sklearn/sklearn.manifold._t_sne/TSNE/__init__/init": {
            "target": "sklearn/sklearn.manifold._t_sne/TSNE/__init__/init",
            "enumName": "Init",
            "pairs": [
                {
                    "stringValue": "pca",
                    "instanceName": "Pca"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.metrics._base/_average_binary_score/average": {
            "target": "sklearn/sklearn.metrics._base/_average_binary_score/average",
            "enumName": "Average",
            "pairs": [
                {
                    "stringValue": "macro",
                    "instanceName": "Macro"
                },
                {
                    "stringValue": "micro",
                    "instanceName": "Micro"
                },
                {
                    "stringValue": "samples",
                    "instanceName": "Samples"
                },
                {
                    "stringValue": "weighted",
                    "instanceName": "Weighted"
                }
            ]
        },
        "sklearn/sklearn.metrics._base/_average_multiclass_ovo_score/average": {
            "target": "sklearn/sklearn.metrics._base/_average_multiclass_ovo_score/average",
            "enumName": "Average",
            "pairs": [
                {
                    "stringValue": "macro",
                    "instanceName": "Macro"
                },
                {
                    "stringValue": "weighted",
                    "instanceName": "Weighted"
                }
            ]
        },
        "sklearn/sklearn.metrics._classification/cohen_kappa_score/weights": {
            "target": "sklearn/sklearn.metrics._classification/cohen_kappa_score/weights",
            "enumName": "Weights",
            "pairs": [
                {
                    "stringValue": "linear",
                    "instanceName": "Linear"
                },
                {
                    "stringValue": "quadratic",
                    "instanceName": "Quadratic"
                }
            ]
        },
        "sklearn/sklearn.metrics._classification/confusion_matrix/normalize": {
            "target": "sklearn/sklearn.metrics._classification/confusion_matrix/normalize",
            "enumName": "Normalize",
            "pairs": [
                {
                    "stringValue": "all",
                    "instanceName": "All"
                },
                {
                    "stringValue": "pred",
                    "instanceName": "Pred"
                },
                {
                    "stringValue": "true",
                    "instanceName": "True"
                }
            ]
        },
        "sklearn/sklearn.metrics._classification/f1_score/average": {
            "target": "sklearn/sklearn.metrics._classification/f1_score/average",
            "enumName": "Average",
            "pairs": [
                {
                    "stringValue": "binary",
                    "instanceName": "Binary"
                },
                {
                    "stringValue": "macro",
                    "instanceName": "Macro"
                },
                {
                    "stringValue": "micro",
                    "instanceName": "Micro"
                },
                {
                    "stringValue": "samples",
                    "instanceName": "Samples"
                },
                {
                    "stringValue": "weighted",
                    "instanceName": "Weighted"
                }
            ]
        },
        "sklearn/sklearn.metrics._classification/fbeta_score/average": {
            "target": "sklearn/sklearn.metrics._classification/fbeta_score/average",
            "enumName": "Average",
            "pairs": [
                {
                    "stringValue": "binary",
                    "instanceName": "Binary"
                },
                {
                    "stringValue": "macro",
                    "instanceName": "Macro"
                },
                {
                    "stringValue": "micro",
                    "instanceName": "Micro"
                },
                {
                    "stringValue": "samples",
                    "instanceName": "Samples"
                },
                {
                    "stringValue": "weighted",
                    "instanceName": "Weighted"
                }
            ]
        },
        "sklearn/sklearn.metrics._classification/jaccard_score/average": {
            "target": "sklearn/sklearn.metrics._classification/jaccard_score/average",
            "enumName": "Average",
            "pairs": [
                {
                    "stringValue": "binary",
                    "instanceName": "Binary"
                },
                {
                    "stringValue": "macro",
                    "instanceName": "Macro"
                },
                {
                    "stringValue": "micro",
                    "instanceName": "Micro"
                },
                {
                    "stringValue": "samples",
                    "instanceName": "Samples"
                },
                {
                    "stringValue": "weighted",
                    "instanceName": "Weighted"
                }
            ]
        },
        "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/average": {
            "target": "sklearn/sklearn.metrics._classification/precision_recall_fscore_support/average",
            "enumName": "Average",
            "pairs": [
                {
                    "stringValue": "binary",
                    "instanceName": "Binary"
                },
                {
                    "stringValue": "macro",
                    "instanceName": "Macro"
                },
                {
                    "stringValue": "micro",
                    "instanceName": "Micro"
                },
                {
                    "stringValue": "samples",
                    "instanceName": "Samples"
                },
                {
                    "stringValue": "weighted",
                    "instanceName": "Weighted"
                }
            ]
        },
        "sklearn/sklearn.metrics._classification/precision_score/average": {
            "target": "sklearn/sklearn.metrics._classification/precision_score/average",
            "enumName": "Average",
            "pairs": [
                {
                    "stringValue": "binary",
                    "instanceName": "Binary"
                },
                {
                    "stringValue": "macro",
                    "instanceName": "Macro"
                },
                {
                    "stringValue": "micro",
                    "instanceName": "Micro"
                },
                {
                    "stringValue": "samples",
                    "instanceName": "Samples"
                },
                {
                    "stringValue": "weighted",
                    "instanceName": "Weighted"
                }
            ]
        },
        "sklearn/sklearn.metrics._classification/recall_score/average": {
            "target": "sklearn/sklearn.metrics._classification/recall_score/average",
            "enumName": "Average",
            "pairs": [
                {
                    "stringValue": "binary",
                    "instanceName": "Binary"
                },
                {
                    "stringValue": "macro",
                    "instanceName": "Macro"
                },
                {
                    "stringValue": "micro",
                    "instanceName": "Micro"
                },
                {
                    "stringValue": "samples",
                    "instanceName": "Samples"
                },
                {
                    "stringValue": "weighted",
                    "instanceName": "Weighted"
                }
            ]
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator/normalize": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator/normalize",
            "enumName": "Normalize",
            "pairs": [
                {
                    "stringValue": "all",
                    "instanceName": "All"
                },
                {
                    "stringValue": "pred",
                    "instanceName": "Pred"
                },
                {
                    "stringValue": "true",
                    "instanceName": "True"
                }
            ]
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator/xticks_rotation": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_estimator/xticks_rotation",
            "enumName": "XticksRotation",
            "pairs": [
                {
                    "stringValue": "horizontal",
                    "instanceName": "Horizontal"
                },
                {
                    "stringValue": "vertical",
                    "instanceName": "Vertical"
                }
            ]
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_predictions/normalize": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_predictions/normalize",
            "enumName": "Normalize",
            "pairs": [
                {
                    "stringValue": "all",
                    "instanceName": "All"
                },
                {
                    "stringValue": "pred",
                    "instanceName": "Pred"
                },
                {
                    "stringValue": "true",
                    "instanceName": "True"
                }
            ]
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_predictions/xticks_rotation": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/from_predictions/xticks_rotation",
            "enumName": "XticksRotation",
            "pairs": [
                {
                    "stringValue": "horizontal",
                    "instanceName": "Horizontal"
                },
                {
                    "stringValue": "vertical",
                    "instanceName": "Vertical"
                }
            ]
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/plot/xticks_rotation": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/ConfusionMatrixDisplay/plot/xticks_rotation",
            "enumName": "XticksRotation",
            "pairs": [
                {
                    "stringValue": "horizontal",
                    "instanceName": "Horizontal"
                },
                {
                    "stringValue": "vertical",
                    "instanceName": "Vertical"
                }
            ]
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/normalize": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/normalize",
            "enumName": "Normalize",
            "pairs": [
                {
                    "stringValue": "all",
                    "instanceName": "All"
                },
                {
                    "stringValue": "pred",
                    "instanceName": "Pred"
                },
                {
                    "stringValue": "true",
                    "instanceName": "True"
                }
            ]
        },
        "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/xticks_rotation": {
            "target": "sklearn/sklearn.metrics._plot.confusion_matrix/plot_confusion_matrix/xticks_rotation",
            "enumName": "XticksRotation",
            "pairs": [
                {
                    "stringValue": "horizontal",
                    "instanceName": "Horizontal"
                },
                {
                    "stringValue": "vertical",
                    "instanceName": "Vertical"
                }
            ]
        },
        "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_estimator/response_method": {
            "target": "sklearn/sklearn.metrics._plot.det_curve/DetCurveDisplay/from_estimator/response_method",
            "enumName": "ResponseMethod",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "decision_function",
                    "instanceName": "DecisionFunction"
                },
                {
                    "stringValue": "predict_proba",
                    "instanceName": "PredictProba"
                }
            ]
        },
        "sklearn/sklearn.metrics._plot.det_curve/plot_det_curve/response_method": {
            "target": "sklearn/sklearn.metrics._plot.det_curve/plot_det_curve/response_method",
            "enumName": "ResponseMethod",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "decision_function",
                    "instanceName": "DecisionFunction"
                },
                {
                    "stringValue": "predict_proba",
                    "instanceName": "PredictProba"
                }
            ]
        },
        "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/from_estimator/response_method": {
            "target": "sklearn/sklearn.metrics._plot.precision_recall_curve/PrecisionRecallDisplay/from_estimator/response_method",
            "enumName": "ResponseMethod",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "decision_function",
                    "instanceName": "DecisionFunction"
                },
                {
                    "stringValue": "predict_proba",
                    "instanceName": "PredictProba"
                }
            ]
        },
        "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_estimator/response_method": {
            "target": "sklearn/sklearn.metrics._plot.roc_curve/RocCurveDisplay/from_estimator/response_method",
            "enumName": "ResponseMethod",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "decision_function",
                    "instanceName": "DecisionFunction"
                },
                {
                    "stringValue": "predict_proba",
                    "instanceName": "PredictProba"
                }
            ]
        },
        "sklearn/sklearn.metrics._ranking/_multiclass_roc_auc_score/multi_class": {
            "target": "sklearn/sklearn.metrics._ranking/_multiclass_roc_auc_score/multi_class",
            "enumName": "MultiClass",
            "pairs": [
                {
                    "stringValue": "ovo",
                    "instanceName": "Ovo"
                },
                {
                    "stringValue": "ovr",
                    "instanceName": "Ovr"
                }
            ]
        },
        "sklearn/sklearn.metrics._ranking/_multiclass_roc_auc_score/average": {
            "target": "sklearn/sklearn.metrics._ranking/_multiclass_roc_auc_score/average",
            "enumName": "Average",
            "pairs": [
                {
                    "stringValue": "macro",
                    "instanceName": "Macro"
                },
                {
                    "stringValue": "weighted",
                    "instanceName": "Weighted"
                }
            ]
        },
        "sklearn/sklearn.metrics._ranking/average_precision_score/average": {
            "target": "sklearn/sklearn.metrics._ranking/average_precision_score/average",
            "enumName": "Average",
            "pairs": [
                {
                    "stringValue": "macro",
                    "instanceName": "Macro"
                },
                {
                    "stringValue": "micro",
                    "instanceName": "Micro"
                },
                {
                    "stringValue": "samples",
                    "instanceName": "Samples"
                },
                {
                    "stringValue": "weighted",
                    "instanceName": "Weighted"
                }
            ]
        },
        "sklearn/sklearn.metrics._ranking/roc_auc_score/average": {
            "target": "sklearn/sklearn.metrics._ranking/roc_auc_score/average",
            "enumName": "Average",
            "pairs": [
                {
                    "stringValue": "macro",
                    "instanceName": "Macro"
                },
                {
                    "stringValue": "micro",
                    "instanceName": "Micro"
                },
                {
                    "stringValue": "samples",
                    "instanceName": "Samples"
                },
                {
                    "stringValue": "weighted",
                    "instanceName": "Weighted"
                }
            ]
        },
        "sklearn/sklearn.metrics._ranking/roc_auc_score/multi_class": {
            "target": "sklearn/sklearn.metrics._ranking/roc_auc_score/multi_class",
            "enumName": "MultiClass",
            "pairs": [
                {
                    "stringValue": "ovo",
                    "instanceName": "Ovo"
                },
                {
                    "stringValue": "ovr",
                    "instanceName": "Ovr"
                },
                {
                    "stringValue": "raise",
                    "instanceName": "Raise"
                }
            ]
        },
        "sklearn/sklearn.metrics._regression/d2_absolute_error_score/multioutput": {
            "target": "sklearn/sklearn.metrics._regression/d2_absolute_error_score/multioutput",
            "enumName": "Multioutput",
            "pairs": [
                {
                    "stringValue": "raw_values",
                    "instanceName": "RawValues"
                },
                {
                    "stringValue": "uniform_average",
                    "instanceName": "UniformAverage"
                }
            ]
        },
        "sklearn/sklearn.metrics._regression/d2_pinball_score/multioutput": {
            "target": "sklearn/sklearn.metrics._regression/d2_pinball_score/multioutput",
            "enumName": "Multioutput",
            "pairs": [
                {
                    "stringValue": "raw_values",
                    "instanceName": "RawValues"
                },
                {
                    "stringValue": "uniform_average",
                    "instanceName": "UniformAverage"
                }
            ]
        },
        "sklearn/sklearn.metrics._regression/mean_absolute_error/multioutput": {
            "target": "sklearn/sklearn.metrics._regression/mean_absolute_error/multioutput",
            "enumName": "Multioutput",
            "pairs": [
                {
                    "stringValue": "raw_values",
                    "instanceName": "RawValues"
                },
                {
                    "stringValue": "uniform_average",
                    "instanceName": "UniformAverage"
                }
            ]
        },
        "sklearn/sklearn.metrics._regression/mean_pinball_loss/multioutput": {
            "target": "sklearn/sklearn.metrics._regression/mean_pinball_loss/multioutput",
            "enumName": "Multioutput",
            "pairs": [
                {
                    "stringValue": "raw_values",
                    "instanceName": "RawValues"
                },
                {
                    "stringValue": "uniform_average",
                    "instanceName": "UniformAverage"
                }
            ]
        },
        "sklearn/sklearn.metrics._regression/mean_squared_error/multioutput": {
            "target": "sklearn/sklearn.metrics._regression/mean_squared_error/multioutput",
            "enumName": "Multioutput",
            "pairs": [
                {
                    "stringValue": "raw_values",
                    "instanceName": "RawValues"
                },
                {
                    "stringValue": "uniform_average",
                    "instanceName": "UniformAverage"
                }
            ]
        },
        "sklearn/sklearn.metrics._regression/r2_score/multioutput": {
            "target": "sklearn/sklearn.metrics._regression/r2_score/multioutput",
            "enumName": "Multioutput",
            "pairs": [
                {
                    "stringValue": "raw_values",
                    "instanceName": "RawValues"
                },
                {
                    "stringValue": "uniform_average",
                    "instanceName": "UniformAverage"
                },
                {
                    "stringValue": "variance_weighted",
                    "instanceName": "VarianceWeighted"
                }
            ]
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/__init__/covariance_type": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/__init__/covariance_type",
            "enumName": "CovarianceType",
            "pairs": [
                {
                    "stringValue": "diag",
                    "instanceName": "Diag"
                },
                {
                    "stringValue": "full",
                    "instanceName": "Full"
                },
                {
                    "stringValue": "spherical",
                    "instanceName": "Spherical"
                },
                {
                    "stringValue": "tied",
                    "instanceName": "Tied"
                }
            ]
        },
        "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/__init__/init_params": {
            "target": "sklearn/sklearn.mixture._bayesian_mixture/BayesianGaussianMixture/__init__/init_params",
            "enumName": "InitParams",
            "pairs": [
                {
                    "stringValue": "k-means++",
                    "instanceName": "Kmeans"
                },
                {
                    "stringValue": "kmeans",
                    "instanceName": "Kmeans"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                },
                {
                    "stringValue": "random_from_data",
                    "instanceName": "RandomFromData"
                }
            ]
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/__init__/covariance_type": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/__init__/covariance_type",
            "enumName": "CovarianceType",
            "pairs": [
                {
                    "stringValue": "diag",
                    "instanceName": "Diag"
                },
                {
                    "stringValue": "full",
                    "instanceName": "Full"
                },
                {
                    "stringValue": "spherical",
                    "instanceName": "Spherical"
                },
                {
                    "stringValue": "tied",
                    "instanceName": "Tied"
                }
            ]
        },
        "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/__init__/init_params": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/GaussianMixture/__init__/init_params",
            "enumName": "InitParams",
            "pairs": [
                {
                    "stringValue": "k-means++",
                    "instanceName": "Kmeans"
                },
                {
                    "stringValue": "kmeans",
                    "instanceName": "Kmeans"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                },
                {
                    "stringValue": "random_from_data",
                    "instanceName": "RandomFromData"
                }
            ]
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_compute_log_det_cholesky/covariance_type": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_compute_log_det_cholesky/covariance_type",
            "enumName": "CovarianceType",
            "pairs": [
                {
                    "stringValue": "diag",
                    "instanceName": "Diag"
                },
                {
                    "stringValue": "full",
                    "instanceName": "Full"
                },
                {
                    "stringValue": "spherical",
                    "instanceName": "Spherical"
                },
                {
                    "stringValue": "tied",
                    "instanceName": "Tied"
                }
            ]
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_compute_precision_cholesky/covariance_type": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_compute_precision_cholesky/covariance_type",
            "enumName": "CovarianceType",
            "pairs": [
                {
                    "stringValue": "diag",
                    "instanceName": "Diag"
                },
                {
                    "stringValue": "full",
                    "instanceName": "Full"
                },
                {
                    "stringValue": "spherical",
                    "instanceName": "Spherical"
                },
                {
                    "stringValue": "tied",
                    "instanceName": "Tied"
                }
            ]
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_parameters/covariance_type": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_estimate_gaussian_parameters/covariance_type",
            "enumName": "CovarianceType",
            "pairs": [
                {
                    "stringValue": "diag",
                    "instanceName": "Diag"
                },
                {
                    "stringValue": "full",
                    "instanceName": "Full"
                },
                {
                    "stringValue": "spherical",
                    "instanceName": "Spherical"
                },
                {
                    "stringValue": "tied",
                    "instanceName": "Tied"
                }
            ]
        },
        "sklearn/sklearn.mixture._gaussian_mixture/_estimate_log_gaussian_prob/covariance_type": {
            "target": "sklearn/sklearn.mixture._gaussian_mixture/_estimate_log_gaussian_prob/covariance_type",
            "enumName": "CovarianceType",
            "pairs": [
                {
                    "stringValue": "diag",
                    "instanceName": "Diag"
                },
                {
                    "stringValue": "full",
                    "instanceName": "Full"
                },
                {
                    "stringValue": "spherical",
                    "instanceName": "Spherical"
                },
                {
                    "stringValue": "tied",
                    "instanceName": "Tied"
                }
            ]
        },
        "sklearn/sklearn.model_selection._search_successive_halving/HalvingGridSearchCV/__init__/min_resources": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/HalvingGridSearchCV/__init__/min_resources",
            "enumName": "MinResources",
            "pairs": [
                {
                    "stringValue": "exhaust",
                    "instanceName": "Exhaust"
                },
                {
                    "stringValue": "smallest",
                    "instanceName": "Smallest"
                }
            ]
        },
        "sklearn/sklearn.model_selection._search_successive_halving/HalvingRandomSearchCV/__init__/min_resources": {
            "target": "sklearn/sklearn.model_selection._search_successive_halving/HalvingRandomSearchCV/__init__/min_resources",
            "enumName": "MinResources",
            "pairs": [
                {
                    "stringValue": "exhaust",
                    "instanceName": "Exhaust"
                },
                {
                    "stringValue": "smallest",
                    "instanceName": "Smallest"
                }
            ]
        },
        "sklearn/sklearn.model_selection._validation/cross_val_predict/method": {
            "target": "sklearn/sklearn.model_selection._validation/cross_val_predict/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "decision_function",
                    "instanceName": "DecisionFunction"
                },
                {
                    "stringValue": "predict",
                    "instanceName": "Predict"
                },
                {
                    "stringValue": "predict_log_proba",
                    "instanceName": "PredictLogProba"
                },
                {
                    "stringValue": "predict_proba",
                    "instanceName": "PredictProba"
                }
            ]
        },
        "sklearn/sklearn.neighbors._base/KNeighborsMixin/kneighbors_graph/mode": {
            "target": "sklearn/sklearn.neighbors._base/KNeighborsMixin/kneighbors_graph/mode",
            "enumName": "Mode",
            "pairs": [
                {
                    "stringValue": "connectivity",
                    "instanceName": "Connectivity"
                },
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                }
            ]
        },
        "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin/radius_neighbors_graph/mode": {
            "target": "sklearn/sklearn.neighbors._base/RadiusNeighborsMixin/radius_neighbors_graph/mode",
            "enumName": "Mode",
            "pairs": [
                {
                    "stringValue": "connectivity",
                    "instanceName": "Connectivity"
                },
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                }
            ]
        },
        "sklearn/sklearn.neighbors._base/_get_weights/weights": {
            "target": "sklearn/sklearn.neighbors._base/_get_weights/weights",
            "enumName": "Weights",
            "pairs": [
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/__init__/weights": {
            "target": "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/__init__/weights",
            "enumName": "Weights",
            "pairs": [
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/__init__/algorithm": {
            "target": "sklearn/sklearn.neighbors._classification/KNeighborsClassifier/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/weights": {
            "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/weights",
            "enumName": "Weights",
            "pairs": [
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/algorithm": {
            "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/outlier_label": {
            "target": "sklearn/sklearn.neighbors._classification/RadiusNeighborsClassifier/__init__/outlier_label",
            "enumName": "OutlierLabel",
            "pairs": [
                {
                    "stringValue": "most_frequent",
                    "instanceName": "MostFrequent"
                }
            ]
        },
        "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/__init__/mode": {
            "target": "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/__init__/mode",
            "enumName": "Mode",
            "pairs": [
                {
                    "stringValue": "connectivity",
                    "instanceName": "Connectivity"
                },
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                }
            ]
        },
        "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/__init__/algorithm": {
            "target": "sklearn/sklearn.neighbors._graph/KNeighborsTransformer/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/__init__/mode": {
            "target": "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/__init__/mode",
            "enumName": "Mode",
            "pairs": [
                {
                    "stringValue": "connectivity",
                    "instanceName": "Connectivity"
                },
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                }
            ]
        },
        "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/__init__/algorithm": {
            "target": "sklearn/sklearn.neighbors._graph/RadiusNeighborsTransformer/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.neighbors._graph/radius_neighbors_graph/mode": {
            "target": "sklearn/sklearn.neighbors._graph/radius_neighbors_graph/mode",
            "enumName": "Mode",
            "pairs": [
                {
                    "stringValue": "connectivity",
                    "instanceName": "Connectivity"
                },
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                }
            ]
        },
        "sklearn/sklearn.neighbors._kde/KernelDensity/__init__/bandwidth": {
            "target": "sklearn/sklearn.neighbors._kde/KernelDensity/__init__/bandwidth",
            "enumName": "Bandwidth",
            "pairs": [
                {
                    "stringValue": "scott",
                    "instanceName": "Scott"
                },
                {
                    "stringValue": "silverman",
                    "instanceName": "Silverman"
                }
            ]
        },
        "sklearn/sklearn.neighbors._kde/KernelDensity/__init__/algorithm": {
            "target": "sklearn/sklearn.neighbors._kde/KernelDensity/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.neighbors._kde/KernelDensity/__init__/kernel": {
            "target": "sklearn/sklearn.neighbors._kde/KernelDensity/__init__/kernel",
            "enumName": "Kernel",
            "pairs": [
                {
                    "stringValue": "cosine",
                    "instanceName": "Cosine"
                },
                {
                    "stringValue": "epanechnikov",
                    "instanceName": "Epanechnikov"
                },
                {
                    "stringValue": "exponential",
                    "instanceName": "Exponential"
                },
                {
                    "stringValue": "gaussian",
                    "instanceName": "Gaussian"
                },
                {
                    "stringValue": "linear",
                    "instanceName": "Linear"
                },
                {
                    "stringValue": "tophat",
                    "instanceName": "Tophat"
                }
            ]
        },
        "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/__init__/algorithm": {
            "target": "sklearn/sklearn.neighbors._lof/LocalOutlierFactor/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/__init__/init": {
            "target": "sklearn/sklearn.neighbors._nca/NeighborhoodComponentsAnalysis/__init__/init",
            "enumName": "Init",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "identity",
                    "instanceName": "Identity"
                },
                {
                    "stringValue": "lda",
                    "instanceName": "Lda"
                },
                {
                    "stringValue": "pca",
                    "instanceName": "Pca"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/__init__/weights": {
            "target": "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/__init__/weights",
            "enumName": "Weights",
            "pairs": [
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/__init__/algorithm": {
            "target": "sklearn/sklearn.neighbors._regression/KNeighborsRegressor/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/__init__/weights": {
            "target": "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/__init__/weights",
            "enumName": "Weights",
            "pairs": [
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/__init__/algorithm": {
            "target": "sklearn/sklearn.neighbors._regression/RadiusNeighborsRegressor/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.neighbors._unsupervised/NearestNeighbors/__init__/algorithm": {
            "target": "sklearn/sklearn.neighbors._unsupervised/NearestNeighbors/__init__/algorithm",
            "enumName": "Algorithm",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "ball_tree",
                    "instanceName": "BallTree"
                },
                {
                    "stringValue": "brute",
                    "instanceName": "Brute"
                },
                {
                    "stringValue": "kd_tree",
                    "instanceName": "KdTree"
                }
            ]
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/activation": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/activation",
            "enumName": "Activation",
            "pairs": [
                {
                    "stringValue": "identity",
                    "instanceName": "Identity"
                },
                {
                    "stringValue": "logistic",
                    "instanceName": "Logistic"
                },
                {
                    "stringValue": "relu",
                    "instanceName": "Relu"
                },
                {
                    "stringValue": "tanh",
                    "instanceName": "Tanh"
                }
            ]
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/solver": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "adam",
                    "instanceName": "Adam"
                },
                {
                    "stringValue": "lbfgs",
                    "instanceName": "Lbfgs"
                },
                {
                    "stringValue": "sgd",
                    "instanceName": "Sgd"
                }
            ]
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/learning_rate": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPClassifier/__init__/learning_rate",
            "enumName": "LearningRate",
            "pairs": [
                {
                    "stringValue": "adaptive",
                    "instanceName": "Adaptive"
                },
                {
                    "stringValue": "constant",
                    "instanceName": "Constant"
                },
                {
                    "stringValue": "invscaling",
                    "instanceName": "Invscaling"
                }
            ]
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/activation": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/activation",
            "enumName": "Activation",
            "pairs": [
                {
                    "stringValue": "identity",
                    "instanceName": "Identity"
                },
                {
                    "stringValue": "logistic",
                    "instanceName": "Logistic"
                },
                {
                    "stringValue": "relu",
                    "instanceName": "Relu"
                },
                {
                    "stringValue": "tanh",
                    "instanceName": "Tanh"
                }
            ]
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/solver": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/solver",
            "enumName": "Solver",
            "pairs": [
                {
                    "stringValue": "adam",
                    "instanceName": "Adam"
                },
                {
                    "stringValue": "lbfgs",
                    "instanceName": "Lbfgs"
                },
                {
                    "stringValue": "sgd",
                    "instanceName": "Sgd"
                }
            ]
        },
        "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/learning_rate": {
            "target": "sklearn/sklearn.neural_network._multilayer_perceptron/MLPRegressor/__init__/learning_rate",
            "enumName": "LearningRate",
            "pairs": [
                {
                    "stringValue": "adaptive",
                    "instanceName": "Adaptive"
                },
                {
                    "stringValue": "constant",
                    "instanceName": "Constant"
                },
                {
                    "stringValue": "invscaling",
                    "instanceName": "Invscaling"
                }
            ]
        },
        "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/__init__/lr_schedule": {
            "target": "sklearn/sklearn.neural_network._stochastic_optimizers/SGDOptimizer/__init__/lr_schedule",
            "enumName": "LrSchedule",
            "pairs": [
                {
                    "stringValue": "adaptive",
                    "instanceName": "Adaptive"
                },
                {
                    "stringValue": "constant",
                    "instanceName": "Constant"
                },
                {
                    "stringValue": "invscaling",
                    "instanceName": "Invscaling"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._data/Normalizer/__init__/norm": {
            "target": "sklearn/sklearn.preprocessing._data/Normalizer/__init__/norm",
            "enumName": "Norm",
            "pairs": [
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                },
                {
                    "stringValue": "max",
                    "instanceName": "Max"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._data/PowerTransformer/__init__/method": {
            "target": "sklearn/sklearn.preprocessing._data/PowerTransformer/__init__/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "box-cox",
                    "instanceName": "Boxcox"
                },
                {
                    "stringValue": "yeo-johnson",
                    "instanceName": "Yeojohnson"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._data/QuantileTransformer/__init__/output_distribution": {
            "target": "sklearn/sklearn.preprocessing._data/QuantileTransformer/__init__/output_distribution",
            "enumName": "OutputDistribution",
            "pairs": [
                {
                    "stringValue": "normal",
                    "instanceName": "Normal"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._data/normalize/norm": {
            "target": "sklearn/sklearn.preprocessing._data/normalize/norm",
            "enumName": "Norm",
            "pairs": [
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                },
                {
                    "stringValue": "max",
                    "instanceName": "Max"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._data/quantile_transform/output_distribution": {
            "target": "sklearn/sklearn.preprocessing._data/quantile_transform/output_distribution",
            "enumName": "OutputDistribution",
            "pairs": [
                {
                    "stringValue": "normal",
                    "instanceName": "Normal"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__/encode": {
            "target": "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__/encode",
            "enumName": "Encode",
            "pairs": [
                {
                    "stringValue": "onehot",
                    "instanceName": "Onehot"
                },
                {
                    "stringValue": "onehot-dense",
                    "instanceName": "Onehotdense"
                },
                {
                    "stringValue": "ordinal",
                    "instanceName": "Ordinal"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__/strategy": {
            "target": "sklearn/sklearn.preprocessing._discretization/KBinsDiscretizer/__init__/strategy",
            "enumName": "Strategy",
            "pairs": [
                {
                    "stringValue": "kmeans",
                    "instanceName": "Kmeans"
                },
                {
                    "stringValue": "quantile",
                    "instanceName": "Quantile"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/__init__/drop": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/__init__/drop",
            "enumName": "Drop",
            "pairs": [
                {
                    "stringValue": "first",
                    "instanceName": "First"
                },
                {
                    "stringValue": "if_binary",
                    "instanceName": "IfBinary"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/__init__/handle_unknown": {
            "target": "sklearn/sklearn.preprocessing._encoders/OneHotEncoder/__init__/handle_unknown",
            "enumName": "HandleUnknown",
            "pairs": [
                {
                    "stringValue": "error",
                    "instanceName": "Error"
                },
                {
                    "stringValue": "ignore",
                    "instanceName": "Ignore"
                },
                {
                    "stringValue": "infrequent_if_exist",
                    "instanceName": "InfrequentIfExist"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/__init__/handle_unknown": {
            "target": "sklearn/sklearn.preprocessing._encoders/OrdinalEncoder/__init__/handle_unknown",
            "enumName": "HandleUnknown",
            "pairs": [
                {
                    "stringValue": "error",
                    "instanceName": "Error"
                },
                {
                    "stringValue": "use_encoded_value",
                    "instanceName": "UseEncodedValue"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/__init__/order": {
            "target": "sklearn/sklearn.preprocessing._polynomial/PolynomialFeatures/__init__/order",
            "enumName": "Order",
            "pairs": [
                {
                    "stringValue": "C",
                    "instanceName": "C"
                },
                {
                    "stringValue": "F",
                    "instanceName": "F"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/knots": {
            "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/knots",
            "enumName": "Knots",
            "pairs": [
                {
                    "stringValue": "quantile",
                    "instanceName": "Quantile"
                },
                {
                    "stringValue": "uniform",
                    "instanceName": "Uniform"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/extrapolation": {
            "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/extrapolation",
            "enumName": "Extrapolation",
            "pairs": [
                {
                    "stringValue": "constant",
                    "instanceName": "Constant"
                },
                {
                    "stringValue": "continue",
                    "instanceName": "Continue"
                },
                {
                    "stringValue": "error",
                    "instanceName": "Error"
                },
                {
                    "stringValue": "linear",
                    "instanceName": "Linear"
                },
                {
                    "stringValue": "periodic",
                    "instanceName": "Periodic"
                }
            ]
        },
        "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/order": {
            "target": "sklearn/sklearn.preprocessing._polynomial/SplineTransformer/__init__/order",
            "enumName": "Order",
            "pairs": [
                {
                    "stringValue": "C",
                    "instanceName": "C"
                },
                {
                    "stringValue": "F",
                    "instanceName": "F"
                }
            ]
        },
        "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/__init__/kernel": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/BaseLabelPropagation/__init__/kernel",
            "enumName": "Kernel",
            "pairs": [
                {
                    "stringValue": "knn",
                    "instanceName": "Knn"
                },
                {
                    "stringValue": "rbf",
                    "instanceName": "Rbf"
                }
            ]
        },
        "sklearn/sklearn.semi_supervised._label_propagation/LabelPropagation/__init__/kernel": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/LabelPropagation/__init__/kernel",
            "enumName": "Kernel",
            "pairs": [
                {
                    "stringValue": "knn",
                    "instanceName": "Knn"
                },
                {
                    "stringValue": "rbf",
                    "instanceName": "Rbf"
                }
            ]
        },
        "sklearn/sklearn.semi_supervised._label_propagation/LabelSpreading/__init__/kernel": {
            "target": "sklearn/sklearn.semi_supervised._label_propagation/LabelSpreading/__init__/kernel",
            "enumName": "Kernel",
            "pairs": [
                {
                    "stringValue": "knn",
                    "instanceName": "Knn"
                },
                {
                    "stringValue": "rbf",
                    "instanceName": "Rbf"
                }
            ]
        },
        "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/__init__/criterion": {
            "target": "sklearn/sklearn.semi_supervised._self_training/SelfTrainingClassifier/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "k_best",
                    "instanceName": "KBest"
                },
                {
                    "stringValue": "threshold",
                    "instanceName": "Threshold"
                }
            ]
        },
        "sklearn/sklearn.svm._base/_fit_liblinear/penalty": {
            "target": "sklearn/sklearn.svm._base/_fit_liblinear/penalty",
            "enumName": "Penalty",
            "pairs": [
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                }
            ]
        },
        "sklearn/sklearn.svm._base/_fit_liblinear/multi_class": {
            "target": "sklearn/sklearn.svm._base/_fit_liblinear/multi_class",
            "enumName": "MultiClass",
            "pairs": [
                {
                    "stringValue": "crammer_singer",
                    "instanceName": "CrammerSinger"
                },
                {
                    "stringValue": "ovr",
                    "instanceName": "Ovr"
                }
            ]
        },
        "sklearn/sklearn.svm._base/_fit_liblinear/loss": {
            "target": "sklearn/sklearn.svm._base/_fit_liblinear/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "epsilon_insensitive",
                    "instanceName": "EpsilonInsensitive"
                },
                {
                    "stringValue": "hinge",
                    "instanceName": "Hinge"
                },
                {
                    "stringValue": "logistic_regression",
                    "instanceName": "LogisticRegression"
                },
                {
                    "stringValue": "squared_hinge",
                    "instanceName": "SquaredHinge"
                }
            ]
        },
        "sklearn/sklearn.svm._bounds/l1_min_c/loss": {
            "target": "sklearn/sklearn.svm._bounds/l1_min_c/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "log",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "squared_hinge",
                    "instanceName": "SquaredHinge"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/LinearSVC/__init__/penalty": {
            "target": "sklearn/sklearn.svm._classes/LinearSVC/__init__/penalty",
            "enumName": "Penalty",
            "pairs": [
                {
                    "stringValue": "l1",
                    "instanceName": "L"
                },
                {
                    "stringValue": "l2",
                    "instanceName": "L"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/LinearSVC/__init__/loss": {
            "target": "sklearn/sklearn.svm._classes/LinearSVC/__init__/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "hinge",
                    "instanceName": "Hinge"
                },
                {
                    "stringValue": "squared_hinge",
                    "instanceName": "SquaredHinge"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/LinearSVC/__init__/multi_class": {
            "target": "sklearn/sklearn.svm._classes/LinearSVC/__init__/multi_class",
            "enumName": "MultiClass",
            "pairs": [
                {
                    "stringValue": "crammer_singer",
                    "instanceName": "CrammerSinger"
                },
                {
                    "stringValue": "ovr",
                    "instanceName": "Ovr"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/LinearSVR/__init__/loss": {
            "target": "sklearn/sklearn.svm._classes/LinearSVR/__init__/loss",
            "enumName": "Loss",
            "pairs": [
                {
                    "stringValue": "epsilon_insensitive",
                    "instanceName": "EpsilonInsensitive"
                },
                {
                    "stringValue": "squared_epsilon_insensitive",
                    "instanceName": "SquaredEpsilonInsensitive"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/NuSVC/__init__/kernel": {
            "target": "sklearn/sklearn.svm._classes/NuSVC/__init__/kernel",
            "enumName": "Kernel",
            "pairs": [
                {
                    "stringValue": "linear",
                    "instanceName": "Linear"
                },
                {
                    "stringValue": "poly",
                    "instanceName": "Poly"
                },
                {
                    "stringValue": "precomputed",
                    "instanceName": "Precomputed"
                },
                {
                    "stringValue": "rbf",
                    "instanceName": "Rbf"
                },
                {
                    "stringValue": "sigmoid",
                    "instanceName": "Sigmoid"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/NuSVC/__init__/gamma": {
            "target": "sklearn/sklearn.svm._classes/NuSVC/__init__/gamma",
            "enumName": "Gamma",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "scale",
                    "instanceName": "Scale"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/NuSVC/__init__/class_weight": {
            "target": "sklearn/sklearn.svm._classes/NuSVC/__init__/class_weight",
            "enumName": "ClassWeight",
            "pairs": [
                {
                    "stringValue": "balanced",
                    "instanceName": "Balanced"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/NuSVC/__init__/decision_function_shape": {
            "target": "sklearn/sklearn.svm._classes/NuSVC/__init__/decision_function_shape",
            "enumName": "DecisionFunctionShape",
            "pairs": [
                {
                    "stringValue": "ovo",
                    "instanceName": "Ovo"
                },
                {
                    "stringValue": "ovr",
                    "instanceName": "Ovr"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/NuSVR/__init__/kernel": {
            "target": "sklearn/sklearn.svm._classes/NuSVR/__init__/kernel",
            "enumName": "Kernel",
            "pairs": [
                {
                    "stringValue": "linear",
                    "instanceName": "Linear"
                },
                {
                    "stringValue": "poly",
                    "instanceName": "Poly"
                },
                {
                    "stringValue": "precomputed",
                    "instanceName": "Precomputed"
                },
                {
                    "stringValue": "rbf",
                    "instanceName": "Rbf"
                },
                {
                    "stringValue": "sigmoid",
                    "instanceName": "Sigmoid"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/NuSVR/__init__/gamma": {
            "target": "sklearn/sklearn.svm._classes/NuSVR/__init__/gamma",
            "enumName": "Gamma",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "scale",
                    "instanceName": "Scale"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/OneClassSVM/__init__/kernel": {
            "target": "sklearn/sklearn.svm._classes/OneClassSVM/__init__/kernel",
            "enumName": "Kernel",
            "pairs": [
                {
                    "stringValue": "linear",
                    "instanceName": "Linear"
                },
                {
                    "stringValue": "poly",
                    "instanceName": "Poly"
                },
                {
                    "stringValue": "precomputed",
                    "instanceName": "Precomputed"
                },
                {
                    "stringValue": "rbf",
                    "instanceName": "Rbf"
                },
                {
                    "stringValue": "sigmoid",
                    "instanceName": "Sigmoid"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/OneClassSVM/__init__/gamma": {
            "target": "sklearn/sklearn.svm._classes/OneClassSVM/__init__/gamma",
            "enumName": "Gamma",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "scale",
                    "instanceName": "Scale"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/SVC/__init__/kernel": {
            "target": "sklearn/sklearn.svm._classes/SVC/__init__/kernel",
            "enumName": "Kernel",
            "pairs": [
                {
                    "stringValue": "linear",
                    "instanceName": "Linear"
                },
                {
                    "stringValue": "poly",
                    "instanceName": "Poly"
                },
                {
                    "stringValue": "precomputed",
                    "instanceName": "Precomputed"
                },
                {
                    "stringValue": "rbf",
                    "instanceName": "Rbf"
                },
                {
                    "stringValue": "sigmoid",
                    "instanceName": "Sigmoid"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/SVC/__init__/gamma": {
            "target": "sklearn/sklearn.svm._classes/SVC/__init__/gamma",
            "enumName": "Gamma",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "scale",
                    "instanceName": "Scale"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/SVC/__init__/decision_function_shape": {
            "target": "sklearn/sklearn.svm._classes/SVC/__init__/decision_function_shape",
            "enumName": "DecisionFunctionShape",
            "pairs": [
                {
                    "stringValue": "ovo",
                    "instanceName": "Ovo"
                },
                {
                    "stringValue": "ovr",
                    "instanceName": "Ovr"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/SVR/__init__/kernel": {
            "target": "sklearn/sklearn.svm._classes/SVR/__init__/kernel",
            "enumName": "Kernel",
            "pairs": [
                {
                    "stringValue": "linear",
                    "instanceName": "Linear"
                },
                {
                    "stringValue": "poly",
                    "instanceName": "Poly"
                },
                {
                    "stringValue": "precomputed",
                    "instanceName": "Precomputed"
                },
                {
                    "stringValue": "rbf",
                    "instanceName": "Rbf"
                },
                {
                    "stringValue": "sigmoid",
                    "instanceName": "Sigmoid"
                }
            ]
        },
        "sklearn/sklearn.svm._classes/SVR/__init__/gamma": {
            "target": "sklearn/sklearn.svm._classes/SVR/__init__/gamma",
            "enumName": "Gamma",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "scale",
                    "instanceName": "Scale"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/criterion": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "entropy",
                    "instanceName": "Entropy"
                },
                {
                    "stringValue": "gini",
                    "instanceName": "Gini"
                },
                {
                    "stringValue": "log_loss",
                    "instanceName": "LogLoss"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/splitter": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/splitter",
            "enumName": "Splitter",
            "pairs": [
                {
                    "stringValue": "best",
                    "instanceName": "Best"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/max_features": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeClassifier/__init__/max_features",
            "enumName": "MaxFeatures",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "log2",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "sqrt",
                    "instanceName": "Sqrt"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/criterion": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "absolute_error",
                    "instanceName": "AbsoluteError"
                },
                {
                    "stringValue": "friedman_mse",
                    "instanceName": "FriedmanMse"
                },
                {
                    "stringValue": "poisson",
                    "instanceName": "Poisson"
                },
                {
                    "stringValue": "squared_error",
                    "instanceName": "SquaredError"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/splitter": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/splitter",
            "enumName": "Splitter",
            "pairs": [
                {
                    "stringValue": "best",
                    "instanceName": "Best"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/max_features": {
            "target": "sklearn/sklearn.tree._classes/DecisionTreeRegressor/__init__/max_features",
            "enumName": "MaxFeatures",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "log2",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "sqrt",
                    "instanceName": "Sqrt"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/criterion": {
            "target": "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "entropy",
                    "instanceName": "Entropy"
                },
                {
                    "stringValue": "gini",
                    "instanceName": "Gini"
                },
                {
                    "stringValue": "log_loss",
                    "instanceName": "LogLoss"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/splitter": {
            "target": "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/splitter",
            "enumName": "Splitter",
            "pairs": [
                {
                    "stringValue": "best",
                    "instanceName": "Best"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/max_features": {
            "target": "sklearn/sklearn.tree._classes/ExtraTreeClassifier/__init__/max_features",
            "enumName": "MaxFeatures",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "log2",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "sqrt",
                    "instanceName": "Sqrt"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/criterion": {
            "target": "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/criterion",
            "enumName": "Criterion",
            "pairs": [
                {
                    "stringValue": "friedman_mse",
                    "instanceName": "FriedmanMse"
                },
                {
                    "stringValue": "squared_error",
                    "instanceName": "SquaredError"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/splitter": {
            "target": "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/splitter",
            "enumName": "Splitter",
            "pairs": [
                {
                    "stringValue": "best",
                    "instanceName": "Best"
                },
                {
                    "stringValue": "random",
                    "instanceName": "Random"
                }
            ]
        },
        "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/max_features": {
            "target": "sklearn/sklearn.tree._classes/ExtraTreeRegressor/__init__/max_features",
            "enumName": "MaxFeatures",
            "pairs": [
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "log2",
                    "instanceName": "Log"
                },
                {
                    "stringValue": "sqrt",
                    "instanceName": "Sqrt"
                }
            ]
        },
        "sklearn/sklearn.tree._export/plot_tree/label": {
            "target": "sklearn/sklearn.tree._export/plot_tree/label",
            "enumName": "Label",
            "pairs": [
                {
                    "stringValue": "all",
                    "instanceName": "All"
                },
                {
                    "stringValue": "none",
                    "instanceName": "None"
                },
                {
                    "stringValue": "root",
                    "instanceName": "Root"
                }
            ]
        },
        "sklearn/sklearn.utils._estimator_html_repr/_VisualBlock/__init__/kind": {
            "target": "sklearn/sklearn.utils._estimator_html_repr/_VisualBlock/__init__/kind",
            "enumName": "Kind",
            "pairs": [
                {
                    "stringValue": "parallel",
                    "instanceName": "Parallel"
                },
                {
                    "stringValue": "serial",
                    "instanceName": "Serial"
                },
                {
                    "stringValue": "single",
                    "instanceName": "Single"
                }
            ]
        },
        "sklearn/sklearn.utils._param_validation/Interval/__init__/closed": {
            "target": "sklearn/sklearn.utils._param_validation/Interval/__init__/closed",
            "enumName": "Closed",
            "pairs": [
                {
                    "stringValue": "both",
                    "instanceName": "Both"
                },
                {
                    "stringValue": "left",
                    "instanceName": "Left"
                },
                {
                    "stringValue": "neither",
                    "instanceName": "Neither"
                },
                {
                    "stringValue": "right",
                    "instanceName": "Right"
                }
            ]
        },
        "sklearn/sklearn.utils._testing/_convert_container/constructor_name": {
            "target": "sklearn/sklearn.utils._testing/_convert_container/constructor_name",
            "enumName": "ConstructorName",
            "pairs": [
                {
                    "stringValue": "array",
                    "instanceName": "Array"
                },
                {
                    "stringValue": "dataframe",
                    "instanceName": "Dataframe"
                },
                {
                    "stringValue": "index",
                    "instanceName": "Index"
                },
                {
                    "stringValue": "list",
                    "instanceName": "List"
                },
                {
                    "stringValue": "series",
                    "instanceName": "Series"
                },
                {
                    "stringValue": "slice",
                    "instanceName": "Slice"
                },
                {
                    "stringValue": "sparse",
                    "instanceName": "Sparse"
                },
                {
                    "stringValue": "sparse_csc",
                    "instanceName": "SparseCsc"
                },
                {
                    "stringValue": "sparse_csr",
                    "instanceName": "SparseCsr"
                },
                {
                    "stringValue": "tuple",
                    "instanceName": "Tuple"
                }
            ]
        },
        "sklearn/sklearn.utils.extmath/_randomized_eigsh/power_iteration_normalizer": {
            "target": "sklearn/sklearn.utils.extmath/_randomized_eigsh/power_iteration_normalizer",
            "enumName": "PowerIterationNormalizer",
            "pairs": [
                {
                    "stringValue": "LU",
                    "instanceName": "Lu"
                },
                {
                    "stringValue": "QR",
                    "instanceName": "Qr"
                },
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "none",
                    "instanceName": "None"
                }
            ]
        },
        "sklearn/sklearn.utils.extmath/_randomized_eigsh/selection": {
            "target": "sklearn/sklearn.utils.extmath/_randomized_eigsh/selection",
            "enumName": "Selection",
            "pairs": [
                {
                    "stringValue": "module",
                    "instanceName": "Module"
                },
                {
                    "stringValue": "value",
                    "instanceName": "Value"
                }
            ]
        },
        "sklearn/sklearn.utils.extmath/randomized_range_finder/power_iteration_normalizer": {
            "target": "sklearn/sklearn.utils.extmath/randomized_range_finder/power_iteration_normalizer",
            "enumName": "PowerIterationNormalizer",
            "pairs": [
                {
                    "stringValue": "LU",
                    "instanceName": "Lu"
                },
                {
                    "stringValue": "QR",
                    "instanceName": "Qr"
                },
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "none",
                    "instanceName": "None"
                }
            ]
        },
        "sklearn/sklearn.utils.extmath/randomized_svd/power_iteration_normalizer": {
            "target": "sklearn/sklearn.utils.extmath/randomized_svd/power_iteration_normalizer",
            "enumName": "PowerIterationNormalizer",
            "pairs": [
                {
                    "stringValue": "LU",
                    "instanceName": "Lu"
                },
                {
                    "stringValue": "QR",
                    "instanceName": "Qr"
                },
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                },
                {
                    "stringValue": "none",
                    "instanceName": "None"
                }
            ]
        },
        "sklearn/sklearn.utils.extmath/randomized_svd/svd_lapack_driver": {
            "target": "sklearn/sklearn.utils.extmath/randomized_svd/svd_lapack_driver",
            "enumName": "SvdLapackDriver",
            "pairs": [
                {
                    "stringValue": "gesdd",
                    "instanceName": "Gesdd"
                },
                {
                    "stringValue": "gesvd",
                    "instanceName": "Gesvd"
                }
            ]
        },
        "sklearn/sklearn.utils.graph/_fix_connected_components/mode": {
            "target": "sklearn/sklearn.utils.graph/_fix_connected_components/mode",
            "enumName": "Mode",
            "pairs": [
                {
                    "stringValue": "connectivity",
                    "instanceName": "Connectivity"
                },
                {
                    "stringValue": "distance",
                    "instanceName": "Distance"
                }
            ]
        },
        "sklearn/sklearn.utils.graph/graph_shortest_path/method": {
            "target": "sklearn/sklearn.utils.graph/graph_shortest_path/method",
            "enumName": "Method",
            "pairs": [
                {
                    "stringValue": "D",
                    "instanceName": "D"
                },
                {
                    "stringValue": "FW",
                    "instanceName": "Fw"
                },
                {
                    "stringValue": "auto",
                    "instanceName": "Auto"
                }
            ]
        },
        "sklearn/sklearn.utils.validation/check_scalar/include_boundaries": {
            "target": "sklearn/sklearn.utils.validation/check_scalar/include_boundaries",
            "enumName": "IncludeBoundaries",
            "pairs": [
                {
                    "stringValue": "both",
                    "instanceName": "Both"
                },
                {
                    "stringValue": "left",
                    "instanceName": "Left"
                },
                {
                    "stringValue": "neither",
                    "instanceName": "Neither"
                },
                {
                    "stringValue": "right",
                    "instanceName": "Right"
                }
            ]
        }
    }
}
